{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/debug.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583462937656},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1583462132506},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1583462132506},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1583462132506},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1583462132521},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1583462132521},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1583462132521},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1583462132521},{"_id":"themes/next/README.md","hash":"d3035c6961280c1b4afb3a07661f5a635ce1eaff","modified":1583462132521},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1583462132521},{"_id":"themes/next/_config.yml","hash":"dda0a73a245b8bdda48946e69570b378ceb86bc9","modified":1583473511362},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1583462132537},{"_id":"themes/next/package.json","hash":"2941b27b2f62b5fe4821556de8cb90b570fbfb1d","modified":1583462132584},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1583462132506},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"1b87a7d22d466d78856900bd94875944181c991a","modified":1583462132506},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"398a107b5e28fd61fb759b0c0f1c8f39d1c6d2ad","modified":1583462132506},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1583462132506},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1583462132506},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1583462132521},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1583462132521},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1583462132521},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1583462132521},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1583462132521},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1583462132521},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1583462132521},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1583462132521},{"_id":"themes/next/docs/DATA-FILES.md","hash":"40a8089076005e0d26ef7c0db58a2b5b464cda6c","modified":1583462132521},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1583462132521},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1583462132521},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"a6e625cb0805a5c246820c561ba8f7f59c9b5659","modified":1583462132521},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1583462132521},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1583462132521},{"_id":"themes/next/languages/de.yml","hash":"109943f7adcd5cdbe4c6c95c9d279603f07edacb","modified":1583462132537},{"_id":"themes/next/languages/es.yml","hash":"53ef4a621fd628748b8ed711fe86080e9c9c91c8","modified":1583462132537},{"_id":"themes/next/languages/en.yml","hash":"20f951dc4df8602ffdd05a1d5899c5a9bc1759cc","modified":1583462132537},{"_id":"themes/next/languages/fa.yml","hash":"a24e0cf28e9f137d0d2219498778693c3c3960b2","modified":1583462132537},{"_id":"themes/next/languages/default.yml","hash":"20f951dc4df8602ffdd05a1d5899c5a9bc1759cc","modified":1583462132537},{"_id":"themes/next/languages/fr.yml","hash":"578a30a51b9ecbbcb4c200362ad9a37ffd3272db","modified":1583462132537},{"_id":"themes/next/languages/hu.yml","hash":"074d069af9aed5ad34fa809bd058a3b9e2d01051","modified":1583462132537},{"_id":"themes/next/languages/id.yml","hash":"6037450ecd02796e08ca2e98037845b7c30c2807","modified":1583462132537},{"_id":"themes/next/languages/it.yml","hash":"ba2c8f51f2f719dabe71b6053c6fe6866161ec66","modified":1583462132537},{"_id":"themes/next/languages/ja.yml","hash":"5e13b521201944815665bd077b65d7ce69622b81","modified":1583462132537},{"_id":"themes/next/languages/ko.yml","hash":"4aa8f3bf06e02879863b19901476cb23ecd2d709","modified":1583462132537},{"_id":"themes/next/languages/pt-BR.yml","hash":"0660471e067d01ec80962d5721ae282aafff274d","modified":1583462132537},{"_id":"themes/next/languages/nl.yml","hash":"e27b29c60d88ef4c30de291b595cf8cad639c5d1","modified":1583462132537},{"_id":"themes/next/languages/pt.yml","hash":"f7516b9d86b52c80bf63d3efc7ee6fd985205001","modified":1583462132537},{"_id":"themes/next/languages/tr.yml","hash":"145d28f6f051129dc6393affe8f68cd7ba925078","modified":1583462132537},{"_id":"themes/next/languages/uk.yml","hash":"21a573cdf8e26d87d5e32c5555bc645983268abe","modified":1583462132537},{"_id":"themes/next/languages/vi.yml","hash":"ffc144f606e171fdd8cdb41808ac36e406015a54","modified":1583462132537},{"_id":"themes/next/languages/ru.yml","hash":"7dcb2aab65a4b202476856f3e004862334229bcb","modified":1583462132537},{"_id":"themes/next/languages/zh-CN.yml","hash":"038c3a650d2e3a288be9ba6580564172c50b4289","modified":1583462132537},{"_id":"themes/next/languages/zh-HK.yml","hash":"2620632caa3c94022d9513ab1971d15512e737e7","modified":1583462132537},{"_id":"themes/next/languages/zh-TW.yml","hash":"0964e90406bbd495e901d6b9d5f10124c8cad950","modified":1583462132537},{"_id":"themes/next/layout/_layout.swig","hash":"29ee038b0d5ffdb45327598733ea968588367769","modified":1583462132552},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1583462132584},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1583462132584},{"_id":"themes/next/layout/page.swig","hash":"ae6c8549242c1fb2483fd68ce9ae1c083785e2ff","modified":1583462132584},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1583462132584},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1583462132584},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1583462132584},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1583462132599},{"_id":"source/_posts/01-正则表达式.md","hash":"6738a8abdf3f41a24c7b06f5da07d330b47b285d","modified":1583475391206},{"_id":"source/_posts/02-多任务-协程.md","hash":"a2c1ceb34387fd76ccd8d09cb0e55ba612ec5efa","modified":1583475325339},{"_id":"source/_posts/02-多任务-线程.md","hash":"6786e5dc280651a4136a9dfc4e75b5aaa0fcd97e","modified":1583475336360},{"_id":"source/_posts/02-多任务-进程.md","hash":"4a06dfac2bdbd427896e396415e10713f8cefc6e","modified":1583475348709},{"_id":"source/_posts/03-简单web服务器实现.md","hash":"e32070eed79b206938e1c6b9c2769021f0c6b254","modified":1583475303852},{"_id":"source/_posts/04-并发web服务器实现.md","hash":"216f52d9b05354bfe2e205b51c0d76ba71230cd5","modified":1583475286717},{"_id":"source/_posts/gitee折腾记录.md","hash":"438d3dbec568fb4dde17e5afa40d3d1f858fab16","modified":1583475438870},{"_id":"source/_posts/hello-world.md","hash":"e15f9062dcb4ee2ea53b924fcec4da61dda9a47b","modified":1583474823747},{"_id":"source/_posts/传输层-over.md","hash":"12707d1303008ca91343a7ef1850c9a3b794e3b3","modified":1583475423067},{"_id":"source/_posts/使用正则处理字幕文件，python.md","hash":"702bc887700907435d79027e0f57db3f5dbe605d","modified":1583475229912},{"_id":"source/_posts/安装黑苹果小记.md","hash":"ce9b10607ec9079f87b8364e8dace8aa7376451a","modified":1583475267352},{"_id":"source/_posts/应用层-over.md","hash":"6bdb94029a67ff8746ebacdbd659f4c079902519","modified":1583475411074},{"_id":"source/_posts/数据链路层-over.md","hash":"3b47db6c355498bc848cff9e6b247d948ce17757","modified":1583475419852},{"_id":"source/_posts/概述-over.md","hash":"5c787c5d9ef8f2c8c0257ea472cc79025e79f804","modified":1583475427742},{"_id":"source/_posts/物理层-over.md","hash":"1baf6695fc05a02aea8d87191f56e9339261ac7b","modified":1583475414614},{"_id":"source/_posts/网络层-over.md","hash":"306edbb2c2d95ab44199321bb1f4a0c686f33e54","modified":1583475417125},{"_id":"source/about/index.md","hash":"0d0b3d42596820ff609e1ec00890f1d745197fe0","modified":1583474823759},{"_id":"source/categories/index.md","hash":"a5fe6865f1e8448e2fc95b360fd1d4cb54b71d09","modified":1583474823761},{"_id":"source/tags/index.md","hash":"70edf8bb9aebcb9a318cf8ebce76bb7ea0737a6e","modified":1583474823763},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1583462132521},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"8ae029084b9ac482adf0fae2a0979dd388476513","modified":1583462132506},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"7a9526f749205c882d672a4f51e6a3033c80ca6e","modified":1583462132506},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"89667adbb85c25716dba607cd7a38191acf60736","modified":1583462132506},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"789a3cceb8f37a4b63b1fb2452a03332a3c365ed","modified":1583462132506},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1583462132521},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1583462132521},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1583462132521},{"_id":"themes/next/docs/ru/README.md","hash":"2b3988e79d96b66640d6a98f0c0e6de9099805e6","modified":1583462132521},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1583462132537},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1583462132537},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1583462132537},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1583462132537},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1583462132537},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"a80a2ece86306b5520d7790777660d122ea6b5cc","modified":1583462132537},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1583462132537},{"_id":"themes/next/docs/zh-CN/README.md","hash":"e5f6668c3a79e4a364931b9b4e5fa92f8c771ec8","modified":1583462132537},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1583462132537},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1583462132552},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1583462132552},{"_id":"themes/next/layout/_macro/post.swig","hash":"ee01368d65fbb8d387f0956398daf62ae9ba1645","modified":1583462132552},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1583462132552},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1583462132552},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1583462132552},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1583462132552},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1583462132568},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1583462132568},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"a3462c37ab6d7642b1e95860ea5c4cfbac78efab","modified":1583462132568},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1583462132568},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1583462132568},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1583462132568},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1583462132568},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1583462132568},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"1574848233f1bb2f45313ca08fef2dd33856a80b","modified":1583462132568},{"_id":"themes/next/scripts/events/index.js","hash":"17dcb0a74abd4101a8319cacabbc43ad9291eb89","modified":1583462132584},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1583462132584},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1583462132584},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1583462132584},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1583462132599},{"_id":"themes/next/scripts/filters/post.js","hash":"f2f566f2577c554377fd704442399acdd14a8118","modified":1583462132599},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cb211b6b50913454b1737782e9e2af96cfa40448","modified":1583462132599},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1583462132599},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1583462132599},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1583462132599},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1583462132599},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1583462132599},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1583462132599},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1583462132599},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1583462132599},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1583462132599},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1583462132599},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1583462132599},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1583462132599},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1583462132599},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1583462132630},{"_id":"themes/next/source/css/_colors.styl","hash":"7d07d83cb5c9a5f23751bb46019e853eb4d0cd0a","modified":1583462132599},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1583462132646},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1583462132646},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1583462132646},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1583462132646},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1583462132646},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1583462132646},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1583462132646},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1583462132646},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1583462132646},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1583462132646},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1583462132646},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1583462132646},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1583462132646},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1583462132646},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1583462132646},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1583462132646},{"_id":"themes/next/source/js/algolia-search.js","hash":"77cd98b1c790df12dd6cd8119bb3d99f72866635","modified":1583462132646},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1583462132662},{"_id":"themes/next/source/js/local-search.js","hash":"bd42a1e05d37352270d2653ebb5adcb5585afc73","modified":1583462132662},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1583462132662},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1583462132662},{"_id":"themes/next/source/js/utils.js","hash":"a155950bc52396a701d0fe9988b3751c271f1741","modified":1583462132662},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1583462132662},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"d3a16f0f343ea70b59e33e4b9cdecae3c8df91cd","modified":1583462132552},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1583462132552},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1583462132552},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1583462132552},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1583462132552},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"5ff544013e2905138ffeb07bf9a57062faed75b2","modified":1583462132552},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1583462132552},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1583462132552},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1583462132552},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1583462132552},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"14c33bd544903e74388739599fffe3ecb66ed4b0","modified":1583462132552},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1583462132552},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1583462132552},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1583462132552},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1583462132552},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1583462132552},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2791a8dc20a276704fc8b03f9822f76578a9152d","modified":1583462132552},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1583462132552},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"a2bb0bec243685e670b60a3d54142950adc03af0","modified":1583462132568},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1583462132568},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1583462132568},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1583462132568},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1583462132568},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1583462132568},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1583462132568},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1583462132568},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1583462132568},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1583462132568},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1583462132568},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1583462132568},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1583462132568},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1583462132568},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1583462132568},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1583462132568},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1583462132568},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1583462132568},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1583462132568},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1583462132568},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1583462132584},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1583462132584},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1583462132584},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1583462132584},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1583462132584},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1583462132584},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"afeeed84b395797429d5a852b70e12fd79f7410b","modified":1583462132584},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1583462132584},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1583462132584},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5adab7380491e9df5c9ada4f4feb204b866ec14b","modified":1583462132584},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1583462132584},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1583462132584},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1583462132584},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1583462132584},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1583462132584},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1583462132584},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1583462132584},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1583462132584},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1583462132584},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1583462132584},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1583462132584},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1583462132646},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"38597817ede20418e73ae4afc50047ea5088c73e","modified":1583462132646},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1583462132646},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"9840998e1a1fbcd419c52a1e38fa54a003eac963","modified":1583462132646},{"_id":"themes/next/source/css/_variables/base.styl","hash":"85c46ac85689e7c5f5398fc8b6b40b7a8e94bafb","modified":1583462132646},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1583462132662},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1583462132662},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1583462132662},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1583462132677},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"e2355c213fc25d635f1179fe317b826e0b9dad17","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"bc87cea0b534f2d75db60f300b069456f6516d1b","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1583462132615},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"38f632dce42481da83a5ffab382c281269885e9c","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"62209da61b4ac49e3a7ff8174e28e075060835ec","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3fee8cbe5704a04107ff0816db1221edb40dbb9b","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"4794bd45d5e32ea005c805bcbc65b871e9927d02","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"41e5a7c567735e780ef9bfdacd4af1ff4b5e1d2a","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"a30db9fffd34d522d378aeaeaa400d1a84505b38","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"21003fd0b43dc3b3592e916d585f7f78478cbeb3","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"bb392700f04d956bb5f606efb052453efeade53d","modified":1583462132630},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1583462132646},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1583462132646},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1583462132646},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1583462132646},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1583462132646},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1583462132646},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1583462132646},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1583462132646},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1583462132646},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583462132662},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"c0944ea35dc2bd3b2da9b64f5d05e7e78b6660f1","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1583462132599},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"887aa8de61ae060150a6312d5cb00d4da065db77","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"c7939407797acbd1ae0d8bae8e13b2bf045f870e","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"705759bdd1649e9aa1caedb82f6432a991ae3e71","modified":1583462132615},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"0ec7bafed7eec36504df7781207ccd1ce4448536","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1583462132615},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"796415ae7490e17857e64ffef7e470b65c655a6b","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"8136f9efe1f018ebe4b4a2d8bd3683bb393ff456","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"5ac97054b302fe3ce47822a03a3b56aa3d582005","modified":1583462132630},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1583462132630},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583462132662},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583462132662},{"_id":"public/search.xml","hash":"6ed13e86d87112f87f7b6759d1178734cca3dd49","modified":1583475620143},{"_id":"public/about/index.html","hash":"6b1fcc96908b422789f124364625dcb7e81189e6","modified":1583475620143},{"_id":"public/categories/index.html","hash":"fa6bb168d08030fd883d2c6099c3ba3b021dceaa","modified":1583475620143},{"_id":"public/tags/index.html","hash":"63f0bed66f7818e654b25a2eb40dec344a4161e6","modified":1583475620143},{"_id":"public/tags/gitee/index.html","hash":"678370ab0f1f4e1be840752bd5a3fe122502d3f8","modified":1583475620143},{"_id":"public/tags/hackintosh/index.html","hash":"da87a99420178079e2f2f836245f73f14179ec93","modified":1583475620143},{"_id":"public/tags/regex/index.html","hash":"bc364daba4dce85a2d3cbaf9ad96b10fd174fe5d","modified":1583475620143},{"_id":"public/2020/03/06/gitee折腾记录/index.html","hash":"72fd31d37255251698acc73e3f49c27ae6627f39","modified":1583475620143},{"_id":"public/2020/03/06/概述-over/index.html","hash":"c51f06c56c532123d10ebcff86f3272647706c6d","modified":1583475620143},{"_id":"public/2020/03/06/传输层-over/index.html","hash":"60eae5c3a0b9bf1b5d4377f01edb07081defbf33","modified":1583475620143},{"_id":"public/2020/03/06/数据链路层-over/index.html","hash":"24ad4cfbbb07a9c7c6bd2182097023ddf8009605","modified":1583475620143},{"_id":"public/2020/03/06/网络层-over/index.html","hash":"490e34450f856dd2f861becb273944b5b94cafe5","modified":1583475620143},{"_id":"public/2020/03/06/物理层-over/index.html","hash":"c30bfe47100d4a46fa83aac9ca91460a2739b24b","modified":1583475620143},{"_id":"public/2020/03/06/应用层-over/index.html","hash":"24c67a5766af597dabe44df2a654c18ad02f45a5","modified":1583475620143},{"_id":"public/2020/03/06/01-正则表达式/index.html","hash":"8db8125ca7a7662a9a0d932773c6b3299eb40883","modified":1583475620143},{"_id":"public/2020/03/06/02-多任务-进程/index.html","hash":"e71189a3916b8339814ac56e4a229cfba730172a","modified":1583475620143},{"_id":"public/2020/03/06/02-多任务-线程/index.html","hash":"807bb01902edee1205c6305eebc0a91339f54e41","modified":1583475620143},{"_id":"public/2020/03/06/02-多任务-协程/index.html","hash":"b8e3417406868bc58828756f28c3e4bcd208d38c","modified":1583475620143},{"_id":"public/2020/03/06/03-简单web服务器实现/index.html","hash":"0ec808c75c38afec24ae48329115322f0decf1aa","modified":1583475620143},{"_id":"public/2020/03/06/04-并发web服务器实现/index.html","hash":"288e4bac88bbcb95274caf657d79ee8c6d5d7417","modified":1583475620143},{"_id":"public/2020/03/06/安装黑苹果小记/index.html","hash":"3eac4673bd656111f8874896f808622c15c051fd","modified":1583475620143},{"_id":"public/2020/03/06/使用正则处理字幕文件，python/index.html","hash":"9a01fe6eecdc812f15ef08f3771f970034a3bf53","modified":1583475620143},{"_id":"public/2020/03/06/hello-world/index.html","hash":"a7365390d40160aa9cc40b2d27f9fa587dab9d7c","modified":1583475620143},{"_id":"public/archives/index.html","hash":"af41bc7b2c79af3e32d72d898bae0bac87883bec","modified":1583475620143},{"_id":"public/archives/page/2/index.html","hash":"a50b3a58c56f0e8b7a042c564d62c1b9a2cf5547","modified":1583475620143},{"_id":"public/archives/2020/index.html","hash":"cc91cc95c8e3dda2a415182f9fb41531f190faed","modified":1583475620143},{"_id":"public/archives/2020/page/2/index.html","hash":"ab8321b77fab844c41c3865ce11a529844f57d09","modified":1583475620143},{"_id":"public/archives/2020/03/index.html","hash":"a0e272e1b9935eee6c9b695512cf4f1911cfd8ad","modified":1583475620143},{"_id":"public/archives/2020/03/page/2/index.html","hash":"08fbede16ea62dbdb68d6e23f49ada6c4f514932","modified":1583475620143},{"_id":"public/tags/python/index.html","hash":"3ec9cc402188cee2293f7f672c2f445d8025f353","modified":1583475620143},{"_id":"public/tags/Internet/index.html","hash":"0cdcd2c86a68444b6f5bab09a440639a5ea47158","modified":1583475620143},{"_id":"public/index.html","hash":"e477c316c44dea70a6a7e456724ad74bf59f1068","modified":1583475620143},{"_id":"public/page/2/index.html","hash":"1dd4677a66e1b3448bf2583ec7c07f6eaeb44b97","modified":1583475620143},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1583475620143},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1583475620143},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1583475620143},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1583475620143},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1583475620143},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1583475620143},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1583475620143},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1583475620143},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1583475620143},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1583475620143},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1583475620143},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1583475620143},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1583475620143},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1583475620143},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1583475620143},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1583475620143},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1583475620143},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583475620143},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583475620143},{"_id":"public/js/algolia-search.js","hash":"77cd98b1c790df12dd6cd8119bb3d99f72866635","modified":1583475620143},{"_id":"public/js/local-search.js","hash":"bd42a1e05d37352270d2653ebb5adcb5585afc73","modified":1583475620143},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1583475620143},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1583475620143},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1583475620143},{"_id":"public/js/utils.js","hash":"a155950bc52396a701d0fe9988b3751c271f1741","modified":1583475620143},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1583475620143},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1583475620143},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1583475620143},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1583475620143},{"_id":"public/css/main.css","hash":"ff00bd0c6b0e7b374435bd82710678556d1172d0","modified":1583475620143},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1583475620143},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1583475620143},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1583475620143},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1583475620143},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583475620143}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2020-03-06T05:51:19.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-03-06 13:51:19\n---\n","updated":"2020-03-06T06:07:03.759Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck7fsi0wl0001k8599s6be1zm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-03-06T05:52:07.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-03-06 13:52:07\n---\n","updated":"2020-03-06T06:07:03.761Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck7fsi0wp0003k8593mcsffxn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-03-06T05:51:51.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-03-06 13:51:51\n---\n","updated":"2020-03-06T06:07:03.763Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7fsi0wv0006k859179nawt5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"python协程","date":"2020-03-06T06:15:25.339Z","comments":1,"_content":"\n#### 协程\n> 生成器 迭代器 装饰器 Python三大器\n\n> 迭代器 -> 生成器 -> yield -> greenlet -> gevent\n\n#### 迭代器\n\n迭代时访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。\n\n1. 可迭代对象\n\n对list、tuple、str、dict、集合等类型的数据使用for...in...的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫**迭代**。\n\n但是，是否所有的数据类型都可以放到for...in...的语句中，然后让for...in...每次从中取出一条数据供我们使用，即供我们迭代吗？\n\n```\nfrom collections import Iterable\n\nisinstance([11, 22, 33], Iterable)\n-> True\n\nisinstance((11, 22, 33), Iterable)\n-> True\n\nisinstance(100, Iterable)\n-> False\n```\n##### 类的迭代、迭代器的实现\n```\nfrom collections import Iterable\nfrom collections import Iterator\n\nclass Classmate(object):\n    def __init__(self):\n        self.names = list()\n        self.current_num = 0\n        \n    def add(self, name):\n        self.names.append(name)\n    \n    def __iter__(self):\n        '''如果想要一个对象成为一个可以迭代的对象，即可以使用for，那么必须实现__iter__方法'''\n        return self\n    \n    def __next__(self):\n         '''返回调用值'''\n        if self.current_num < len(self.names):\n            ret = self.names[self.current_num]\n            self.current_num += 1\n            return ret\n        else:\n            raise StopIteration\n\n\nclassmate = Classmate()\n\nclassmate.add(\"张三\")\nclassmate.add(\"李四\")\nclassmate.add(\"王五\")\n\n# print(\"判断classmate是否是可以迭代的对象：\",isinstance(classmate, Iterable))\n# classmate_iterator = iter(classmate)\n# print(\"判断classmate_iterator是否是迭代器：\",isinstance(classmate_iterator, Iterator)\n\nfor name in classmate:\n    print(name)\n```\n##### Fibonacci的迭代器实现\n```\nclass Fibonacci(object):\n    def __init__(self, all_num):\n        self.all_num = all_num\n        self.current_num = 0\n        self.a = 0\n        self.b = 1\n    \n    def __iter__(self):\n        return self\n        \n    def __next__(self):\n        if self.current_num < self.all_num:\n            ret = self.a\n            \n            self.a, self.b = self.b, self.a+self.b\n            self.current_num += 1\n            \n            return ret\n        else:\n            raise StopIteration\n\nfibo = Fibonacci(10)\n\nfor num in fibo:\n    print(num)\n```\n\n##### 并不是只有for循环能接受可迭代对象\n\n除了for循环能接受可迭代对象，list、tuple等也能接受\n\n__iter__()  ->  __next__() -> return \n\n\n#### 生成器\n\n生成器是一个特殊的迭代器\n\n##### 应用1\n```\nnums = [x*2 for x in range(10)]\n-> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nnums = (x*2 for x in range(10))\n-> <generator object <genexpr> at 0x7f7ec7071938>\n```\n\n列表推导式生成一个列表\n生成器生成一个对象，不占用内存空间,可通过for循环调用\n\n##### 应用2\n```\ndef create_num(all_num):\n    a, b = 0, 1\n    current_num = 0\n    while current_num < all_num：\n        yield a     #如果一个函数中有yield语句，那么这个就不再是函数，而是一个生成器模板\n        a, b = b, a+b\n        current_num += 1\n# 如果在调用create_num的时候，发现这个函数中由yield，那么此时不是调用函数，而是创建一个生成器对象。\nobj = create_num(10)\n\nfor num in obj:\n    print(num)\n```\n\n##### yield生成器获取return值\n```\ndef create_num(all_num):\n    a, b = 0, 1\n    current_num = 0\n    while current_num < all_num:\n        yield a\n        a, b = b, a+b\n        current_num += 1\n    return \"ok....\"\n    \nobj = create_num(20)\n\nwhile True:\n    try:\n        ret = next(obj)\n        print(ret)\n    except Exception as ret:\n        print(ret.value)\n        break\n```\n\n##### send()传递参数\n```\ndef create_num(all_num):\n    a, b = 0, 1\n    current_num = 0\n    while current_num < all_num:\n        ret = yield a   # 右侧语句执行暂停，传参给next()\n        # send()将参数传过来，程序从暂停处开始执行，将传过来的参数赋给ret\n        print(\"ret:\", ret)\n        a, b = b, a+b\n        current_num += 1\n    \nobj = create_num(20)\n\nret = next(obj) \nprint(ret)\n\n\nret = obj.send(\"hahaahha\")  #等同于next()，不同的是可以传参\n# send()一般不会放到第一次启动生成器，如果非要这么做，那么传递None\n# 再次运行到yield a，将a的值赋给ret\nprint(ret)\n\n```\n\n### 使用yield完成多任务\n\n```\nimport time\n\ndef task_1():\n    while True:\n        print(\"---1---\")\n        time.sleep(0.1)\n        yield\n        \ndef task_2():\n    while True:\n        print(\"---2---\")\n        time.sleep(0.1)\n        yield\n\ndef main():\n    t1 = task_1()\n    t2 = task_2()\n    # 先让t1运行一会，当t1中遇到yield的时候，返回此处\n    # 执行t2，当它遇到yield的时候，再次切换到t1中\n    # 这样t1/t2/t1/t2的交替运行，最终实现了多任务...协程\n    while True:\n        next(t1)\n        next(t2)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### 使用greenlet、gevent完成多任务\n\n核心使用yield实现\n\n$ pip3 install greenlet     # 安装greenlet\n\n```\nfrom greenlet import greenlet\nimport time\n\ndef test1():\n    while True:\n        print(\"---A---\")\n        gr2.switch()\n        time.sleep(0.5)\n        \ndef test2():\n    while True:\n        print(\"---B---\")\n        gr1.switch()\n        time.sleep(0.5)\n\ngr1 = greenlet(test1)\ngr2 = greenlet(test2)\n\n# 切换到gr1中运行\ngr1.switch()\n```\n\n$ pip3 install gevent\n\n- 依赖关系\n协程 <- 线程<- 进程  \n遇到耗时操作进行切换\n\n```\nimport gevent\n\ndef f1(n):\n    for i in range(n):\n        print(gevent.getcurrent(), i)\n        gevent.sleep(0.5)\n\ndef f2(n):\n    for i in range(n):\n        print(gevent.getcurrent(), i)\n        gevent.sleep(0.5)\n\ndef f3(n):\n    for i in range(n):\n        print(gevent.getcurrent(), i)\n        gevent.sleep(0.5)\n\ng1 = gevent.spawn(f1, 5)     #  生成yield对象 f:指定函数 5:指定传参 \ng2 = gevent.spawn(f2, 5)\ng3 = gevent.spawn(f3, 5)\ng1.join()   # 运行期间会耗时，自行切换到下一个对象\ng2.join()\ng3.join()\n```\n\n#### sleep补丁\n\n- 协程使用代码示例\n```\nfrom gevent import monkey\nimport gevent\nimport random\nimport time\n\n# 有耗时操作时需要\nmonkey.patch_all()      # 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块\n\ndef coroutine_work(coroutine_name):\n    for i in range(10):\n        print(coroutine_name, i)\n        time.sleep(random.random()\n\n# 将多个join连接起来用一个元组实现\n# 等待元组中所有协程都完成后结束当前进程\ngevent.joinall([\n            gevent.spawn(coroutine_work, \"work1\"),\n            gevent.spawn(coroutine_work, \"work2\")\n])\n```\n\n#### 案例-并发下载器\n\n```\nfrom gevent import monkey\nimport gevent\nimport urllib.request\n\nmonkey.patch_all()\n\ndef downloader(img_name, img_url):\n    req = urllib.request.urlopen(img_orl)\n    \n    img_content = req.read()\n    \n    with open(img_name, \"wb\") as f:\n        f.write(img_content)\n        \ndef main():\n    gevent.joinall([\n                gevent.spawn(downlaoder, \"1.jpg\", \"http://url\"),\n                gevent.spawn(downlaoder, \"1.jpg\", \"http://url\")\n    ])\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### 进程、线程、协程对比\n\n- 有一个老板想要开个工厂进行生产某件商品\n- 他需要画一些财力物力制作一条生产线，这个生产线上有很多的器件以及材料这些所有的为了能够生产商品而准备的资源称之为：**进程**\n- 只有生产线程时不能够进行生产的，所以老板需要找个工人来进行生产，这个工人能够利用这些材料最终一步步的将商品制作出来，这个来做事情的工人称之为：**线程**\n- 这个老板为了提高生产率，想到3种方法：\n    1. 在这条生产线上多找些工人，一起来做商品，这样效率是成倍增长，即**单进程 多线程**方式\n    2. 老板发现这条生产线上的工人不是越多越好，因为一条生产线的资源以及材料毕竟有限，所以老板又花了写财力物力购置了一条生产线，然后再招些工人，这样效率又再一步提高了，即**多进程 多线程**方式\n    3. 老板发现，现在已经有了很多条生产线，并且每条生产线上已经有很多工人了（即程序是多进程的，每个进程中又有多个线程），为了再次提高效率，老板想了个损招，规定：如果某个员工在上班时，临时没事或者再等待某些条件（比如等待另一个工人生产完某道工序之后，他才能再次工作），那么这个员工就利用这个时间去做其他的事情，那么也就是说：如果一个线程等待某些条件，可以充分利用这个时间去做其他事情，其实这就是：**协程**方式\n\n##### 简单总结\n1. 进程是资源分配的单位\n2. 线程是操作系统调度的单位\n3. 进程切换需要的资源最大，效率很低\n4. 线程切换需要的资源一般，效率一般（不考虑GIL的情况下）\n5. 协程切换任务资源很小，效率高\n6. 多进程、多线程根据CPU核数不一样可能是并行的，但是协程是在一个线程中，所以是并发。","source":"_posts/02-多任务-协程.md","raw":"---\ntitle: python协程\ndate: {{ date }}\ntags: python\ncategories:\ncomments: true\n---\n\n#### 协程\n> 生成器 迭代器 装饰器 Python三大器\n\n> 迭代器 -> 生成器 -> yield -> greenlet -> gevent\n\n#### 迭代器\n\n迭代时访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。\n\n1. 可迭代对象\n\n对list、tuple、str、dict、集合等类型的数据使用for...in...的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫**迭代**。\n\n但是，是否所有的数据类型都可以放到for...in...的语句中，然后让for...in...每次从中取出一条数据供我们使用，即供我们迭代吗？\n\n```\nfrom collections import Iterable\n\nisinstance([11, 22, 33], Iterable)\n-> True\n\nisinstance((11, 22, 33), Iterable)\n-> True\n\nisinstance(100, Iterable)\n-> False\n```\n##### 类的迭代、迭代器的实现\n```\nfrom collections import Iterable\nfrom collections import Iterator\n\nclass Classmate(object):\n    def __init__(self):\n        self.names = list()\n        self.current_num = 0\n        \n    def add(self, name):\n        self.names.append(name)\n    \n    def __iter__(self):\n        '''如果想要一个对象成为一个可以迭代的对象，即可以使用for，那么必须实现__iter__方法'''\n        return self\n    \n    def __next__(self):\n         '''返回调用值'''\n        if self.current_num < len(self.names):\n            ret = self.names[self.current_num]\n            self.current_num += 1\n            return ret\n        else:\n            raise StopIteration\n\n\nclassmate = Classmate()\n\nclassmate.add(\"张三\")\nclassmate.add(\"李四\")\nclassmate.add(\"王五\")\n\n# print(\"判断classmate是否是可以迭代的对象：\",isinstance(classmate, Iterable))\n# classmate_iterator = iter(classmate)\n# print(\"判断classmate_iterator是否是迭代器：\",isinstance(classmate_iterator, Iterator)\n\nfor name in classmate:\n    print(name)\n```\n##### Fibonacci的迭代器实现\n```\nclass Fibonacci(object):\n    def __init__(self, all_num):\n        self.all_num = all_num\n        self.current_num = 0\n        self.a = 0\n        self.b = 1\n    \n    def __iter__(self):\n        return self\n        \n    def __next__(self):\n        if self.current_num < self.all_num:\n            ret = self.a\n            \n            self.a, self.b = self.b, self.a+self.b\n            self.current_num += 1\n            \n            return ret\n        else:\n            raise StopIteration\n\nfibo = Fibonacci(10)\n\nfor num in fibo:\n    print(num)\n```\n\n##### 并不是只有for循环能接受可迭代对象\n\n除了for循环能接受可迭代对象，list、tuple等也能接受\n\n__iter__()  ->  __next__() -> return \n\n\n#### 生成器\n\n生成器是一个特殊的迭代器\n\n##### 应用1\n```\nnums = [x*2 for x in range(10)]\n-> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nnums = (x*2 for x in range(10))\n-> <generator object <genexpr> at 0x7f7ec7071938>\n```\n\n列表推导式生成一个列表\n生成器生成一个对象，不占用内存空间,可通过for循环调用\n\n##### 应用2\n```\ndef create_num(all_num):\n    a, b = 0, 1\n    current_num = 0\n    while current_num < all_num：\n        yield a     #如果一个函数中有yield语句，那么这个就不再是函数，而是一个生成器模板\n        a, b = b, a+b\n        current_num += 1\n# 如果在调用create_num的时候，发现这个函数中由yield，那么此时不是调用函数，而是创建一个生成器对象。\nobj = create_num(10)\n\nfor num in obj:\n    print(num)\n```\n\n##### yield生成器获取return值\n```\ndef create_num(all_num):\n    a, b = 0, 1\n    current_num = 0\n    while current_num < all_num:\n        yield a\n        a, b = b, a+b\n        current_num += 1\n    return \"ok....\"\n    \nobj = create_num(20)\n\nwhile True:\n    try:\n        ret = next(obj)\n        print(ret)\n    except Exception as ret:\n        print(ret.value)\n        break\n```\n\n##### send()传递参数\n```\ndef create_num(all_num):\n    a, b = 0, 1\n    current_num = 0\n    while current_num < all_num:\n        ret = yield a   # 右侧语句执行暂停，传参给next()\n        # send()将参数传过来，程序从暂停处开始执行，将传过来的参数赋给ret\n        print(\"ret:\", ret)\n        a, b = b, a+b\n        current_num += 1\n    \nobj = create_num(20)\n\nret = next(obj) \nprint(ret)\n\n\nret = obj.send(\"hahaahha\")  #等同于next()，不同的是可以传参\n# send()一般不会放到第一次启动生成器，如果非要这么做，那么传递None\n# 再次运行到yield a，将a的值赋给ret\nprint(ret)\n\n```\n\n### 使用yield完成多任务\n\n```\nimport time\n\ndef task_1():\n    while True:\n        print(\"---1---\")\n        time.sleep(0.1)\n        yield\n        \ndef task_2():\n    while True:\n        print(\"---2---\")\n        time.sleep(0.1)\n        yield\n\ndef main():\n    t1 = task_1()\n    t2 = task_2()\n    # 先让t1运行一会，当t1中遇到yield的时候，返回此处\n    # 执行t2，当它遇到yield的时候，再次切换到t1中\n    # 这样t1/t2/t1/t2的交替运行，最终实现了多任务...协程\n    while True:\n        next(t1)\n        next(t2)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### 使用greenlet、gevent完成多任务\n\n核心使用yield实现\n\n$ pip3 install greenlet     # 安装greenlet\n\n```\nfrom greenlet import greenlet\nimport time\n\ndef test1():\n    while True:\n        print(\"---A---\")\n        gr2.switch()\n        time.sleep(0.5)\n        \ndef test2():\n    while True:\n        print(\"---B---\")\n        gr1.switch()\n        time.sleep(0.5)\n\ngr1 = greenlet(test1)\ngr2 = greenlet(test2)\n\n# 切换到gr1中运行\ngr1.switch()\n```\n\n$ pip3 install gevent\n\n- 依赖关系\n协程 <- 线程<- 进程  \n遇到耗时操作进行切换\n\n```\nimport gevent\n\ndef f1(n):\n    for i in range(n):\n        print(gevent.getcurrent(), i)\n        gevent.sleep(0.5)\n\ndef f2(n):\n    for i in range(n):\n        print(gevent.getcurrent(), i)\n        gevent.sleep(0.5)\n\ndef f3(n):\n    for i in range(n):\n        print(gevent.getcurrent(), i)\n        gevent.sleep(0.5)\n\ng1 = gevent.spawn(f1, 5)     #  生成yield对象 f:指定函数 5:指定传参 \ng2 = gevent.spawn(f2, 5)\ng3 = gevent.spawn(f3, 5)\ng1.join()   # 运行期间会耗时，自行切换到下一个对象\ng2.join()\ng3.join()\n```\n\n#### sleep补丁\n\n- 协程使用代码示例\n```\nfrom gevent import monkey\nimport gevent\nimport random\nimport time\n\n# 有耗时操作时需要\nmonkey.patch_all()      # 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块\n\ndef coroutine_work(coroutine_name):\n    for i in range(10):\n        print(coroutine_name, i)\n        time.sleep(random.random()\n\n# 将多个join连接起来用一个元组实现\n# 等待元组中所有协程都完成后结束当前进程\ngevent.joinall([\n            gevent.spawn(coroutine_work, \"work1\"),\n            gevent.spawn(coroutine_work, \"work2\")\n])\n```\n\n#### 案例-并发下载器\n\n```\nfrom gevent import monkey\nimport gevent\nimport urllib.request\n\nmonkey.patch_all()\n\ndef downloader(img_name, img_url):\n    req = urllib.request.urlopen(img_orl)\n    \n    img_content = req.read()\n    \n    with open(img_name, \"wb\") as f:\n        f.write(img_content)\n        \ndef main():\n    gevent.joinall([\n                gevent.spawn(downlaoder, \"1.jpg\", \"http://url\"),\n                gevent.spawn(downlaoder, \"1.jpg\", \"http://url\")\n    ])\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### 进程、线程、协程对比\n\n- 有一个老板想要开个工厂进行生产某件商品\n- 他需要画一些财力物力制作一条生产线，这个生产线上有很多的器件以及材料这些所有的为了能够生产商品而准备的资源称之为：**进程**\n- 只有生产线程时不能够进行生产的，所以老板需要找个工人来进行生产，这个工人能够利用这些材料最终一步步的将商品制作出来，这个来做事情的工人称之为：**线程**\n- 这个老板为了提高生产率，想到3种方法：\n    1. 在这条生产线上多找些工人，一起来做商品，这样效率是成倍增长，即**单进程 多线程**方式\n    2. 老板发现这条生产线上的工人不是越多越好，因为一条生产线的资源以及材料毕竟有限，所以老板又花了写财力物力购置了一条生产线，然后再招些工人，这样效率又再一步提高了，即**多进程 多线程**方式\n    3. 老板发现，现在已经有了很多条生产线，并且每条生产线上已经有很多工人了（即程序是多进程的，每个进程中又有多个线程），为了再次提高效率，老板想了个损招，规定：如果某个员工在上班时，临时没事或者再等待某些条件（比如等待另一个工人生产完某道工序之后，他才能再次工作），那么这个员工就利用这个时间去做其他的事情，那么也就是说：如果一个线程等待某些条件，可以充分利用这个时间去做其他事情，其实这就是：**协程**方式\n\n##### 简单总结\n1. 进程是资源分配的单位\n2. 线程是操作系统调度的单位\n3. 进程切换需要的资源最大，效率很低\n4. 线程切换需要的资源一般，效率一般（不考虑GIL的情况下）\n5. 协程切换任务资源很小，效率高\n6. 多进程、多线程根据CPU核数不一样可能是并行的，但是协程是在一个线程中，所以是并发。","slug":"02-多任务-协程","published":1,"updated":"2020-03-06T06:15:25.339Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0we0000k859fozm2khs","content":"<h4 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h4><blockquote>\n<p>生成器 迭代器 装饰器 Python三大器</p>\n</blockquote>\n<blockquote>\n<p>迭代器 -&gt; 生成器 -&gt; yield -&gt; greenlet -&gt; gevent</p>\n</blockquote>\n<h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>迭代时访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>\n<ol>\n<li>可迭代对象</li>\n</ol>\n<p>对list、tuple、str、dict、集合等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫<strong>迭代</strong>。</p>\n<p>但是，是否所有的数据类型都可以放到for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import Iterable</span><br><span class=\"line\"></span><br><span class=\"line\">isinstance([11, 22, 33], Iterable)</span><br><span class=\"line\">-&gt; True</span><br><span class=\"line\"></span><br><span class=\"line\">isinstance((11, 22, 33), Iterable)</span><br><span class=\"line\">-&gt; True</span><br><span class=\"line\"></span><br><span class=\"line\">isinstance(100, Iterable)</span><br><span class=\"line\">-&gt; False</span><br></pre></td></tr></table></figure>\n<h5 id=\"类的迭代、迭代器的实现\"><a href=\"#类的迭代、迭代器的实现\" class=\"headerlink\" title=\"类的迭代、迭代器的实现\"></a>类的迭代、迭代器的实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import Iterable</span><br><span class=\"line\">from collections import Iterator</span><br><span class=\"line\"></span><br><span class=\"line\">class Classmate(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.names &#x3D; list()</span><br><span class=\"line\">        self.current_num &#x3D; 0</span><br><span class=\"line\">        </span><br><span class=\"line\">    def add(self, name):</span><br><span class=\"line\">        self.names.append(name)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        &#39;&#39;&#39;如果想要一个对象成为一个可以迭代的对象，即可以使用for，那么必须实现__iter__方法&#39;&#39;&#39;</span><br><span class=\"line\">        return self</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">         &#39;&#39;&#39;返回调用值&#39;&#39;&#39;</span><br><span class=\"line\">        if self.current_num &lt; len(self.names):</span><br><span class=\"line\">            ret &#x3D; self.names[self.current_num]</span><br><span class=\"line\">            self.current_num +&#x3D; 1</span><br><span class=\"line\">            return ret</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            raise StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">classmate &#x3D; Classmate()</span><br><span class=\"line\"></span><br><span class=\"line\">classmate.add(&quot;张三&quot;)</span><br><span class=\"line\">classmate.add(&quot;李四&quot;)</span><br><span class=\"line\">classmate.add(&quot;王五&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># print(&quot;判断classmate是否是可以迭代的对象：&quot;,isinstance(classmate, Iterable))</span><br><span class=\"line\"># classmate_iterator &#x3D; iter(classmate)</span><br><span class=\"line\"># print(&quot;判断classmate_iterator是否是迭代器：&quot;,isinstance(classmate_iterator, Iterator)</span><br><span class=\"line\"></span><br><span class=\"line\">for name in classmate:</span><br><span class=\"line\">    print(name)</span><br></pre></td></tr></table></figure>\n<h5 id=\"Fibonacci的迭代器实现\"><a href=\"#Fibonacci的迭代器实现\" class=\"headerlink\" title=\"Fibonacci的迭代器实现\"></a>Fibonacci的迭代器实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Fibonacci(object):</span><br><span class=\"line\">    def __init__(self, all_num):</span><br><span class=\"line\">        self.all_num &#x3D; all_num</span><br><span class=\"line\">        self.current_num &#x3D; 0</span><br><span class=\"line\">        self.a &#x3D; 0</span><br><span class=\"line\">        self.b &#x3D; 1</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        return self</span><br><span class=\"line\">        </span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">        if self.current_num &lt; self.all_num:</span><br><span class=\"line\">            ret &#x3D; self.a</span><br><span class=\"line\">            </span><br><span class=\"line\">            self.a, self.b &#x3D; self.b, self.a+self.b</span><br><span class=\"line\">            self.current_num +&#x3D; 1</span><br><span class=\"line\">            </span><br><span class=\"line\">            return ret</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            raise StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">fibo &#x3D; Fibonacci(10)</span><br><span class=\"line\"></span><br><span class=\"line\">for num in fibo:</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"并不是只有for循环能接受可迭代对象\"><a href=\"#并不是只有for循环能接受可迭代对象\" class=\"headerlink\" title=\"并不是只有for循环能接受可迭代对象\"></a>并不是只有for循环能接受可迭代对象</h5><p>除了for循环能接受可迭代对象，list、tuple等也能接受</p>\n<p><strong>iter</strong>()  -&gt;  <strong>next</strong>() -&gt; return </p>\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><p>生成器是一个特殊的迭代器</p>\n<h5 id=\"应用1\"><a href=\"#应用1\" class=\"headerlink\" title=\"应用1\"></a>应用1</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums &#x3D; [x*2 for x in range(10)]</span><br><span class=\"line\">-&gt; [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span><br><span class=\"line\"></span><br><span class=\"line\">nums &#x3D; (x*2 for x in range(10))</span><br><span class=\"line\">-&gt; &lt;generator object &lt;genexpr&gt; at 0x7f7ec7071938&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列表推导式生成一个列表<br>生成器生成一个对象，不占用内存空间,可通过for循环调用</p>\n<h5 id=\"应用2\"><a href=\"#应用2\" class=\"headerlink\" title=\"应用2\"></a>应用2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def create_num(all_num):</span><br><span class=\"line\">    a, b &#x3D; 0, 1</span><br><span class=\"line\">    current_num &#x3D; 0</span><br><span class=\"line\">    while current_num &lt; all_num：</span><br><span class=\"line\">        yield a     #如果一个函数中有yield语句，那么这个就不再是函数，而是一个生成器模板</span><br><span class=\"line\">        a, b &#x3D; b, a+b</span><br><span class=\"line\">        current_num +&#x3D; 1</span><br><span class=\"line\"># 如果在调用create_num的时候，发现这个函数中由yield，那么此时不是调用函数，而是创建一个生成器对象。</span><br><span class=\"line\">obj &#x3D; create_num(10)</span><br><span class=\"line\"></span><br><span class=\"line\">for num in obj:</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"yield生成器获取return值\"><a href=\"#yield生成器获取return值\" class=\"headerlink\" title=\"yield生成器获取return值\"></a>yield生成器获取return值</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def create_num(all_num):</span><br><span class=\"line\">    a, b &#x3D; 0, 1</span><br><span class=\"line\">    current_num &#x3D; 0</span><br><span class=\"line\">    while current_num &lt; all_num:</span><br><span class=\"line\">        yield a</span><br><span class=\"line\">        a, b &#x3D; b, a+b</span><br><span class=\"line\">        current_num +&#x3D; 1</span><br><span class=\"line\">    return &quot;ok....&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">obj &#x3D; create_num(20)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        ret &#x3D; next(obj)</span><br><span class=\"line\">        print(ret)</span><br><span class=\"line\">    except Exception as ret:</span><br><span class=\"line\">        print(ret.value)</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"send-传递参数\"><a href=\"#send-传递参数\" class=\"headerlink\" title=\"send()传递参数\"></a>send()传递参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def create_num(all_num):</span><br><span class=\"line\">    a, b &#x3D; 0, 1</span><br><span class=\"line\">    current_num &#x3D; 0</span><br><span class=\"line\">    while current_num &lt; all_num:</span><br><span class=\"line\">        ret &#x3D; yield a   # 右侧语句执行暂停，传参给next()</span><br><span class=\"line\">        # send()将参数传过来，程序从暂停处开始执行，将传过来的参数赋给ret</span><br><span class=\"line\">        print(&quot;ret:&quot;, ret)</span><br><span class=\"line\">        a, b &#x3D; b, a+b</span><br><span class=\"line\">        current_num +&#x3D; 1</span><br><span class=\"line\">    </span><br><span class=\"line\">obj &#x3D; create_num(20)</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; next(obj) </span><br><span class=\"line\">print(ret)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; obj.send(&quot;hahaahha&quot;)  #等同于next()，不同的是可以传参</span><br><span class=\"line\"># send()一般不会放到第一次启动生成器，如果非要这么做，那么传递None</span><br><span class=\"line\"># 再次运行到yield a，将a的值赋给ret</span><br><span class=\"line\">print(ret)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用yield完成多任务\"><a href=\"#使用yield完成多任务\" class=\"headerlink\" title=\"使用yield完成多任务\"></a>使用yield完成多任务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def task_1():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;---1---&quot;)</span><br><span class=\"line\">        time.sleep(0.1)</span><br><span class=\"line\">        yield</span><br><span class=\"line\">        </span><br><span class=\"line\">def task_2():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;---2---&quot;)</span><br><span class=\"line\">        time.sleep(0.1)</span><br><span class=\"line\">        yield</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    t1 &#x3D; task_1()</span><br><span class=\"line\">    t2 &#x3D; task_2()</span><br><span class=\"line\">    # 先让t1运行一会，当t1中遇到yield的时候，返回此处</span><br><span class=\"line\">    # 执行t2，当它遇到yield的时候，再次切换到t1中</span><br><span class=\"line\">    # 这样t1&#x2F;t2&#x2F;t1&#x2F;t2的交替运行，最终实现了多任务...协程</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        next(t1)</span><br><span class=\"line\">        next(t2)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用greenlet、gevent完成多任务\"><a href=\"#使用greenlet、gevent完成多任务\" class=\"headerlink\" title=\"使用greenlet、gevent完成多任务\"></a>使用greenlet、gevent完成多任务</h4><p>核心使用yield实现</p>\n<p>$ pip3 install greenlet     # 安装greenlet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from greenlet import greenlet</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def test1():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;---A---&quot;)</span><br><span class=\"line\">        gr2.switch()</span><br><span class=\"line\">        time.sleep(0.5)</span><br><span class=\"line\">        </span><br><span class=\"line\">def test2():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;---B---&quot;)</span><br><span class=\"line\">        gr1.switch()</span><br><span class=\"line\">        time.sleep(0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">gr1 &#x3D; greenlet(test1)</span><br><span class=\"line\">gr2 &#x3D; greenlet(test2)</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到gr1中运行</span><br><span class=\"line\">gr1.switch()</span><br></pre></td></tr></table></figure>\n\n<p>$ pip3 install gevent</p>\n<ul>\n<li>依赖关系<br>协程 &lt;- 线程&lt;- 进程<br>遇到耗时操作进行切换</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import gevent</span><br><span class=\"line\"></span><br><span class=\"line\">def f1(n):</span><br><span class=\"line\">    for i in range(n):</span><br><span class=\"line\">        print(gevent.getcurrent(), i)</span><br><span class=\"line\">        gevent.sleep(0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">def f2(n):</span><br><span class=\"line\">    for i in range(n):</span><br><span class=\"line\">        print(gevent.getcurrent(), i)</span><br><span class=\"line\">        gevent.sleep(0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">def f3(n):</span><br><span class=\"line\">    for i in range(n):</span><br><span class=\"line\">        print(gevent.getcurrent(), i)</span><br><span class=\"line\">        gevent.sleep(0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">g1 &#x3D; gevent.spawn(f1, 5)     #  生成yield对象 f:指定函数 5:指定传参 </span><br><span class=\"line\">g2 &#x3D; gevent.spawn(f2, 5)</span><br><span class=\"line\">g3 &#x3D; gevent.spawn(f3, 5)</span><br><span class=\"line\">g1.join()   # 运行期间会耗时，自行切换到下一个对象</span><br><span class=\"line\">g2.join()</span><br><span class=\"line\">g3.join()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sleep补丁\"><a href=\"#sleep补丁\" class=\"headerlink\" title=\"sleep补丁\"></a>sleep补丁</h4><ul>\n<li>协程使用代码示例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from gevent import monkey</span><br><span class=\"line\">import gevent</span><br><span class=\"line\">import random</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"># 有耗时操作时需要</span><br><span class=\"line\">monkey.patch_all()      # 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块</span><br><span class=\"line\"></span><br><span class=\"line\">def coroutine_work(coroutine_name):</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        print(coroutine_name, i)</span><br><span class=\"line\">        time.sleep(random.random()</span><br><span class=\"line\"></span><br><span class=\"line\"># 将多个join连接起来用一个元组实现</span><br><span class=\"line\"># 等待元组中所有协程都完成后结束当前进程</span><br><span class=\"line\">gevent.joinall([</span><br><span class=\"line\">            gevent.spawn(coroutine_work, &quot;work1&quot;),</span><br><span class=\"line\">            gevent.spawn(coroutine_work, &quot;work2&quot;)</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"案例-并发下载器\"><a href=\"#案例-并发下载器\" class=\"headerlink\" title=\"案例-并发下载器\"></a>案例-并发下载器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from gevent import monkey</span><br><span class=\"line\">import gevent</span><br><span class=\"line\">import urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\">monkey.patch_all()</span><br><span class=\"line\"></span><br><span class=\"line\">def downloader(img_name, img_url):</span><br><span class=\"line\">    req &#x3D; urllib.request.urlopen(img_orl)</span><br><span class=\"line\">    </span><br><span class=\"line\">    img_content &#x3D; req.read()</span><br><span class=\"line\">    </span><br><span class=\"line\">    with open(img_name, &quot;wb&quot;) as f:</span><br><span class=\"line\">        f.write(img_content)</span><br><span class=\"line\">        </span><br><span class=\"line\">def main():</span><br><span class=\"line\">    gevent.joinall([</span><br><span class=\"line\">                gevent.spawn(downlaoder, &quot;1.jpg&quot;, &quot;http:&#x2F;&#x2F;url&quot;),</span><br><span class=\"line\">                gevent.spawn(downlaoder, &quot;1.jpg&quot;, &quot;http:&#x2F;&#x2F;url&quot;)</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进程、线程、协程对比\"><a href=\"#进程、线程、协程对比\" class=\"headerlink\" title=\"进程、线程、协程对比\"></a>进程、线程、协程对比</h4><ul>\n<li>有一个老板想要开个工厂进行生产某件商品</li>\n<li>他需要画一些财力物力制作一条生产线，这个生产线上有很多的器件以及材料这些所有的为了能够生产商品而准备的资源称之为：<strong>进程</strong></li>\n<li>只有生产线程时不能够进行生产的，所以老板需要找个工人来进行生产，这个工人能够利用这些材料最终一步步的将商品制作出来，这个来做事情的工人称之为：<strong>线程</strong></li>\n<li>这个老板为了提高生产率，想到3种方法：<ol>\n<li>在这条生产线上多找些工人，一起来做商品，这样效率是成倍增长，即<strong>单进程 多线程</strong>方式</li>\n<li>老板发现这条生产线上的工人不是越多越好，因为一条生产线的资源以及材料毕竟有限，所以老板又花了写财力物力购置了一条生产线，然后再招些工人，这样效率又再一步提高了，即<strong>多进程 多线程</strong>方式</li>\n<li>老板发现，现在已经有了很多条生产线，并且每条生产线上已经有很多工人了（即程序是多进程的，每个进程中又有多个线程），为了再次提高效率，老板想了个损招，规定：如果某个员工在上班时，临时没事或者再等待某些条件（比如等待另一个工人生产完某道工序之后，他才能再次工作），那么这个员工就利用这个时间去做其他的事情，那么也就是说：如果一个线程等待某些条件，可以充分利用这个时间去做其他事情，其实这就是：<strong>协程</strong>方式</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h5><ol>\n<li>进程是资源分配的单位</li>\n<li>线程是操作系统调度的单位</li>\n<li>进程切换需要的资源最大，效率很低</li>\n<li>线程切换需要的资源一般，效率一般（不考虑GIL的情况下）</li>\n<li>协程切换任务资源很小，效率高</li>\n<li>多进程、多线程根据CPU核数不一样可能是并行的，但是协程是在一个线程中，所以是并发。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h4><blockquote>\n<p>生成器 迭代器 装饰器 Python三大器</p>\n</blockquote>\n<blockquote>\n<p>迭代器 -&gt; 生成器 -&gt; yield -&gt; greenlet -&gt; gevent</p>\n</blockquote>\n<h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>迭代时访问集合元素的一种方式，迭代器是一个可以记住遍历的位置的对象，迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p>\n<ol>\n<li>可迭代对象</li>\n</ol>\n<p>对list、tuple、str、dict、集合等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫<strong>迭代</strong>。</p>\n<p>但是，是否所有的数据类型都可以放到for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import Iterable</span><br><span class=\"line\"></span><br><span class=\"line\">isinstance([11, 22, 33], Iterable)</span><br><span class=\"line\">-&gt; True</span><br><span class=\"line\"></span><br><span class=\"line\">isinstance((11, 22, 33), Iterable)</span><br><span class=\"line\">-&gt; True</span><br><span class=\"line\"></span><br><span class=\"line\">isinstance(100, Iterable)</span><br><span class=\"line\">-&gt; False</span><br></pre></td></tr></table></figure>\n<h5 id=\"类的迭代、迭代器的实现\"><a href=\"#类的迭代、迭代器的实现\" class=\"headerlink\" title=\"类的迭代、迭代器的实现\"></a>类的迭代、迭代器的实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import Iterable</span><br><span class=\"line\">from collections import Iterator</span><br><span class=\"line\"></span><br><span class=\"line\">class Classmate(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.names &#x3D; list()</span><br><span class=\"line\">        self.current_num &#x3D; 0</span><br><span class=\"line\">        </span><br><span class=\"line\">    def add(self, name):</span><br><span class=\"line\">        self.names.append(name)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        &#39;&#39;&#39;如果想要一个对象成为一个可以迭代的对象，即可以使用for，那么必须实现__iter__方法&#39;&#39;&#39;</span><br><span class=\"line\">        return self</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">         &#39;&#39;&#39;返回调用值&#39;&#39;&#39;</span><br><span class=\"line\">        if self.current_num &lt; len(self.names):</span><br><span class=\"line\">            ret &#x3D; self.names[self.current_num]</span><br><span class=\"line\">            self.current_num +&#x3D; 1</span><br><span class=\"line\">            return ret</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            raise StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">classmate &#x3D; Classmate()</span><br><span class=\"line\"></span><br><span class=\"line\">classmate.add(&quot;张三&quot;)</span><br><span class=\"line\">classmate.add(&quot;李四&quot;)</span><br><span class=\"line\">classmate.add(&quot;王五&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># print(&quot;判断classmate是否是可以迭代的对象：&quot;,isinstance(classmate, Iterable))</span><br><span class=\"line\"># classmate_iterator &#x3D; iter(classmate)</span><br><span class=\"line\"># print(&quot;判断classmate_iterator是否是迭代器：&quot;,isinstance(classmate_iterator, Iterator)</span><br><span class=\"line\"></span><br><span class=\"line\">for name in classmate:</span><br><span class=\"line\">    print(name)</span><br></pre></td></tr></table></figure>\n<h5 id=\"Fibonacci的迭代器实现\"><a href=\"#Fibonacci的迭代器实现\" class=\"headerlink\" title=\"Fibonacci的迭代器实现\"></a>Fibonacci的迭代器实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Fibonacci(object):</span><br><span class=\"line\">    def __init__(self, all_num):</span><br><span class=\"line\">        self.all_num &#x3D; all_num</span><br><span class=\"line\">        self.current_num &#x3D; 0</span><br><span class=\"line\">        self.a &#x3D; 0</span><br><span class=\"line\">        self.b &#x3D; 1</span><br><span class=\"line\">    </span><br><span class=\"line\">    def __iter__(self):</span><br><span class=\"line\">        return self</span><br><span class=\"line\">        </span><br><span class=\"line\">    def __next__(self):</span><br><span class=\"line\">        if self.current_num &lt; self.all_num:</span><br><span class=\"line\">            ret &#x3D; self.a</span><br><span class=\"line\">            </span><br><span class=\"line\">            self.a, self.b &#x3D; self.b, self.a+self.b</span><br><span class=\"line\">            self.current_num +&#x3D; 1</span><br><span class=\"line\">            </span><br><span class=\"line\">            return ret</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            raise StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">fibo &#x3D; Fibonacci(10)</span><br><span class=\"line\"></span><br><span class=\"line\">for num in fibo:</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"并不是只有for循环能接受可迭代对象\"><a href=\"#并不是只有for循环能接受可迭代对象\" class=\"headerlink\" title=\"并不是只有for循环能接受可迭代对象\"></a>并不是只有for循环能接受可迭代对象</h5><p>除了for循环能接受可迭代对象，list、tuple等也能接受</p>\n<p><strong>iter</strong>()  -&gt;  <strong>next</strong>() -&gt; return </p>\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><p>生成器是一个特殊的迭代器</p>\n<h5 id=\"应用1\"><a href=\"#应用1\" class=\"headerlink\" title=\"应用1\"></a>应用1</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums &#x3D; [x*2 for x in range(10)]</span><br><span class=\"line\">-&gt; [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span><br><span class=\"line\"></span><br><span class=\"line\">nums &#x3D; (x*2 for x in range(10))</span><br><span class=\"line\">-&gt; &lt;generator object &lt;genexpr&gt; at 0x7f7ec7071938&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列表推导式生成一个列表<br>生成器生成一个对象，不占用内存空间,可通过for循环调用</p>\n<h5 id=\"应用2\"><a href=\"#应用2\" class=\"headerlink\" title=\"应用2\"></a>应用2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def create_num(all_num):</span><br><span class=\"line\">    a, b &#x3D; 0, 1</span><br><span class=\"line\">    current_num &#x3D; 0</span><br><span class=\"line\">    while current_num &lt; all_num：</span><br><span class=\"line\">        yield a     #如果一个函数中有yield语句，那么这个就不再是函数，而是一个生成器模板</span><br><span class=\"line\">        a, b &#x3D; b, a+b</span><br><span class=\"line\">        current_num +&#x3D; 1</span><br><span class=\"line\"># 如果在调用create_num的时候，发现这个函数中由yield，那么此时不是调用函数，而是创建一个生成器对象。</span><br><span class=\"line\">obj &#x3D; create_num(10)</span><br><span class=\"line\"></span><br><span class=\"line\">for num in obj:</span><br><span class=\"line\">    print(num)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"yield生成器获取return值\"><a href=\"#yield生成器获取return值\" class=\"headerlink\" title=\"yield生成器获取return值\"></a>yield生成器获取return值</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def create_num(all_num):</span><br><span class=\"line\">    a, b &#x3D; 0, 1</span><br><span class=\"line\">    current_num &#x3D; 0</span><br><span class=\"line\">    while current_num &lt; all_num:</span><br><span class=\"line\">        yield a</span><br><span class=\"line\">        a, b &#x3D; b, a+b</span><br><span class=\"line\">        current_num +&#x3D; 1</span><br><span class=\"line\">    return &quot;ok....&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">obj &#x3D; create_num(20)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        ret &#x3D; next(obj)</span><br><span class=\"line\">        print(ret)</span><br><span class=\"line\">    except Exception as ret:</span><br><span class=\"line\">        print(ret.value)</span><br><span class=\"line\">        break</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"send-传递参数\"><a href=\"#send-传递参数\" class=\"headerlink\" title=\"send()传递参数\"></a>send()传递参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def create_num(all_num):</span><br><span class=\"line\">    a, b &#x3D; 0, 1</span><br><span class=\"line\">    current_num &#x3D; 0</span><br><span class=\"line\">    while current_num &lt; all_num:</span><br><span class=\"line\">        ret &#x3D; yield a   # 右侧语句执行暂停，传参给next()</span><br><span class=\"line\">        # send()将参数传过来，程序从暂停处开始执行，将传过来的参数赋给ret</span><br><span class=\"line\">        print(&quot;ret:&quot;, ret)</span><br><span class=\"line\">        a, b &#x3D; b, a+b</span><br><span class=\"line\">        current_num +&#x3D; 1</span><br><span class=\"line\">    </span><br><span class=\"line\">obj &#x3D; create_num(20)</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; next(obj) </span><br><span class=\"line\">print(ret)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; obj.send(&quot;hahaahha&quot;)  #等同于next()，不同的是可以传参</span><br><span class=\"line\"># send()一般不会放到第一次启动生成器，如果非要这么做，那么传递None</span><br><span class=\"line\"># 再次运行到yield a，将a的值赋给ret</span><br><span class=\"line\">print(ret)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用yield完成多任务\"><a href=\"#使用yield完成多任务\" class=\"headerlink\" title=\"使用yield完成多任务\"></a>使用yield完成多任务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def task_1():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;---1---&quot;)</span><br><span class=\"line\">        time.sleep(0.1)</span><br><span class=\"line\">        yield</span><br><span class=\"line\">        </span><br><span class=\"line\">def task_2():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;---2---&quot;)</span><br><span class=\"line\">        time.sleep(0.1)</span><br><span class=\"line\">        yield</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    t1 &#x3D; task_1()</span><br><span class=\"line\">    t2 &#x3D; task_2()</span><br><span class=\"line\">    # 先让t1运行一会，当t1中遇到yield的时候，返回此处</span><br><span class=\"line\">    # 执行t2，当它遇到yield的时候，再次切换到t1中</span><br><span class=\"line\">    # 这样t1&#x2F;t2&#x2F;t1&#x2F;t2的交替运行，最终实现了多任务...协程</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        next(t1)</span><br><span class=\"line\">        next(t2)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用greenlet、gevent完成多任务\"><a href=\"#使用greenlet、gevent完成多任务\" class=\"headerlink\" title=\"使用greenlet、gevent完成多任务\"></a>使用greenlet、gevent完成多任务</h4><p>核心使用yield实现</p>\n<p>$ pip3 install greenlet     # 安装greenlet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from greenlet import greenlet</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def test1():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;---A---&quot;)</span><br><span class=\"line\">        gr2.switch()</span><br><span class=\"line\">        time.sleep(0.5)</span><br><span class=\"line\">        </span><br><span class=\"line\">def test2():</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        print(&quot;---B---&quot;)</span><br><span class=\"line\">        gr1.switch()</span><br><span class=\"line\">        time.sleep(0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">gr1 &#x3D; greenlet(test1)</span><br><span class=\"line\">gr2 &#x3D; greenlet(test2)</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到gr1中运行</span><br><span class=\"line\">gr1.switch()</span><br></pre></td></tr></table></figure>\n\n<p>$ pip3 install gevent</p>\n<ul>\n<li>依赖关系<br>协程 &lt;- 线程&lt;- 进程<br>遇到耗时操作进行切换</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import gevent</span><br><span class=\"line\"></span><br><span class=\"line\">def f1(n):</span><br><span class=\"line\">    for i in range(n):</span><br><span class=\"line\">        print(gevent.getcurrent(), i)</span><br><span class=\"line\">        gevent.sleep(0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">def f2(n):</span><br><span class=\"line\">    for i in range(n):</span><br><span class=\"line\">        print(gevent.getcurrent(), i)</span><br><span class=\"line\">        gevent.sleep(0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">def f3(n):</span><br><span class=\"line\">    for i in range(n):</span><br><span class=\"line\">        print(gevent.getcurrent(), i)</span><br><span class=\"line\">        gevent.sleep(0.5)</span><br><span class=\"line\"></span><br><span class=\"line\">g1 &#x3D; gevent.spawn(f1, 5)     #  生成yield对象 f:指定函数 5:指定传参 </span><br><span class=\"line\">g2 &#x3D; gevent.spawn(f2, 5)</span><br><span class=\"line\">g3 &#x3D; gevent.spawn(f3, 5)</span><br><span class=\"line\">g1.join()   # 运行期间会耗时，自行切换到下一个对象</span><br><span class=\"line\">g2.join()</span><br><span class=\"line\">g3.join()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sleep补丁\"><a href=\"#sleep补丁\" class=\"headerlink\" title=\"sleep补丁\"></a>sleep补丁</h4><ul>\n<li>协程使用代码示例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from gevent import monkey</span><br><span class=\"line\">import gevent</span><br><span class=\"line\">import random</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"># 有耗时操作时需要</span><br><span class=\"line\">monkey.patch_all()      # 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块</span><br><span class=\"line\"></span><br><span class=\"line\">def coroutine_work(coroutine_name):</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        print(coroutine_name, i)</span><br><span class=\"line\">        time.sleep(random.random()</span><br><span class=\"line\"></span><br><span class=\"line\"># 将多个join连接起来用一个元组实现</span><br><span class=\"line\"># 等待元组中所有协程都完成后结束当前进程</span><br><span class=\"line\">gevent.joinall([</span><br><span class=\"line\">            gevent.spawn(coroutine_work, &quot;work1&quot;),</span><br><span class=\"line\">            gevent.spawn(coroutine_work, &quot;work2&quot;)</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"案例-并发下载器\"><a href=\"#案例-并发下载器\" class=\"headerlink\" title=\"案例-并发下载器\"></a>案例-并发下载器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from gevent import monkey</span><br><span class=\"line\">import gevent</span><br><span class=\"line\">import urllib.request</span><br><span class=\"line\"></span><br><span class=\"line\">monkey.patch_all()</span><br><span class=\"line\"></span><br><span class=\"line\">def downloader(img_name, img_url):</span><br><span class=\"line\">    req &#x3D; urllib.request.urlopen(img_orl)</span><br><span class=\"line\">    </span><br><span class=\"line\">    img_content &#x3D; req.read()</span><br><span class=\"line\">    </span><br><span class=\"line\">    with open(img_name, &quot;wb&quot;) as f:</span><br><span class=\"line\">        f.write(img_content)</span><br><span class=\"line\">        </span><br><span class=\"line\">def main():</span><br><span class=\"line\">    gevent.joinall([</span><br><span class=\"line\">                gevent.spawn(downlaoder, &quot;1.jpg&quot;, &quot;http:&#x2F;&#x2F;url&quot;),</span><br><span class=\"line\">                gevent.spawn(downlaoder, &quot;1.jpg&quot;, &quot;http:&#x2F;&#x2F;url&quot;)</span><br><span class=\"line\">    ])</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进程、线程、协程对比\"><a href=\"#进程、线程、协程对比\" class=\"headerlink\" title=\"进程、线程、协程对比\"></a>进程、线程、协程对比</h4><ul>\n<li>有一个老板想要开个工厂进行生产某件商品</li>\n<li>他需要画一些财力物力制作一条生产线，这个生产线上有很多的器件以及材料这些所有的为了能够生产商品而准备的资源称之为：<strong>进程</strong></li>\n<li>只有生产线程时不能够进行生产的，所以老板需要找个工人来进行生产，这个工人能够利用这些材料最终一步步的将商品制作出来，这个来做事情的工人称之为：<strong>线程</strong></li>\n<li>这个老板为了提高生产率，想到3种方法：<ol>\n<li>在这条生产线上多找些工人，一起来做商品，这样效率是成倍增长，即<strong>单进程 多线程</strong>方式</li>\n<li>老板发现这条生产线上的工人不是越多越好，因为一条生产线的资源以及材料毕竟有限，所以老板又花了写财力物力购置了一条生产线，然后再招些工人，这样效率又再一步提高了，即<strong>多进程 多线程</strong>方式</li>\n<li>老板发现，现在已经有了很多条生产线，并且每条生产线上已经有很多工人了（即程序是多进程的，每个进程中又有多个线程），为了再次提高效率，老板想了个损招，规定：如果某个员工在上班时，临时没事或者再等待某些条件（比如等待另一个工人生产完某道工序之后，他才能再次工作），那么这个员工就利用这个时间去做其他的事情，那么也就是说：如果一个线程等待某些条件，可以充分利用这个时间去做其他事情，其实这就是：<strong>协程</strong>方式</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h5><ol>\n<li>进程是资源分配的单位</li>\n<li>线程是操作系统调度的单位</li>\n<li>进程切换需要的资源最大，效率很低</li>\n<li>线程切换需要的资源一般，效率一般（不考虑GIL的情况下）</li>\n<li>协程切换任务资源很小，效率高</li>\n<li>多进程、多线程根据CPU核数不一样可能是并行的，但是协程是在一个线程中，所以是并发。</li>\n</ol>\n"},{"title":"python线程","date":"2020-03-06T06:15:36.360Z","comments":1,"_content":"\n\n#### 创建多线程\n\n- demo1\n```\nimport threading\nimport time\n\ndef saySorry():\n    print(\"亲爱的，我错了，我能吃饭了吗？\")\n    time.sleep(1)\n\nif __name__ == \"__main__\"\n    for i in range(5):\n        t = threading.Thread(target=saySorry)  #创建实例对象t\n        t.start() #启动线程，生成子线程，运行指定参数\n```\n\n- demo2\n```\nimport time\nimport threading\n\ndef sing():\n    \"\"\"唱歌 5秒钟\"\"\"\n    for i in range(5):\n        print(\"---正在唱：菊花茶---\")\n        time.sleep(1)\n\n\ndef dance():\n    \"\"\"跳舞 5秒钟\"\"\"\n    for i in range(5):\n        print(\"---正在跳舞---\")\n        time.sleep(1)\n\n\ndef main():\n    t1 = threading.Thread(target=sing)  #创建实例对象t1，传参sing\n    t2 = threading.Thread(target=dance) #创建实例对象t2。传参dance\n    t1.start()  #生成子线程\n    t2.start()  #生成子线程 \n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### 查看线程数量\n```\nimport time\nimport threading\n\ndef test1():\n    for i in range(5):\n        print(\"---test---%d\" % i)   #子线程t1\n        time.sleep(1)\n    #如果创建Thread时执行的函数运行结束，那么意味着这个子线程结束了\n\ndef test2():\n    for i in range(10):\n        print(\"---test---%d\" % i)   #子线程t2\n        time.sleep(1)\n\ndef main():\n    t1 = threading.Thread(target=test1) #创建实例对象t1，传参test1，不创建线程\n    t2 = threading.Thread(target=test2) #创建实例对象t2，传参test2，不创建线程\n    \n    t1.start()          #生成子线程t1\n    t2.start()          #生成子线程t2\n    # 线程执行顺序不确定，可通过延时控制执行顺序 \n    while True：\n        print(threading.enumerate())    #获取当前程序所有线程的信息\n        if len(threading,enumerous()) <= 1:\n            break\n        time.sleep(1)\n        #主线程结束，程序就会结束，主线程结束会杀掉所有子线程。\n\nif __name__ == \"__main__\":\n    main() \n```\n\n#### 通过继承Thread类完成创建线程\n\n- demo\n```\nimport threading\nimport time\n\nclass MyThread(threading.Thread):       #MyThread类继承自Thread类\n    def run(self):                      #方法名必须是run()，才能实现多线程\n        for i in range(3):\n            time.sleep(3)\n            msg = \"I'm\" + self.name + '@' + str(i) #name属性中保存的时当前线程的名字\n\n\ni __name__ == \"__main__\":\n    t = MyThread()          #一个实例对象只能开启一个子线程\n    t.start()       #start()自动调用子类中的run()方法。\n```\n\n#### 多线程-共享全局变量\n```\nimport threading\nimport time\n\n# 定义全局变量\nnum = 100\n\ndef test1():\n    global g_num      # 声明该变量是全局变量\n    g_num += 1\n    print(\"in test1 g_num=%d\" % g_num)\n\ndef test2():\n    print(\"in test2 g_num=%d\" % g_num)      #不修改变量是可以不声明直接使用\n\ndef main():\n    t1 = threading.Thread(target=test1)\n    t2 = threading.Thread(target=test2)\n    \n    t1.start()\n    time.sleep()\n    \n    t2.start()\n    time.sleep()\n    \nif __name__ == \"__main__\":\n    main()\n```\n\n> 在一个函数中，对全局变量进行修改的时候，到底是否需要使用global进行说明？\n\n要看是否对全局变量的执行指向进行了修改，\n\n如果修改了执行，即让全局变量指向了一个新的地方，那么必须使用global，例如test1()\n\n如果仅仅是修改了指向的空间中的数据，此时不需要必须使用global。例如test2()\n\n#### 多线程共享全局变量-args参数\n```\ndef test1(temp):\n    Null\n\n# target指定这个线程去哪个函数执行代码\n# args指定调用函数的时候传递什么数据过去\nt1 = threading.Thread(target=test1, args=(g_num,)) # args传递元组数据类型\n```\n\n#### 多线程-共享全局变量问题\n##### 互斥锁\n```\n# 创建互斥锁\nmutex = threading.Lock()    # 同一把锁只能使用一次\n\n# 锁定\nmutex.acquire() # 如果上锁之前已被上锁，则此时阻塞在这里，直至所被解开。\n\n# 释放\nmutex.release()\n```\n 银行家算法 死锁预防 超时处理\n \n ### 案例-UDP聊天器\n ```\n import socket\n import threading\n \n def recv_msg(udp_socket):\n    '''接受数据并显示'''\n    \n    # 接收数据\n    while True:\n        recv_data = udp_socket.recvfrom(1024)\n        print(recv_data)\n \n \n def send_msg(udp_socket, dest_ip, dest_port):\n    '''发送数据'''\n    \n    # 发送数据\n    while True:\n        recv_data = input()\n        udp_socket.sendto(send_data.encode(\"utf-8\"). (dest_ip, dest_port))\n\n\n def main():\n    '''UDP聊天器的整体控制'''\n    \n    # 1. 创建套接字\n    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    \n    # 2. 绑定本地信息\n    udp_socket.bind(\"\",7890)\n    \n    # 3. 获取对方的IP\n    dest_ip = input(“请输入对方的IP：”)\n    dest_port = int(input(\"请输入对方的port：\"))\n    \n    # 4. 创建两个线程，执行相应的功能\n    t_recv = threading.Thread(target=recv_msg, args=(udp_socket,))\n    t_send = threading.Thread(target=send_msg, args=(udp_socket, dest_ip, dest_port))\n    \n    t_recv.start()\n    t_send.start()\n    \n        \n if __name__ == \"__main__\":\n    main()\n ```\n","source":"_posts/02-多任务-线程.md","raw":"---\ntitle: python线程\ndate: {{ date }}\ntags: python\ncategories:\ncomments: true\n---\n\n\n#### 创建多线程\n\n- demo1\n```\nimport threading\nimport time\n\ndef saySorry():\n    print(\"亲爱的，我错了，我能吃饭了吗？\")\n    time.sleep(1)\n\nif __name__ == \"__main__\"\n    for i in range(5):\n        t = threading.Thread(target=saySorry)  #创建实例对象t\n        t.start() #启动线程，生成子线程，运行指定参数\n```\n\n- demo2\n```\nimport time\nimport threading\n\ndef sing():\n    \"\"\"唱歌 5秒钟\"\"\"\n    for i in range(5):\n        print(\"---正在唱：菊花茶---\")\n        time.sleep(1)\n\n\ndef dance():\n    \"\"\"跳舞 5秒钟\"\"\"\n    for i in range(5):\n        print(\"---正在跳舞---\")\n        time.sleep(1)\n\n\ndef main():\n    t1 = threading.Thread(target=sing)  #创建实例对象t1，传参sing\n    t2 = threading.Thread(target=dance) #创建实例对象t2。传参dance\n    t1.start()  #生成子线程\n    t2.start()  #生成子线程 \n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### 查看线程数量\n```\nimport time\nimport threading\n\ndef test1():\n    for i in range(5):\n        print(\"---test---%d\" % i)   #子线程t1\n        time.sleep(1)\n    #如果创建Thread时执行的函数运行结束，那么意味着这个子线程结束了\n\ndef test2():\n    for i in range(10):\n        print(\"---test---%d\" % i)   #子线程t2\n        time.sleep(1)\n\ndef main():\n    t1 = threading.Thread(target=test1) #创建实例对象t1，传参test1，不创建线程\n    t2 = threading.Thread(target=test2) #创建实例对象t2，传参test2，不创建线程\n    \n    t1.start()          #生成子线程t1\n    t2.start()          #生成子线程t2\n    # 线程执行顺序不确定，可通过延时控制执行顺序 \n    while True：\n        print(threading.enumerate())    #获取当前程序所有线程的信息\n        if len(threading,enumerous()) <= 1:\n            break\n        time.sleep(1)\n        #主线程结束，程序就会结束，主线程结束会杀掉所有子线程。\n\nif __name__ == \"__main__\":\n    main() \n```\n\n#### 通过继承Thread类完成创建线程\n\n- demo\n```\nimport threading\nimport time\n\nclass MyThread(threading.Thread):       #MyThread类继承自Thread类\n    def run(self):                      #方法名必须是run()，才能实现多线程\n        for i in range(3):\n            time.sleep(3)\n            msg = \"I'm\" + self.name + '@' + str(i) #name属性中保存的时当前线程的名字\n\n\ni __name__ == \"__main__\":\n    t = MyThread()          #一个实例对象只能开启一个子线程\n    t.start()       #start()自动调用子类中的run()方法。\n```\n\n#### 多线程-共享全局变量\n```\nimport threading\nimport time\n\n# 定义全局变量\nnum = 100\n\ndef test1():\n    global g_num      # 声明该变量是全局变量\n    g_num += 1\n    print(\"in test1 g_num=%d\" % g_num)\n\ndef test2():\n    print(\"in test2 g_num=%d\" % g_num)      #不修改变量是可以不声明直接使用\n\ndef main():\n    t1 = threading.Thread(target=test1)\n    t2 = threading.Thread(target=test2)\n    \n    t1.start()\n    time.sleep()\n    \n    t2.start()\n    time.sleep()\n    \nif __name__ == \"__main__\":\n    main()\n```\n\n> 在一个函数中，对全局变量进行修改的时候，到底是否需要使用global进行说明？\n\n要看是否对全局变量的执行指向进行了修改，\n\n如果修改了执行，即让全局变量指向了一个新的地方，那么必须使用global，例如test1()\n\n如果仅仅是修改了指向的空间中的数据，此时不需要必须使用global。例如test2()\n\n#### 多线程共享全局变量-args参数\n```\ndef test1(temp):\n    Null\n\n# target指定这个线程去哪个函数执行代码\n# args指定调用函数的时候传递什么数据过去\nt1 = threading.Thread(target=test1, args=(g_num,)) # args传递元组数据类型\n```\n\n#### 多线程-共享全局变量问题\n##### 互斥锁\n```\n# 创建互斥锁\nmutex = threading.Lock()    # 同一把锁只能使用一次\n\n# 锁定\nmutex.acquire() # 如果上锁之前已被上锁，则此时阻塞在这里，直至所被解开。\n\n# 释放\nmutex.release()\n```\n 银行家算法 死锁预防 超时处理\n \n ### 案例-UDP聊天器\n ```\n import socket\n import threading\n \n def recv_msg(udp_socket):\n    '''接受数据并显示'''\n    \n    # 接收数据\n    while True:\n        recv_data = udp_socket.recvfrom(1024)\n        print(recv_data)\n \n \n def send_msg(udp_socket, dest_ip, dest_port):\n    '''发送数据'''\n    \n    # 发送数据\n    while True:\n        recv_data = input()\n        udp_socket.sendto(send_data.encode(\"utf-8\"). (dest_ip, dest_port))\n\n\n def main():\n    '''UDP聊天器的整体控制'''\n    \n    # 1. 创建套接字\n    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    \n    # 2. 绑定本地信息\n    udp_socket.bind(\"\",7890)\n    \n    # 3. 获取对方的IP\n    dest_ip = input(“请输入对方的IP：”)\n    dest_port = int(input(\"请输入对方的port：\"))\n    \n    # 4. 创建两个线程，执行相应的功能\n    t_recv = threading.Thread(target=recv_msg, args=(udp_socket,))\n    t_send = threading.Thread(target=send_msg, args=(udp_socket, dest_ip, dest_port))\n    \n    t_recv.start()\n    t_send.start()\n    \n        \n if __name__ == \"__main__\":\n    main()\n ```\n","slug":"02-多任务-线程","published":1,"updated":"2020-03-06T06:15:36.360Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0wn0002k8592ofz8v69","content":"<h4 id=\"创建多线程\"><a href=\"#创建多线程\" class=\"headerlink\" title=\"创建多线程\"></a>创建多线程</h4><ul>\n<li><p>demo1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def saySorry():</span><br><span class=\"line\">    print(&quot;亲爱的，我错了，我能吃饭了吗？&quot;)</span><br><span class=\"line\">    time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        t &#x3D; threading.Thread(target&#x3D;saySorry)  #创建实例对象t</span><br><span class=\"line\">        t.start() #启动线程，生成子线程，运行指定参数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>demo2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def sing():</span><br><span class=\"line\">    &quot;&quot;&quot;唱歌 5秒钟&quot;&quot;&quot;</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        print(&quot;---正在唱：菊花茶---&quot;)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def dance():</span><br><span class=\"line\">    &quot;&quot;&quot;跳舞 5秒钟&quot;&quot;&quot;</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        print(&quot;---正在跳舞---&quot;)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    t1 &#x3D; threading.Thread(target&#x3D;sing)  #创建实例对象t1，传参sing</span><br><span class=\"line\">    t2 &#x3D; threading.Thread(target&#x3D;dance) #创建实例对象t2。传参dance</span><br><span class=\"line\">    t1.start()  #生成子线程</span><br><span class=\"line\">    t2.start()  #生成子线程 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"查看线程数量\"><a href=\"#查看线程数量\" class=\"headerlink\" title=\"查看线程数量\"></a>查看线程数量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def test1():</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        print(&quot;---test---%d&quot; % i)   #子线程t1</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">    #如果创建Thread时执行的函数运行结束，那么意味着这个子线程结束了</span><br><span class=\"line\"></span><br><span class=\"line\">def test2():</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        print(&quot;---test---%d&quot; % i)   #子线程t2</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    t1 &#x3D; threading.Thread(target&#x3D;test1) #创建实例对象t1，传参test1，不创建线程</span><br><span class=\"line\">    t2 &#x3D; threading.Thread(target&#x3D;test2) #创建实例对象t2，传参test2，不创建线程</span><br><span class=\"line\">    </span><br><span class=\"line\">    t1.start()          #生成子线程t1</span><br><span class=\"line\">    t2.start()          #生成子线程t2</span><br><span class=\"line\">    # 线程执行顺序不确定，可通过延时控制执行顺序 </span><br><span class=\"line\">    while True：</span><br><span class=\"line\">        print(threading.enumerate())    #获取当前程序所有线程的信息</span><br><span class=\"line\">        if len(threading,enumerous()) &lt;&#x3D; 1:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        #主线程结束，程序就会结束，主线程结束会杀掉所有子线程。</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过继承Thread类完成创建线程\"><a href=\"#通过继承Thread类完成创建线程\" class=\"headerlink\" title=\"通过继承Thread类完成创建线程\"></a>通过继承Thread类完成创建线程</h4><ul>\n<li>demo<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">class MyThread(threading.Thread):       #MyThread类继承自Thread类</span><br><span class=\"line\">    def run(self):                      #方法名必须是run()，才能实现多线程</span><br><span class=\"line\">        for i in range(3):</span><br><span class=\"line\">            time.sleep(3)</span><br><span class=\"line\">            msg &#x3D; &quot;I&#39;m&quot; + self.name + &#39;@&#39; + str(i) #name属性中保存的时当前线程的名字</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">i __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    t &#x3D; MyThread()          #一个实例对象只能开启一个子线程</span><br><span class=\"line\">    t.start()       #start()自动调用子类中的run()方法。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"多线程-共享全局变量\"><a href=\"#多线程-共享全局变量\" class=\"headerlink\" title=\"多线程-共享全局变量\"></a>多线程-共享全局变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"># 定义全局变量</span><br><span class=\"line\">num &#x3D; 100</span><br><span class=\"line\"></span><br><span class=\"line\">def test1():</span><br><span class=\"line\">    global g_num      # 声明该变量是全局变量</span><br><span class=\"line\">    g_num +&#x3D; 1</span><br><span class=\"line\">    print(&quot;in test1 g_num&#x3D;%d&quot; % g_num)</span><br><span class=\"line\"></span><br><span class=\"line\">def test2():</span><br><span class=\"line\">    print(&quot;in test2 g_num&#x3D;%d&quot; % g_num)      #不修改变量是可以不声明直接使用</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    t1 &#x3D; threading.Thread(target&#x3D;test1)</span><br><span class=\"line\">    t2 &#x3D; threading.Thread(target&#x3D;test2)</span><br><span class=\"line\">    </span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    time.sleep()</span><br><span class=\"line\">    </span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    time.sleep()</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在一个函数中，对全局变量进行修改的时候，到底是否需要使用global进行说明？</p>\n</blockquote>\n<p>要看是否对全局变量的执行指向进行了修改，</p>\n<p>如果修改了执行，即让全局变量指向了一个新的地方，那么必须使用global，例如test1()</p>\n<p>如果仅仅是修改了指向的空间中的数据，此时不需要必须使用global。例如test2()</p>\n<h4 id=\"多线程共享全局变量-args参数\"><a href=\"#多线程共享全局变量-args参数\" class=\"headerlink\" title=\"多线程共享全局变量-args参数\"></a>多线程共享全局变量-args参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def test1(temp):</span><br><span class=\"line\">    Null</span><br><span class=\"line\"></span><br><span class=\"line\"># target指定这个线程去哪个函数执行代码</span><br><span class=\"line\"># args指定调用函数的时候传递什么数据过去</span><br><span class=\"line\">t1 &#x3D; threading.Thread(target&#x3D;test1, args&#x3D;(g_num,)) # args传递元组数据类型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多线程-共享全局变量问题\"><a href=\"#多线程-共享全局变量问题\" class=\"headerlink\" title=\"多线程-共享全局变量问题\"></a>多线程-共享全局变量问题</h4><h5 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建互斥锁</span><br><span class=\"line\">mutex &#x3D; threading.Lock()    # 同一把锁只能使用一次</span><br><span class=\"line\"></span><br><span class=\"line\"># 锁定</span><br><span class=\"line\">mutex.acquire() # 如果上锁之前已被上锁，则此时阻塞在这里，直至所被解开。</span><br><span class=\"line\"></span><br><span class=\"line\"># 释放</span><br><span class=\"line\">mutex.release()</span><br></pre></td></tr></table></figure>\n<p> 银行家算法 死锁预防 超时处理</p>\n<h3 id=\"案例-UDP聊天器\"><a href=\"#案例-UDP聊天器\" class=\"headerlink\" title=\"案例-UDP聊天器\"></a>案例-UDP聊天器</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def recv_msg(udp_socket):</span><br><span class=\"line\">   &#39;&#39;&#39;接受数据并显示&#39;&#39;&#39;</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 接收数据</span><br><span class=\"line\">   while True:</span><br><span class=\"line\">       recv_data &#x3D; udp_socket.recvfrom(1024)</span><br><span class=\"line\">       print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def send_msg(udp_socket, dest_ip, dest_port):</span><br><span class=\"line\">   &#39;&#39;&#39;发送数据&#39;&#39;&#39;</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 发送数据</span><br><span class=\"line\">   while True:</span><br><span class=\"line\">       recv_data &#x3D; input()</span><br><span class=\"line\">       udp_socket.sendto(send_data.encode(&quot;utf-8&quot;). (dest_ip, dest_port))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">   &#39;&#39;&#39;UDP聊天器的整体控制&#39;&#39;&#39;</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 1. 创建套接字</span><br><span class=\"line\">   udp_socket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 2. 绑定本地信息</span><br><span class=\"line\">   udp_socket.bind(&quot;&quot;,7890)</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 3. 获取对方的IP</span><br><span class=\"line\">   dest_ip &#x3D; input(“请输入对方的IP：”)</span><br><span class=\"line\">   dest_port &#x3D; int(input(&quot;请输入对方的port：&quot;))</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 4. 创建两个线程，执行相应的功能</span><br><span class=\"line\">   t_recv &#x3D; threading.Thread(target&#x3D;recv_msg, args&#x3D;(udp_socket,))</span><br><span class=\"line\">   t_send &#x3D; threading.Thread(target&#x3D;send_msg, args&#x3D;(udp_socket, dest_ip, dest_port))</span><br><span class=\"line\">   </span><br><span class=\"line\">   t_recv.start()</span><br><span class=\"line\">   t_send.start()</span><br><span class=\"line\">   </span><br><span class=\"line\">       </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">   main()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"创建多线程\"><a href=\"#创建多线程\" class=\"headerlink\" title=\"创建多线程\"></a>创建多线程</h4><ul>\n<li><p>demo1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">def saySorry():</span><br><span class=\"line\">    print(&quot;亲爱的，我错了，我能吃饭了吗？&quot;)</span><br><span class=\"line\">    time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        t &#x3D; threading.Thread(target&#x3D;saySorry)  #创建实例对象t</span><br><span class=\"line\">        t.start() #启动线程，生成子线程，运行指定参数</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>demo2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def sing():</span><br><span class=\"line\">    &quot;&quot;&quot;唱歌 5秒钟&quot;&quot;&quot;</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        print(&quot;---正在唱：菊花茶---&quot;)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def dance():</span><br><span class=\"line\">    &quot;&quot;&quot;跳舞 5秒钟&quot;&quot;&quot;</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        print(&quot;---正在跳舞---&quot;)</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    t1 &#x3D; threading.Thread(target&#x3D;sing)  #创建实例对象t1，传参sing</span><br><span class=\"line\">    t2 &#x3D; threading.Thread(target&#x3D;dance) #创建实例对象t2。传参dance</span><br><span class=\"line\">    t1.start()  #生成子线程</span><br><span class=\"line\">    t2.start()  #生成子线程 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"查看线程数量\"><a href=\"#查看线程数量\" class=\"headerlink\" title=\"查看线程数量\"></a>查看线程数量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def test1():</span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        print(&quot;---test---%d&quot; % i)   #子线程t1</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">    #如果创建Thread时执行的函数运行结束，那么意味着这个子线程结束了</span><br><span class=\"line\"></span><br><span class=\"line\">def test2():</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        print(&quot;---test---%d&quot; % i)   #子线程t2</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    t1 &#x3D; threading.Thread(target&#x3D;test1) #创建实例对象t1，传参test1，不创建线程</span><br><span class=\"line\">    t2 &#x3D; threading.Thread(target&#x3D;test2) #创建实例对象t2，传参test2，不创建线程</span><br><span class=\"line\">    </span><br><span class=\"line\">    t1.start()          #生成子线程t1</span><br><span class=\"line\">    t2.start()          #生成子线程t2</span><br><span class=\"line\">    # 线程执行顺序不确定，可通过延时控制执行顺序 </span><br><span class=\"line\">    while True：</span><br><span class=\"line\">        print(threading.enumerate())    #获取当前程序所有线程的信息</span><br><span class=\"line\">        if len(threading,enumerous()) &lt;&#x3D; 1:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">        #主线程结束，程序就会结束，主线程结束会杀掉所有子线程。</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过继承Thread类完成创建线程\"><a href=\"#通过继承Thread类完成创建线程\" class=\"headerlink\" title=\"通过继承Thread类完成创建线程\"></a>通过继承Thread类完成创建线程</h4><ul>\n<li>demo<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">class MyThread(threading.Thread):       #MyThread类继承自Thread类</span><br><span class=\"line\">    def run(self):                      #方法名必须是run()，才能实现多线程</span><br><span class=\"line\">        for i in range(3):</span><br><span class=\"line\">            time.sleep(3)</span><br><span class=\"line\">            msg &#x3D; &quot;I&#39;m&quot; + self.name + &#39;@&#39; + str(i) #name属性中保存的时当前线程的名字</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">i __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    t &#x3D; MyThread()          #一个实例对象只能开启一个子线程</span><br><span class=\"line\">    t.start()       #start()自动调用子类中的run()方法。</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"多线程-共享全局变量\"><a href=\"#多线程-共享全局变量\" class=\"headerlink\" title=\"多线程-共享全局变量\"></a>多线程-共享全局变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"># 定义全局变量</span><br><span class=\"line\">num &#x3D; 100</span><br><span class=\"line\"></span><br><span class=\"line\">def test1():</span><br><span class=\"line\">    global g_num      # 声明该变量是全局变量</span><br><span class=\"line\">    g_num +&#x3D; 1</span><br><span class=\"line\">    print(&quot;in test1 g_num&#x3D;%d&quot; % g_num)</span><br><span class=\"line\"></span><br><span class=\"line\">def test2():</span><br><span class=\"line\">    print(&quot;in test2 g_num&#x3D;%d&quot; % g_num)      #不修改变量是可以不声明直接使用</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    t1 &#x3D; threading.Thread(target&#x3D;test1)</span><br><span class=\"line\">    t2 &#x3D; threading.Thread(target&#x3D;test2)</span><br><span class=\"line\">    </span><br><span class=\"line\">    t1.start()</span><br><span class=\"line\">    time.sleep()</span><br><span class=\"line\">    </span><br><span class=\"line\">    t2.start()</span><br><span class=\"line\">    time.sleep()</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在一个函数中，对全局变量进行修改的时候，到底是否需要使用global进行说明？</p>\n</blockquote>\n<p>要看是否对全局变量的执行指向进行了修改，</p>\n<p>如果修改了执行，即让全局变量指向了一个新的地方，那么必须使用global，例如test1()</p>\n<p>如果仅仅是修改了指向的空间中的数据，此时不需要必须使用global。例如test2()</p>\n<h4 id=\"多线程共享全局变量-args参数\"><a href=\"#多线程共享全局变量-args参数\" class=\"headerlink\" title=\"多线程共享全局变量-args参数\"></a>多线程共享全局变量-args参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def test1(temp):</span><br><span class=\"line\">    Null</span><br><span class=\"line\"></span><br><span class=\"line\"># target指定这个线程去哪个函数执行代码</span><br><span class=\"line\"># args指定调用函数的时候传递什么数据过去</span><br><span class=\"line\">t1 &#x3D; threading.Thread(target&#x3D;test1, args&#x3D;(g_num,)) # args传递元组数据类型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多线程-共享全局变量问题\"><a href=\"#多线程-共享全局变量问题\" class=\"headerlink\" title=\"多线程-共享全局变量问题\"></a>多线程-共享全局变量问题</h4><h5 id=\"互斥锁\"><a href=\"#互斥锁\" class=\"headerlink\" title=\"互斥锁\"></a>互斥锁</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建互斥锁</span><br><span class=\"line\">mutex &#x3D; threading.Lock()    # 同一把锁只能使用一次</span><br><span class=\"line\"></span><br><span class=\"line\"># 锁定</span><br><span class=\"line\">mutex.acquire() # 如果上锁之前已被上锁，则此时阻塞在这里，直至所被解开。</span><br><span class=\"line\"></span><br><span class=\"line\"># 释放</span><br><span class=\"line\">mutex.release()</span><br></pre></td></tr></table></figure>\n<p> 银行家算法 死锁预防 超时处理</p>\n<h3 id=\"案例-UDP聊天器\"><a href=\"#案例-UDP聊天器\" class=\"headerlink\" title=\"案例-UDP聊天器\"></a>案例-UDP聊天器</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">import threading</span><br><span class=\"line\"></span><br><span class=\"line\">def recv_msg(udp_socket):</span><br><span class=\"line\">   &#39;&#39;&#39;接受数据并显示&#39;&#39;&#39;</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 接收数据</span><br><span class=\"line\">   while True:</span><br><span class=\"line\">       recv_data &#x3D; udp_socket.recvfrom(1024)</span><br><span class=\"line\">       print(recv_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def send_msg(udp_socket, dest_ip, dest_port):</span><br><span class=\"line\">   &#39;&#39;&#39;发送数据&#39;&#39;&#39;</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 发送数据</span><br><span class=\"line\">   while True:</span><br><span class=\"line\">       recv_data &#x3D; input()</span><br><span class=\"line\">       udp_socket.sendto(send_data.encode(&quot;utf-8&quot;). (dest_ip, dest_port))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">   &#39;&#39;&#39;UDP聊天器的整体控制&#39;&#39;&#39;</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 1. 创建套接字</span><br><span class=\"line\">   udp_socket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 2. 绑定本地信息</span><br><span class=\"line\">   udp_socket.bind(&quot;&quot;,7890)</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 3. 获取对方的IP</span><br><span class=\"line\">   dest_ip &#x3D; input(“请输入对方的IP：”)</span><br><span class=\"line\">   dest_port &#x3D; int(input(&quot;请输入对方的port：&quot;))</span><br><span class=\"line\">   </span><br><span class=\"line\">   # 4. 创建两个线程，执行相应的功能</span><br><span class=\"line\">   t_recv &#x3D; threading.Thread(target&#x3D;recv_msg, args&#x3D;(udp_socket,))</span><br><span class=\"line\">   t_send &#x3D; threading.Thread(target&#x3D;send_msg, args&#x3D;(udp_socket, dest_ip, dest_port))</span><br><span class=\"line\">   </span><br><span class=\"line\">   t_recv.start()</span><br><span class=\"line\">   t_send.start()</span><br><span class=\"line\">   </span><br><span class=\"line\">       </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">   main()</span><br></pre></td></tr></table></figure>\n"},{"title":"简单web服务器python实现","date":"2020-03-06T06:15:03.852Z","comments":1,"_content":"\n\n```\nimport socket\nimport re\n\n\ndef service_client(new_socket):\n    '''为这个客户端返回数据'''\n    \n    # 1. 接受浏览器发送过来的请求，即http请求\n    # GET / HTTP/1.1\n    # .....\n    request = new_socket.recv(1024).decode('utf-8')\n    \n    request_lines = request.splitlines()\n    print(request_lines)\n    \n    file_name = ''\n    ret = re.match(r\"[^/]+(/[^ ]*)\", request_lines[0])\n    if ret:\n        file_name = re.group(1)\n        if file_name == \"/\":\n            file_name = \"/index.html\"\n    \n    \n    # 2. 返回http格式的数据，给浏览器\n    \n    try:\n        f = open(\"./html/index.html\",\"rb\")\n    except:\n        response = 'HTTP/1.1 404 NOT FOUND\\r\\n'\n        response += '\\r\\n'\n        response += '----file not found----'\n        new_socket.send(response.encode('utf-8'))\n    else:\n        # 2.1 准备发送给浏览器的数据 ---header---\n        response = \"HTTP/1.1 200 OK\\r\\n\"\n        response += \"\\r\\n\"\n        # 2.2 准备发送给浏览器的数据 ---body---\n        html_content = f.read()\n        f.close()\n        \n        # 3. 发送数据\n        # 3.1 发送header\n        new_socket.send(response.encode(\"utf-8\"))\n        # 3.2 发送body\n        new_socket.send(html_content)\n    \n    # 4. 关闭套接字\n    new_socket.close()\n\n\ndef main():\n    \"\"\"用来完成整体的控制\"\"\"\n    # 1. 创建套接字\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    \n    # 2. 绑定端口\n    tcp_server_socket.bind((\"\", 7890))\n    \n    # 3. 变为监听套接字\n    tcp_server_socket.listen(128)\n    \n    while True:\n        # 4. 等待新客户端的链接\n        new_socket, client_addr = tcp_server_socket.accept()\n        \n        # 5. 为这个客户端服务\n        service_client(new_socket)\n    \n    # 关闭监听套接字\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### TCP三次握手、四次挥手\n","source":"_posts/03-简单web服务器实现.md","raw":"---\ntitle: 简单web服务器python实现\ndate: {{ date }}\ntags: python\ncategories:\ncomments: true\n---\n\n\n```\nimport socket\nimport re\n\n\ndef service_client(new_socket):\n    '''为这个客户端返回数据'''\n    \n    # 1. 接受浏览器发送过来的请求，即http请求\n    # GET / HTTP/1.1\n    # .....\n    request = new_socket.recv(1024).decode('utf-8')\n    \n    request_lines = request.splitlines()\n    print(request_lines)\n    \n    file_name = ''\n    ret = re.match(r\"[^/]+(/[^ ]*)\", request_lines[0])\n    if ret:\n        file_name = re.group(1)\n        if file_name == \"/\":\n            file_name = \"/index.html\"\n    \n    \n    # 2. 返回http格式的数据，给浏览器\n    \n    try:\n        f = open(\"./html/index.html\",\"rb\")\n    except:\n        response = 'HTTP/1.1 404 NOT FOUND\\r\\n'\n        response += '\\r\\n'\n        response += '----file not found----'\n        new_socket.send(response.encode('utf-8'))\n    else:\n        # 2.1 准备发送给浏览器的数据 ---header---\n        response = \"HTTP/1.1 200 OK\\r\\n\"\n        response += \"\\r\\n\"\n        # 2.2 准备发送给浏览器的数据 ---body---\n        html_content = f.read()\n        f.close()\n        \n        # 3. 发送数据\n        # 3.1 发送header\n        new_socket.send(response.encode(\"utf-8\"))\n        # 3.2 发送body\n        new_socket.send(html_content)\n    \n    # 4. 关闭套接字\n    new_socket.close()\n\n\ndef main():\n    \"\"\"用来完成整体的控制\"\"\"\n    # 1. 创建套接字\n    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    \n    # 2. 绑定端口\n    tcp_server_socket.bind((\"\", 7890))\n    \n    # 3. 变为监听套接字\n    tcp_server_socket.listen(128)\n    \n    while True:\n        # 4. 等待新客户端的链接\n        new_socket, client_addr = tcp_server_socket.accept()\n        \n        # 5. 为这个客户端服务\n        service_client(new_socket)\n    \n    # 关闭监听套接字\n    tcp_server_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### TCP三次握手、四次挥手\n","slug":"03-简单web服务器实现","published":1,"updated":"2020-03-06T06:15:03.852Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0wt0005k85914x0hx4g","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def service_client(new_socket):</span><br><span class=\"line\">    &#39;&#39;&#39;为这个客户端返回数据&#39;&#39;&#39;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 1. 接受浏览器发送过来的请求，即http请求</span><br><span class=\"line\">    # GET &#x2F; HTTP&#x2F;1.1</span><br><span class=\"line\">    # .....</span><br><span class=\"line\">    request &#x3D; new_socket.recv(1024).decode(&#39;utf-8&#39;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    request_lines &#x3D; request.splitlines()</span><br><span class=\"line\">    print(request_lines)</span><br><span class=\"line\">    </span><br><span class=\"line\">    file_name &#x3D; &#39;&#39;</span><br><span class=\"line\">    ret &#x3D; re.match(r&quot;[^&#x2F;]+(&#x2F;[^ ]*)&quot;, request_lines[0])</span><br><span class=\"line\">    if ret:</span><br><span class=\"line\">        file_name &#x3D; re.group(1)</span><br><span class=\"line\">        if file_name &#x3D;&#x3D; &quot;&#x2F;&quot;:</span><br><span class=\"line\">            file_name &#x3D; &quot;&#x2F;index.html&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 返回http格式的数据，给浏览器</span><br><span class=\"line\">    </span><br><span class=\"line\">    try:</span><br><span class=\"line\">        f &#x3D; open(&quot;.&#x2F;html&#x2F;index.html&quot;,&quot;rb&quot;)</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        response &#x3D; &#39;HTTP&#x2F;1.1 404 NOT FOUND\\r\\n&#39;</span><br><span class=\"line\">        response +&#x3D; &#39;\\r\\n&#39;</span><br><span class=\"line\">        response +&#x3D; &#39;----file not found----&#39;</span><br><span class=\"line\">        new_socket.send(response.encode(&#39;utf-8&#39;))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # 2.1 准备发送给浏览器的数据 ---header---</span><br><span class=\"line\">        response &#x3D; &quot;HTTP&#x2F;1.1 200 OK\\r\\n&quot;</span><br><span class=\"line\">        response +&#x3D; &quot;\\r\\n&quot;</span><br><span class=\"line\">        # 2.2 准备发送给浏览器的数据 ---body---</span><br><span class=\"line\">        html_content &#x3D; f.read()</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 3. 发送数据</span><br><span class=\"line\">        # 3.1 发送header</span><br><span class=\"line\">        new_socket.send(response.encode(&quot;utf-8&quot;))</span><br><span class=\"line\">        # 3.2 发送body</span><br><span class=\"line\">        new_socket.send(html_content)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 4. 关闭套接字</span><br><span class=\"line\">    new_socket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    &quot;&quot;&quot;用来完成整体的控制&quot;&quot;&quot;</span><br><span class=\"line\">    # 1. 创建套接字</span><br><span class=\"line\">    tcp_server_socket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 绑定端口</span><br><span class=\"line\">    tcp_server_socket.bind((&quot;&quot;, 7890))</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 3. 变为监听套接字</span><br><span class=\"line\">    tcp_server_socket.listen(128)</span><br><span class=\"line\">    </span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        # 4. 等待新客户端的链接</span><br><span class=\"line\">        new_socket, client_addr &#x3D; tcp_server_socket.accept()</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 5. 为这个客户端服务</span><br><span class=\"line\">        service_client(new_socket)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 关闭监听套接字</span><br><span class=\"line\">    tcp_server_socket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TCP三次握手、四次挥手\"><a href=\"#TCP三次握手、四次挥手\" class=\"headerlink\" title=\"TCP三次握手、四次挥手\"></a>TCP三次握手、四次挥手</h4>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def service_client(new_socket):</span><br><span class=\"line\">    &#39;&#39;&#39;为这个客户端返回数据&#39;&#39;&#39;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 1. 接受浏览器发送过来的请求，即http请求</span><br><span class=\"line\">    # GET &#x2F; HTTP&#x2F;1.1</span><br><span class=\"line\">    # .....</span><br><span class=\"line\">    request &#x3D; new_socket.recv(1024).decode(&#39;utf-8&#39;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    request_lines &#x3D; request.splitlines()</span><br><span class=\"line\">    print(request_lines)</span><br><span class=\"line\">    </span><br><span class=\"line\">    file_name &#x3D; &#39;&#39;</span><br><span class=\"line\">    ret &#x3D; re.match(r&quot;[^&#x2F;]+(&#x2F;[^ ]*)&quot;, request_lines[0])</span><br><span class=\"line\">    if ret:</span><br><span class=\"line\">        file_name &#x3D; re.group(1)</span><br><span class=\"line\">        if file_name &#x3D;&#x3D; &quot;&#x2F;&quot;:</span><br><span class=\"line\">            file_name &#x3D; &quot;&#x2F;index.html&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 返回http格式的数据，给浏览器</span><br><span class=\"line\">    </span><br><span class=\"line\">    try:</span><br><span class=\"line\">        f &#x3D; open(&quot;.&#x2F;html&#x2F;index.html&quot;,&quot;rb&quot;)</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        response &#x3D; &#39;HTTP&#x2F;1.1 404 NOT FOUND\\r\\n&#39;</span><br><span class=\"line\">        response +&#x3D; &#39;\\r\\n&#39;</span><br><span class=\"line\">        response +&#x3D; &#39;----file not found----&#39;</span><br><span class=\"line\">        new_socket.send(response.encode(&#39;utf-8&#39;))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        # 2.1 准备发送给浏览器的数据 ---header---</span><br><span class=\"line\">        response &#x3D; &quot;HTTP&#x2F;1.1 200 OK\\r\\n&quot;</span><br><span class=\"line\">        response +&#x3D; &quot;\\r\\n&quot;</span><br><span class=\"line\">        # 2.2 准备发送给浏览器的数据 ---body---</span><br><span class=\"line\">        html_content &#x3D; f.read()</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 3. 发送数据</span><br><span class=\"line\">        # 3.1 发送header</span><br><span class=\"line\">        new_socket.send(response.encode(&quot;utf-8&quot;))</span><br><span class=\"line\">        # 3.2 发送body</span><br><span class=\"line\">        new_socket.send(html_content)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 4. 关闭套接字</span><br><span class=\"line\">    new_socket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    &quot;&quot;&quot;用来完成整体的控制&quot;&quot;&quot;</span><br><span class=\"line\">    # 1. 创建套接字</span><br><span class=\"line\">    tcp_server_socket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 绑定端口</span><br><span class=\"line\">    tcp_server_socket.bind((&quot;&quot;, 7890))</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 3. 变为监听套接字</span><br><span class=\"line\">    tcp_server_socket.listen(128)</span><br><span class=\"line\">    </span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        # 4. 等待新客户端的链接</span><br><span class=\"line\">        new_socket, client_addr &#x3D; tcp_server_socket.accept()</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 5. 为这个客户端服务</span><br><span class=\"line\">        service_client(new_socket)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 关闭监听套接字</span><br><span class=\"line\">    tcp_server_socket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TCP三次握手、四次挥手\"><a href=\"#TCP三次握手、四次挥手\" class=\"headerlink\" title=\"TCP三次握手、四次挥手\"></a>TCP三次握手、四次挥手</h4>"},{"title":"并发web服务器python实现","date":"2020-03-06T06:14:46.717Z","comments":1,"_content":"\n\n#### 单进程、单线程、非阻塞实现监听多个套接字\n```python\nimport socket\nimport time\n\ntcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 创建套接字\ntcp_server_tcp.bind(\"\",7890)    # 绑定端口\ntcp_server_tcp.listen()     # 设为监听模式\ntcp_server_tcp.setblocking(False)   # 设置套接字为非堵塞\n\nclient_socket_list = list()\n\nwhile True:\n    time.sleep(0.5)\n\n    try:\n        new_socket, new_addr = tcp_server_tcp.accept()\n    except Exception as ret:\n        print(\"---没有新的客户端到来---\")\n    else:\n        print(\"---只要没有产生异常，那么也就意味着 来了一个新的客户端---\")\n        new_socket.setblocking(False)  # 设置套接字为非堵塞\n        client_socket_list.append(new_socket)\n        \n    for client_socket in client_socket_list:\n        try:\n            client_socket.recv(1024)    \n        except Exception as ret:\n            print(\"---这个客户端没有发送过来数据---\")\n        else:\n            if recv_data:\n                # 对方发送过来数据\n                print(\"---客户端发送过来了数据---\")\n            else:\n                # 对方调用close recv_data返回值为空\n                client_socket_list.remove(client_socket)\n                client_socket.close()\n                print(\"客户端已经关闭。\")\n```\n\n#### 短连接 和 长连接\n**长连接：** 一个套接字获取多次数据\n**短连接：** 一个套接字只能获取一次数据\n\nHTTP/1.0 是短连接\nHTTP/1.1 是长连接\n\n```\nimport socket\nimport re\n\ndef service_client(new_socket, request):\n    '''为这个客户端返回数据'''\n    # 1. 处理浏览器发送过来的数据\n    request_lines = requests.splitlines()\n    print(\"\")\n    print(\">\"*20)\n    print(request_lines)\n    \n    file_name = \"\"\n    ret = re.match(r\"[^/]+(/[^ ]*)\",request_lines[0])\n    if ret:\n        file_name = ret.group()\n        if file_name == \"/\":\n            file_name = \"/index.html\"\n    \n    # 2. 返回http格式的数据，给浏览器\n    \n    try:\n        f = open(\"./html\" + file_name, \"rb\")\n    except:\n        response = 'HTTP/1.1 404 NOT FOUND\\r\\n' \n        response += '\\r\\n' \n        response += '------file not found------'\n        new_socket.send(response.encode('utf-8'))\n    else:\n        html_content = f.read()\n        f.close()\n\n        response_body = html_content\n        \n        response_header = 'HTTP/1.1 200 OK\\r\\n'\n        response_header += 'Content-Length:%d\\r\\n' % len(response_body)\n        response_header += '\\r\\n'\n\n        response = response_header.encode('utf-8') + response_body\n        \n        new_socket.send(response)\n\ndef main():\n    '''用来完成整体的控制'''\n    # 1. 创建套接字\n    tcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    \n    # 2. 绑定\n    tcp_server_socket.bind((\"\", 7890))\n    \n    # 3. 变为监听套接字\n    tcp_server_socket.listen(128)\n    tcp_server_socket.setblocking(False)  # 设为非阻塞\n    \n    # --------------\n    # 创建一个epoll对象\n    epl = select.epoll()\n    \n    # 将监听套接字对应的文件描述符fd注册到epoll中\n    epl.register(tcp_server_socket.fileno(), select.EPOLLIN)\n    # --------------\n    client_socket_list = list()\n    while True:\n        # 4. 等待新客户端的链接\n        try:\n            new_socket, client_addr = tcp_server_socket.accept()\n        except Exception as ret:\n            pass\n        else:\n            new_socket.setblocking(False)\n            client_socket_list.append(new_socket)\n            \n        for client_socket in client_socket_list:\n            try:\n                recv_data = client_socket.recv(1024).decode('utf-8')\n            except Exception as ret:\n                pass\n            else:\n                if recv_data:\n                    service_client(client_socket, recv_data)\n                else:\n                    client_socket.close()\n                    client_socket_list.remove(client_socket)\n        \n        # 关闭套接字\n        tcp_server_socket.close()\n```\n#### epoll \n单进程单线程多任务 由应用程序采用轮询实现\nepoll是事件通知类型，由内核实现\n","source":"_posts/04-并发web服务器实现.md","raw":"---\ntitle: 并发web服务器python实现\ndate: {{ date }}\ntags: python\ncategories:\ncomments: true\n---\n\n\n#### 单进程、单线程、非阻塞实现监听多个套接字\n```python\nimport socket\nimport time\n\ntcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 创建套接字\ntcp_server_tcp.bind(\"\",7890)    # 绑定端口\ntcp_server_tcp.listen()     # 设为监听模式\ntcp_server_tcp.setblocking(False)   # 设置套接字为非堵塞\n\nclient_socket_list = list()\n\nwhile True:\n    time.sleep(0.5)\n\n    try:\n        new_socket, new_addr = tcp_server_tcp.accept()\n    except Exception as ret:\n        print(\"---没有新的客户端到来---\")\n    else:\n        print(\"---只要没有产生异常，那么也就意味着 来了一个新的客户端---\")\n        new_socket.setblocking(False)  # 设置套接字为非堵塞\n        client_socket_list.append(new_socket)\n        \n    for client_socket in client_socket_list:\n        try:\n            client_socket.recv(1024)    \n        except Exception as ret:\n            print(\"---这个客户端没有发送过来数据---\")\n        else:\n            if recv_data:\n                # 对方发送过来数据\n                print(\"---客户端发送过来了数据---\")\n            else:\n                # 对方调用close recv_data返回值为空\n                client_socket_list.remove(client_socket)\n                client_socket.close()\n                print(\"客户端已经关闭。\")\n```\n\n#### 短连接 和 长连接\n**长连接：** 一个套接字获取多次数据\n**短连接：** 一个套接字只能获取一次数据\n\nHTTP/1.0 是短连接\nHTTP/1.1 是长连接\n\n```\nimport socket\nimport re\n\ndef service_client(new_socket, request):\n    '''为这个客户端返回数据'''\n    # 1. 处理浏览器发送过来的数据\n    request_lines = requests.splitlines()\n    print(\"\")\n    print(\">\"*20)\n    print(request_lines)\n    \n    file_name = \"\"\n    ret = re.match(r\"[^/]+(/[^ ]*)\",request_lines[0])\n    if ret:\n        file_name = ret.group()\n        if file_name == \"/\":\n            file_name = \"/index.html\"\n    \n    # 2. 返回http格式的数据，给浏览器\n    \n    try:\n        f = open(\"./html\" + file_name, \"rb\")\n    except:\n        response = 'HTTP/1.1 404 NOT FOUND\\r\\n' \n        response += '\\r\\n' \n        response += '------file not found------'\n        new_socket.send(response.encode('utf-8'))\n    else:\n        html_content = f.read()\n        f.close()\n\n        response_body = html_content\n        \n        response_header = 'HTTP/1.1 200 OK\\r\\n'\n        response_header += 'Content-Length:%d\\r\\n' % len(response_body)\n        response_header += '\\r\\n'\n\n        response = response_header.encode('utf-8') + response_body\n        \n        new_socket.send(response)\n\ndef main():\n    '''用来完成整体的控制'''\n    # 1. 创建套接字\n    tcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    \n    # 2. 绑定\n    tcp_server_socket.bind((\"\", 7890))\n    \n    # 3. 变为监听套接字\n    tcp_server_socket.listen(128)\n    tcp_server_socket.setblocking(False)  # 设为非阻塞\n    \n    # --------------\n    # 创建一个epoll对象\n    epl = select.epoll()\n    \n    # 将监听套接字对应的文件描述符fd注册到epoll中\n    epl.register(tcp_server_socket.fileno(), select.EPOLLIN)\n    # --------------\n    client_socket_list = list()\n    while True:\n        # 4. 等待新客户端的链接\n        try:\n            new_socket, client_addr = tcp_server_socket.accept()\n        except Exception as ret:\n            pass\n        else:\n            new_socket.setblocking(False)\n            client_socket_list.append(new_socket)\n            \n        for client_socket in client_socket_list:\n            try:\n                recv_data = client_socket.recv(1024).decode('utf-8')\n            except Exception as ret:\n                pass\n            else:\n                if recv_data:\n                    service_client(client_socket, recv_data)\n                else:\n                    client_socket.close()\n                    client_socket_list.remove(client_socket)\n        \n        # 关闭套接字\n        tcp_server_socket.close()\n```\n#### epoll \n单进程单线程多任务 由应用程序采用轮询实现\nepoll是事件通知类型，由内核实现\n","slug":"04-并发web服务器实现","published":1,"updated":"2020-03-06T06:14:46.717Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0ww0007k859cpv27sv9","content":"<h4 id=\"单进程、单线程、非阻塞实现监听多个套接字\"><a href=\"#单进程、单线程、非阻塞实现监听多个套接字\" class=\"headerlink\" title=\"单进程、单线程、非阻塞实现监听多个套接字\"></a>单进程、单线程、非阻塞实现监听多个套接字</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">tcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class=\"comment\"># 创建套接字</span></span><br><span class=\"line\">tcp_server_tcp.bind(<span class=\"string\">\"\"</span>,<span class=\"number\">7890</span>)    <span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\">tcp_server_tcp.listen()     <span class=\"comment\"># 设为监听模式</span></span><br><span class=\"line\">tcp_server_tcp.setblocking(<span class=\"literal\">False</span>)   <span class=\"comment\"># 设置套接字为非堵塞</span></span><br><span class=\"line\"></span><br><span class=\"line\">client_socket_list = list()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        new_socket, new_addr = tcp_server_tcp.accept()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> ret:</span><br><span class=\"line\">        print(<span class=\"string\">\"---没有新的客户端到来---\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"---只要没有产生异常，那么也就意味着 来了一个新的客户端---\"</span>)</span><br><span class=\"line\">        new_socket.setblocking(<span class=\"literal\">False</span>)  <span class=\"comment\"># 设置套接字为非堵塞</span></span><br><span class=\"line\">        client_socket_list.append(new_socket)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span> client_socket <span class=\"keyword\">in</span> client_socket_list:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            client_socket.recv(<span class=\"number\">1024</span>)    </span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> ret:</span><br><span class=\"line\">            print(<span class=\"string\">\"---这个客户端没有发送过来数据---\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> recv_data:</span><br><span class=\"line\">                <span class=\"comment\"># 对方发送过来数据</span></span><br><span class=\"line\">                print(<span class=\"string\">\"---客户端发送过来了数据---\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 对方调用close recv_data返回值为空</span></span><br><span class=\"line\">                client_socket_list.remove(client_socket)</span><br><span class=\"line\">                client_socket.close()</span><br><span class=\"line\">                print(<span class=\"string\">\"客户端已经关闭。\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"短连接-和-长连接\"><a href=\"#短连接-和-长连接\" class=\"headerlink\" title=\"短连接 和 长连接\"></a>短连接 和 长连接</h4><p><strong>长连接：</strong> 一个套接字获取多次数据<br><strong>短连接：</strong> 一个套接字只能获取一次数据</p>\n<p>HTTP/1.0 是短连接<br>HTTP/1.1 是长连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">def service_client(new_socket, request):</span><br><span class=\"line\">    &#39;&#39;&#39;为这个客户端返回数据&#39;&#39;&#39;</span><br><span class=\"line\">    # 1. 处理浏览器发送过来的数据</span><br><span class=\"line\">    request_lines &#x3D; requests.splitlines()</span><br><span class=\"line\">    print(&quot;&quot;)</span><br><span class=\"line\">    print(&quot;&gt;&quot;*20)</span><br><span class=\"line\">    print(request_lines)</span><br><span class=\"line\">    </span><br><span class=\"line\">    file_name &#x3D; &quot;&quot;</span><br><span class=\"line\">    ret &#x3D; re.match(r&quot;[^&#x2F;]+(&#x2F;[^ ]*)&quot;,request_lines[0])</span><br><span class=\"line\">    if ret:</span><br><span class=\"line\">        file_name &#x3D; ret.group()</span><br><span class=\"line\">        if file_name &#x3D;&#x3D; &quot;&#x2F;&quot;:</span><br><span class=\"line\">            file_name &#x3D; &quot;&#x2F;index.html&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 返回http格式的数据，给浏览器</span><br><span class=\"line\">    </span><br><span class=\"line\">    try:</span><br><span class=\"line\">        f &#x3D; open(&quot;.&#x2F;html&quot; + file_name, &quot;rb&quot;)</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        response &#x3D; &#39;HTTP&#x2F;1.1 404 NOT FOUND\\r\\n&#39; </span><br><span class=\"line\">        response +&#x3D; &#39;\\r\\n&#39; </span><br><span class=\"line\">        response +&#x3D; &#39;------file not found------&#39;</span><br><span class=\"line\">        new_socket.send(response.encode(&#39;utf-8&#39;))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        html_content &#x3D; f.read()</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">        response_body &#x3D; html_content</span><br><span class=\"line\">        </span><br><span class=\"line\">        response_header &#x3D; &#39;HTTP&#x2F;1.1 200 OK\\r\\n&#39;</span><br><span class=\"line\">        response_header +&#x3D; &#39;Content-Length:%d\\r\\n&#39; % len(response_body)</span><br><span class=\"line\">        response_header +&#x3D; &#39;\\r\\n&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">        response &#x3D; response_header.encode(&#39;utf-8&#39;) + response_body</span><br><span class=\"line\">        </span><br><span class=\"line\">        new_socket.send(response)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    &#39;&#39;&#39;用来完成整体的控制&#39;&#39;&#39;</span><br><span class=\"line\">    # 1. 创建套接字</span><br><span class=\"line\">    tcp_server_tcp &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 绑定</span><br><span class=\"line\">    tcp_server_socket.bind((&quot;&quot;, 7890))</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 3. 变为监听套接字</span><br><span class=\"line\">    tcp_server_socket.listen(128)</span><br><span class=\"line\">    tcp_server_socket.setblocking(False)  # 设为非阻塞</span><br><span class=\"line\">    </span><br><span class=\"line\">    # --------------</span><br><span class=\"line\">    # 创建一个epoll对象</span><br><span class=\"line\">    epl &#x3D; select.epoll()</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 将监听套接字对应的文件描述符fd注册到epoll中</span><br><span class=\"line\">    epl.register(tcp_server_socket.fileno(), select.EPOLLIN)</span><br><span class=\"line\">    # --------------</span><br><span class=\"line\">    client_socket_list &#x3D; list()</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        # 4. 等待新客户端的链接</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            new_socket, client_addr &#x3D; tcp_server_socket.accept()</span><br><span class=\"line\">        except Exception as ret:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            new_socket.setblocking(False)</span><br><span class=\"line\">            client_socket_list.append(new_socket)</span><br><span class=\"line\">            </span><br><span class=\"line\">        for client_socket in client_socket_list:</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                recv_data &#x3D; client_socket.recv(1024).decode(&#39;utf-8&#39;)</span><br><span class=\"line\">            except Exception as ret:</span><br><span class=\"line\">                pass</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                if recv_data:</span><br><span class=\"line\">                    service_client(client_socket, recv_data)</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    client_socket.close()</span><br><span class=\"line\">                    client_socket_list.remove(client_socket)</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 关闭套接字</span><br><span class=\"line\">        tcp_server_socket.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h4><p>单进程单线程多任务 由应用程序采用轮询实现<br>epoll是事件通知类型，由内核实现</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"单进程、单线程、非阻塞实现监听多个套接字\"><a href=\"#单进程、单线程、非阻塞实现监听多个套接字\" class=\"headerlink\" title=\"单进程、单线程、非阻塞实现监听多个套接字\"></a>单进程、单线程、非阻塞实现监听多个套接字</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">tcp_server_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  <span class=\"comment\"># 创建套接字</span></span><br><span class=\"line\">tcp_server_tcp.bind(<span class=\"string\">\"\"</span>,<span class=\"number\">7890</span>)    <span class=\"comment\"># 绑定端口</span></span><br><span class=\"line\">tcp_server_tcp.listen()     <span class=\"comment\"># 设为监听模式</span></span><br><span class=\"line\">tcp_server_tcp.setblocking(<span class=\"literal\">False</span>)   <span class=\"comment\"># 设置套接字为非堵塞</span></span><br><span class=\"line\"></span><br><span class=\"line\">client_socket_list = list()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        new_socket, new_addr = tcp_server_tcp.accept()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> ret:</span><br><span class=\"line\">        print(<span class=\"string\">\"---没有新的客户端到来---\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"---只要没有产生异常，那么也就意味着 来了一个新的客户端---\"</span>)</span><br><span class=\"line\">        new_socket.setblocking(<span class=\"literal\">False</span>)  <span class=\"comment\"># 设置套接字为非堵塞</span></span><br><span class=\"line\">        client_socket_list.append(new_socket)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span> client_socket <span class=\"keyword\">in</span> client_socket_list:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            client_socket.recv(<span class=\"number\">1024</span>)    </span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> ret:</span><br><span class=\"line\">            print(<span class=\"string\">\"---这个客户端没有发送过来数据---\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> recv_data:</span><br><span class=\"line\">                <span class=\"comment\"># 对方发送过来数据</span></span><br><span class=\"line\">                print(<span class=\"string\">\"---客户端发送过来了数据---\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 对方调用close recv_data返回值为空</span></span><br><span class=\"line\">                client_socket_list.remove(client_socket)</span><br><span class=\"line\">                client_socket.close()</span><br><span class=\"line\">                print(<span class=\"string\">\"客户端已经关闭。\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"短连接-和-长连接\"><a href=\"#短连接-和-长连接\" class=\"headerlink\" title=\"短连接 和 长连接\"></a>短连接 和 长连接</h4><p><strong>长连接：</strong> 一个套接字获取多次数据<br><strong>短连接：</strong> 一个套接字只能获取一次数据</p>\n<p>HTTP/1.0 是短连接<br>HTTP/1.1 是长连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">def service_client(new_socket, request):</span><br><span class=\"line\">    &#39;&#39;&#39;为这个客户端返回数据&#39;&#39;&#39;</span><br><span class=\"line\">    # 1. 处理浏览器发送过来的数据</span><br><span class=\"line\">    request_lines &#x3D; requests.splitlines()</span><br><span class=\"line\">    print(&quot;&quot;)</span><br><span class=\"line\">    print(&quot;&gt;&quot;*20)</span><br><span class=\"line\">    print(request_lines)</span><br><span class=\"line\">    </span><br><span class=\"line\">    file_name &#x3D; &quot;&quot;</span><br><span class=\"line\">    ret &#x3D; re.match(r&quot;[^&#x2F;]+(&#x2F;[^ ]*)&quot;,request_lines[0])</span><br><span class=\"line\">    if ret:</span><br><span class=\"line\">        file_name &#x3D; ret.group()</span><br><span class=\"line\">        if file_name &#x3D;&#x3D; &quot;&#x2F;&quot;:</span><br><span class=\"line\">            file_name &#x3D; &quot;&#x2F;index.html&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 返回http格式的数据，给浏览器</span><br><span class=\"line\">    </span><br><span class=\"line\">    try:</span><br><span class=\"line\">        f &#x3D; open(&quot;.&#x2F;html&quot; + file_name, &quot;rb&quot;)</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        response &#x3D; &#39;HTTP&#x2F;1.1 404 NOT FOUND\\r\\n&#39; </span><br><span class=\"line\">        response +&#x3D; &#39;\\r\\n&#39; </span><br><span class=\"line\">        response +&#x3D; &#39;------file not found------&#39;</span><br><span class=\"line\">        new_socket.send(response.encode(&#39;utf-8&#39;))</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        html_content &#x3D; f.read()</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">        response_body &#x3D; html_content</span><br><span class=\"line\">        </span><br><span class=\"line\">        response_header &#x3D; &#39;HTTP&#x2F;1.1 200 OK\\r\\n&#39;</span><br><span class=\"line\">        response_header +&#x3D; &#39;Content-Length:%d\\r\\n&#39; % len(response_body)</span><br><span class=\"line\">        response_header +&#x3D; &#39;\\r\\n&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">        response &#x3D; response_header.encode(&#39;utf-8&#39;) + response_body</span><br><span class=\"line\">        </span><br><span class=\"line\">        new_socket.send(response)</span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">    &#39;&#39;&#39;用来完成整体的控制&#39;&#39;&#39;</span><br><span class=\"line\">    # 1. 创建套接字</span><br><span class=\"line\">    tcp_server_tcp &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 绑定</span><br><span class=\"line\">    tcp_server_socket.bind((&quot;&quot;, 7890))</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 3. 变为监听套接字</span><br><span class=\"line\">    tcp_server_socket.listen(128)</span><br><span class=\"line\">    tcp_server_socket.setblocking(False)  # 设为非阻塞</span><br><span class=\"line\">    </span><br><span class=\"line\">    # --------------</span><br><span class=\"line\">    # 创建一个epoll对象</span><br><span class=\"line\">    epl &#x3D; select.epoll()</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 将监听套接字对应的文件描述符fd注册到epoll中</span><br><span class=\"line\">    epl.register(tcp_server_socket.fileno(), select.EPOLLIN)</span><br><span class=\"line\">    # --------------</span><br><span class=\"line\">    client_socket_list &#x3D; list()</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        # 4. 等待新客户端的链接</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            new_socket, client_addr &#x3D; tcp_server_socket.accept()</span><br><span class=\"line\">        except Exception as ret:</span><br><span class=\"line\">            pass</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            new_socket.setblocking(False)</span><br><span class=\"line\">            client_socket_list.append(new_socket)</span><br><span class=\"line\">            </span><br><span class=\"line\">        for client_socket in client_socket_list:</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                recv_data &#x3D; client_socket.recv(1024).decode(&#39;utf-8&#39;)</span><br><span class=\"line\">            except Exception as ret:</span><br><span class=\"line\">                pass</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                if recv_data:</span><br><span class=\"line\">                    service_client(client_socket, recv_data)</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    client_socket.close()</span><br><span class=\"line\">                    client_socket_list.remove(client_socket)</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 关闭套接字</span><br><span class=\"line\">        tcp_server_socket.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"epoll\"><a href=\"#epoll\" class=\"headerlink\" title=\"epoll\"></a>epoll</h4><p>单进程单线程多任务 由应用程序采用轮询实现<br>epoll是事件通知类型，由内核实现</p>\n"},{"title":"python进程","date":"2020-03-06T06:15:48.709Z","comments":1,"_content":"\n\n#### 进程和线程的区别\n\n```\nimport multiprocessing\n\ndef test()\n    pass\n\np1 = multiprocessing.Process(target=test)\n\np1.start()\n```\n\n**进程：**\n\n1. 程序运行起来就是进程  \n2. 是资源分配的单位\n3. 进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的执行效率\n\n**线程：**\n\n1. 线程是进程中执行具体操作的个体 \n2. 是任务调度的单位\n3. 线程运行开销小，但不利于资源的管理和保护，进程正相反\n4. 线程不能够独立执行，必须依存在进程中\n5. 可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人\n\n#### 通过队列完成进程间的通信\n\n队列：先进先出\n```\nfrom multiprocessing import Queue\n\n# 初始化一个Queue对象\nq=Queue(3)          # 最多可几收三条put信息\n\n# 往队列中放数据\nq.put('message1')   # 数据类型任意\nq.put('message2')\nq.put('message3')\nq.put('message4')   # 会阻塞，因为队列满了\n\n# 判断队列状态\nq.full()     # False 表示队列不满\nq.full()     # True 表示队列满了\nq.empty()    # False 表示队列不为空\nq.empty()    # True 表示队列为空\n\n# 从队列取数据\nq.get()             # 先进后出\nq.get_nowait()      # 不等待取数据\n\n```\n\n**作用：**\n通过队列解耦合，进程A下载数据，进程B处理数据，互不影响\n\n```\nimport multiprocessing\n\ndef download_from_web():\n    # 模拟从网上下载数据\n    data == [11, 22, 33, 44]\n\n    # 像队列中写入数据\n    from temp in data:\n        q.put()\n        \n    print(\"下载器已经下载完了数据并且存入到队列中。\")\n\n\ndef analysis_data():\n    '''数据处理'''\n    waitting_analysis_data = list()\n    # 从队列中取数据\n    while True:\n        data = q.get()\n        waitting_analysis_data.append(data)\n        \n        if q.empty():\n            break\n\n    # 模拟数据处理\n    print(waitting_analysis_data)\n\n\ndef main()\n    # 1. 创建一个队列\n    q = multiprocessing.Queue()\n    \n    # 2. 创建多个进程，将队列的应用当作实参进行传递到里面\n    p1 = multiprocessing.Process(target=download_from_web, args=(q,))\n    p2 = multiprocessing.Process(target=analysis_data， argd=(q,))\n\n    p1.start()\n    p2.start()\n    \nif __name__ == \"__main__\":\n    main()\n```\n\n#### 进程池Pool\n\n重复利用进程池中的进程\n进程数过多时，采用进程池减少进程的数量\n```\nfrom multiprocessing import Pool\n\npo = Pool(3)    # 定义一个进程池，最大进程数为3\npo.apply_async(worker,(1,))  #要调用的目标，(传递给目标的参数元组,))\npo.close()      # 关闭进程池\npo.jion()       # 等待po中所有子进程完成，必须放在close()前面\n```\n\n```\nfrom multiprocessing import Pool\nimport os, time, random\n\ndef worker(msg):\n    t_start = time.time()\n    print(\"%s开始执行，进程号为%d\" % (msg,os.getpid()))\n    # random.random() 随机生成0-1之间的浮点数\n    time.sleep(random.random()*2)\n    t_stop = time.time()\n    print(msg,\"执行完毕，好事%0.2f\" % (t_stop-t_start))\n    \npo = Pool(3)        # 定义一个进程池，最大进程数3\nfor i in range(0,10):\n    # Pool().apply_async(要调用的目标，(传递给目标的参数元组，))\n    # 每次循环将会用空闲出来的子进程去调用目标\n    po.apply_async(worker,(i,))\n    \nprint(\"----start----\")\npo.close()          # 关闭进程池，关闭后po不再接收新的请求\npo.join()           # 等待po中所有子进程执行完成，必须放在close语句之后\nprint(\"----end----\")\n```\n\n#### 案例 实现copy\n```\nimport multiprocessing\nimport os\n\ndef copy_file(q, file_name, old_folder_name, new_folder_name):\n    '''完成文件的复制'''\n    old_f = open(old_folder_name + \"/\" + file_name, \"rb\")\n    content = old_f.read()\n    old_f.close()\n    \n    new_f = open(new_folder_name + \"/\" + file_name, \"wb\")\n    content = new_f.write()\n    new_f.close()\n    \n    # 如果拷贝完了文件，那么就向队列中写入一个消息表示已经完成\n    q.put(file_name)\n    \ndef main():\n    # 1. 获取用户要copy的文件夹的名字\n    old_folder_name = input(\"请输入要copy的文件夹的名字：\")\n    \n    # 2. 创建一个新的文件夹\n    try:\n        new_folder_name = old_folder_name + \"[复件]\"\n        os.mkdir(new_folder_name)\n    except:\n        pass\n\n    # 3. 获取文件夹的所有的待copy的文件名字 listdir()\n    file_names = os.listdir(old_folder_name)\n    # print(file_names)\n    \n    # 4. 创建进程池 主进程负责往进程池添加 进程池负责拷贝\n    po = multiprocessing.Pool(5)\n    \n    # 5. 创建一个队列\n    q = multiprocessing.Manager().Queue()\n    \n    \n    # 6. 向进程池中添加copy文件的任务\n    for file_name in file_names:\n        po.apply_async(q, copy_file,args=(file_name, old_folder_name. new_folder_name)\n    # 进程池中的进程出错时不会抛出异常。\n    po.close()\n    # po.join()\n    all_file_num = len(file_names) # 所有文件的个数\n    copy_ok_num = 0\n    while True:\n        file_name = q.get()\n        # print(\"已经完成copy： %s\" % file_name)\n        copy_ok_num += 1\n        print(\"\\r拷贝的进度为：%.2f%%\" % (copy_on_num*100 // all_file_num),end=\"\")\n        if copy_ok_num >= all_file_num:\n            break\n        \n        print()\n        \n        \nif __name__ == \"__main__\":\n    main()\n```","source":"_posts/02-多任务-进程.md","raw":"---\ntitle: python进程\ndate: {{ date }}\ntags: python\ncategories:\ncomments: true\n---\n\n\n#### 进程和线程的区别\n\n```\nimport multiprocessing\n\ndef test()\n    pass\n\np1 = multiprocessing.Process(target=test)\n\np1.start()\n```\n\n**进程：**\n\n1. 程序运行起来就是进程  \n2. 是资源分配的单位\n3. 进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的执行效率\n\n**线程：**\n\n1. 线程是进程中执行具体操作的个体 \n2. 是任务调度的单位\n3. 线程运行开销小，但不利于资源的管理和保护，进程正相反\n4. 线程不能够独立执行，必须依存在进程中\n5. 可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人\n\n#### 通过队列完成进程间的通信\n\n队列：先进先出\n```\nfrom multiprocessing import Queue\n\n# 初始化一个Queue对象\nq=Queue(3)          # 最多可几收三条put信息\n\n# 往队列中放数据\nq.put('message1')   # 数据类型任意\nq.put('message2')\nq.put('message3')\nq.put('message4')   # 会阻塞，因为队列满了\n\n# 判断队列状态\nq.full()     # False 表示队列不满\nq.full()     # True 表示队列满了\nq.empty()    # False 表示队列不为空\nq.empty()    # True 表示队列为空\n\n# 从队列取数据\nq.get()             # 先进后出\nq.get_nowait()      # 不等待取数据\n\n```\n\n**作用：**\n通过队列解耦合，进程A下载数据，进程B处理数据，互不影响\n\n```\nimport multiprocessing\n\ndef download_from_web():\n    # 模拟从网上下载数据\n    data == [11, 22, 33, 44]\n\n    # 像队列中写入数据\n    from temp in data:\n        q.put()\n        \n    print(\"下载器已经下载完了数据并且存入到队列中。\")\n\n\ndef analysis_data():\n    '''数据处理'''\n    waitting_analysis_data = list()\n    # 从队列中取数据\n    while True:\n        data = q.get()\n        waitting_analysis_data.append(data)\n        \n        if q.empty():\n            break\n\n    # 模拟数据处理\n    print(waitting_analysis_data)\n\n\ndef main()\n    # 1. 创建一个队列\n    q = multiprocessing.Queue()\n    \n    # 2. 创建多个进程，将队列的应用当作实参进行传递到里面\n    p1 = multiprocessing.Process(target=download_from_web, args=(q,))\n    p2 = multiprocessing.Process(target=analysis_data， argd=(q,))\n\n    p1.start()\n    p2.start()\n    \nif __name__ == \"__main__\":\n    main()\n```\n\n#### 进程池Pool\n\n重复利用进程池中的进程\n进程数过多时，采用进程池减少进程的数量\n```\nfrom multiprocessing import Pool\n\npo = Pool(3)    # 定义一个进程池，最大进程数为3\npo.apply_async(worker,(1,))  #要调用的目标，(传递给目标的参数元组,))\npo.close()      # 关闭进程池\npo.jion()       # 等待po中所有子进程完成，必须放在close()前面\n```\n\n```\nfrom multiprocessing import Pool\nimport os, time, random\n\ndef worker(msg):\n    t_start = time.time()\n    print(\"%s开始执行，进程号为%d\" % (msg,os.getpid()))\n    # random.random() 随机生成0-1之间的浮点数\n    time.sleep(random.random()*2)\n    t_stop = time.time()\n    print(msg,\"执行完毕，好事%0.2f\" % (t_stop-t_start))\n    \npo = Pool(3)        # 定义一个进程池，最大进程数3\nfor i in range(0,10):\n    # Pool().apply_async(要调用的目标，(传递给目标的参数元组，))\n    # 每次循环将会用空闲出来的子进程去调用目标\n    po.apply_async(worker,(i,))\n    \nprint(\"----start----\")\npo.close()          # 关闭进程池，关闭后po不再接收新的请求\npo.join()           # 等待po中所有子进程执行完成，必须放在close语句之后\nprint(\"----end----\")\n```\n\n#### 案例 实现copy\n```\nimport multiprocessing\nimport os\n\ndef copy_file(q, file_name, old_folder_name, new_folder_name):\n    '''完成文件的复制'''\n    old_f = open(old_folder_name + \"/\" + file_name, \"rb\")\n    content = old_f.read()\n    old_f.close()\n    \n    new_f = open(new_folder_name + \"/\" + file_name, \"wb\")\n    content = new_f.write()\n    new_f.close()\n    \n    # 如果拷贝完了文件，那么就向队列中写入一个消息表示已经完成\n    q.put(file_name)\n    \ndef main():\n    # 1. 获取用户要copy的文件夹的名字\n    old_folder_name = input(\"请输入要copy的文件夹的名字：\")\n    \n    # 2. 创建一个新的文件夹\n    try:\n        new_folder_name = old_folder_name + \"[复件]\"\n        os.mkdir(new_folder_name)\n    except:\n        pass\n\n    # 3. 获取文件夹的所有的待copy的文件名字 listdir()\n    file_names = os.listdir(old_folder_name)\n    # print(file_names)\n    \n    # 4. 创建进程池 主进程负责往进程池添加 进程池负责拷贝\n    po = multiprocessing.Pool(5)\n    \n    # 5. 创建一个队列\n    q = multiprocessing.Manager().Queue()\n    \n    \n    # 6. 向进程池中添加copy文件的任务\n    for file_name in file_names:\n        po.apply_async(q, copy_file,args=(file_name, old_folder_name. new_folder_name)\n    # 进程池中的进程出错时不会抛出异常。\n    po.close()\n    # po.join()\n    all_file_num = len(file_names) # 所有文件的个数\n    copy_ok_num = 0\n    while True:\n        file_name = q.get()\n        # print(\"已经完成copy： %s\" % file_name)\n        copy_ok_num += 1\n        print(\"\\r拷贝的进度为：%.2f%%\" % (copy_on_num*100 // all_file_num),end=\"\")\n        if copy_ok_num >= all_file_num:\n            break\n        \n        print()\n        \n        \nif __name__ == \"__main__\":\n    main()\n```","slug":"02-多任务-进程","published":1,"updated":"2020-03-06T06:15:48.709Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0wx0008k8596nqwguip","content":"<h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\">def test()</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">p1 &#x3D; multiprocessing.Process(target&#x3D;test)</span><br><span class=\"line\"></span><br><span class=\"line\">p1.start()</span><br></pre></td></tr></table></figure>\n\n<p><strong>进程：</strong></p>\n<ol>\n<li>程序运行起来就是进程  </li>\n<li>是资源分配的单位</li>\n<li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的执行效率</li>\n</ol>\n<p><strong>线程：</strong></p>\n<ol>\n<li>线程是进程中执行具体操作的个体 </li>\n<li>是任务调度的单位</li>\n<li>线程运行开销小，但不利于资源的管理和保护，进程正相反</li>\n<li>线程不能够独立执行，必须依存在进程中</li>\n<li>可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人</li>\n</ol>\n<h4 id=\"通过队列完成进程间的通信\"><a href=\"#通过队列完成进程间的通信\" class=\"headerlink\" title=\"通过队列完成进程间的通信\"></a>通过队列完成进程间的通信</h4><p>队列：先进先出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from multiprocessing import Queue</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一个Queue对象</span><br><span class=\"line\">q&#x3D;Queue(3)          # 最多可几收三条put信息</span><br><span class=\"line\"></span><br><span class=\"line\"># 往队列中放数据</span><br><span class=\"line\">q.put(&#39;message1&#39;)   # 数据类型任意</span><br><span class=\"line\">q.put(&#39;message2&#39;)</span><br><span class=\"line\">q.put(&#39;message3&#39;)</span><br><span class=\"line\">q.put(&#39;message4&#39;)   # 会阻塞，因为队列满了</span><br><span class=\"line\"></span><br><span class=\"line\"># 判断队列状态</span><br><span class=\"line\">q.full()     # False 表示队列不满</span><br><span class=\"line\">q.full()     # True 表示队列满了</span><br><span class=\"line\">q.empty()    # False 表示队列不为空</span><br><span class=\"line\">q.empty()    # True 表示队列为空</span><br><span class=\"line\"></span><br><span class=\"line\"># 从队列取数据</span><br><span class=\"line\">q.get()             # 先进后出</span><br><span class=\"line\">q.get_nowait()      # 不等待取数据</span><br></pre></td></tr></table></figure>\n\n<p><strong>作用：</strong><br>通过队列解耦合，进程A下载数据，进程B处理数据，互不影响</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\">def download_from_web():</span><br><span class=\"line\">    # 模拟从网上下载数据</span><br><span class=\"line\">    data &#x3D;&#x3D; [11, 22, 33, 44]</span><br><span class=\"line\"></span><br><span class=\"line\">    # 像队列中写入数据</span><br><span class=\"line\">    from temp in data:</span><br><span class=\"line\">        q.put()</span><br><span class=\"line\">        </span><br><span class=\"line\">    print(&quot;下载器已经下载完了数据并且存入到队列中。&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def analysis_data():</span><br><span class=\"line\">    &#39;&#39;&#39;数据处理&#39;&#39;&#39;</span><br><span class=\"line\">    waitting_analysis_data &#x3D; list()</span><br><span class=\"line\">    # 从队列中取数据</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        data &#x3D; q.get()</span><br><span class=\"line\">        waitting_analysis_data.append(data)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if q.empty():</span><br><span class=\"line\">            break</span><br><span class=\"line\"></span><br><span class=\"line\">    # 模拟数据处理</span><br><span class=\"line\">    print(waitting_analysis_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main()</span><br><span class=\"line\">    # 1. 创建一个队列</span><br><span class=\"line\">    q &#x3D; multiprocessing.Queue()</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 创建多个进程，将队列的应用当作实参进行传递到里面</span><br><span class=\"line\">    p1 &#x3D; multiprocessing.Process(target&#x3D;download_from_web, args&#x3D;(q,))</span><br><span class=\"line\">    p2 &#x3D; multiprocessing.Process(target&#x3D;analysis_data， argd&#x3D;(q,))</span><br><span class=\"line\"></span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进程池Pool\"><a href=\"#进程池Pool\" class=\"headerlink\" title=\"进程池Pool\"></a>进程池Pool</h4><p>重复利用进程池中的进程<br>进程数过多时，采用进程池减少进程的数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\"></span><br><span class=\"line\">po &#x3D; Pool(3)    # 定义一个进程池，最大进程数为3</span><br><span class=\"line\">po.apply_async(worker,(1,))  #要调用的目标，(传递给目标的参数元组,))</span><br><span class=\"line\">po.close()      # 关闭进程池</span><br><span class=\"line\">po.jion()       # 等待po中所有子进程完成，必须放在close()前面</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\">import os, time, random</span><br><span class=\"line\"></span><br><span class=\"line\">def worker(msg):</span><br><span class=\"line\">    t_start &#x3D; time.time()</span><br><span class=\"line\">    print(&quot;%s开始执行，进程号为%d&quot; % (msg,os.getpid()))</span><br><span class=\"line\">    # random.random() 随机生成0-1之间的浮点数</span><br><span class=\"line\">    time.sleep(random.random()*2)</span><br><span class=\"line\">    t_stop &#x3D; time.time()</span><br><span class=\"line\">    print(msg,&quot;执行完毕，好事%0.2f&quot; % (t_stop-t_start))</span><br><span class=\"line\">    </span><br><span class=\"line\">po &#x3D; Pool(3)        # 定义一个进程池，最大进程数3</span><br><span class=\"line\">for i in range(0,10):</span><br><span class=\"line\">    # Pool().apply_async(要调用的目标，(传递给目标的参数元组，))</span><br><span class=\"line\">    # 每次循环将会用空闲出来的子进程去调用目标</span><br><span class=\"line\">    po.apply_async(worker,(i,))</span><br><span class=\"line\">    </span><br><span class=\"line\">print(&quot;----start----&quot;)</span><br><span class=\"line\">po.close()          # 关闭进程池，关闭后po不再接收新的请求</span><br><span class=\"line\">po.join()           # 等待po中所有子进程执行完成，必须放在close语句之后</span><br><span class=\"line\">print(&quot;----end----&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"案例-实现copy\"><a href=\"#案例-实现copy\" class=\"headerlink\" title=\"案例 实现copy\"></a>案例 实现copy</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">def copy_file(q, file_name, old_folder_name, new_folder_name):</span><br><span class=\"line\">    &#39;&#39;&#39;完成文件的复制&#39;&#39;&#39;</span><br><span class=\"line\">    old_f &#x3D; open(old_folder_name + &quot;&#x2F;&quot; + file_name, &quot;rb&quot;)</span><br><span class=\"line\">    content &#x3D; old_f.read()</span><br><span class=\"line\">    old_f.close()</span><br><span class=\"line\">    </span><br><span class=\"line\">    new_f &#x3D; open(new_folder_name + &quot;&#x2F;&quot; + file_name, &quot;wb&quot;)</span><br><span class=\"line\">    content &#x3D; new_f.write()</span><br><span class=\"line\">    new_f.close()</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 如果拷贝完了文件，那么就向队列中写入一个消息表示已经完成</span><br><span class=\"line\">    q.put(file_name)</span><br><span class=\"line\">    </span><br><span class=\"line\">def main():</span><br><span class=\"line\">    # 1. 获取用户要copy的文件夹的名字</span><br><span class=\"line\">    old_folder_name &#x3D; input(&quot;请输入要copy的文件夹的名字：&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 创建一个新的文件夹</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        new_folder_name &#x3D; old_folder_name + &quot;[复件]&quot;</span><br><span class=\"line\">        os.mkdir(new_folder_name)</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    # 3. 获取文件夹的所有的待copy的文件名字 listdir()</span><br><span class=\"line\">    file_names &#x3D; os.listdir(old_folder_name)</span><br><span class=\"line\">    # print(file_names)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 4. 创建进程池 主进程负责往进程池添加 进程池负责拷贝</span><br><span class=\"line\">    po &#x3D; multiprocessing.Pool(5)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 5. 创建一个队列</span><br><span class=\"line\">    q &#x3D; multiprocessing.Manager().Queue()</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    # 6. 向进程池中添加copy文件的任务</span><br><span class=\"line\">    for file_name in file_names:</span><br><span class=\"line\">        po.apply_async(q, copy_file,args&#x3D;(file_name, old_folder_name. new_folder_name)</span><br><span class=\"line\">    # 进程池中的进程出错时不会抛出异常。</span><br><span class=\"line\">    po.close()</span><br><span class=\"line\">    # po.join()</span><br><span class=\"line\">    all_file_num &#x3D; len(file_names) # 所有文件的个数</span><br><span class=\"line\">    copy_ok_num &#x3D; 0</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        file_name &#x3D; q.get()</span><br><span class=\"line\">        # print(&quot;已经完成copy： %s&quot; % file_name)</span><br><span class=\"line\">        copy_ok_num +&#x3D; 1</span><br><span class=\"line\">        print(&quot;\\r拷贝的进度为：%.2f%%&quot; % (copy_on_num*100 &#x2F;&#x2F; all_file_num),end&#x3D;&quot;&quot;)</span><br><span class=\"line\">        if copy_ok_num &gt;&#x3D; all_file_num:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        </span><br><span class=\"line\">        print()</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"进程和线程的区别\"><a href=\"#进程和线程的区别\" class=\"headerlink\" title=\"进程和线程的区别\"></a>进程和线程的区别</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\">def test()</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">p1 &#x3D; multiprocessing.Process(target&#x3D;test)</span><br><span class=\"line\"></span><br><span class=\"line\">p1.start()</span><br></pre></td></tr></table></figure>\n\n<p><strong>进程：</strong></p>\n<ol>\n<li>程序运行起来就是进程  </li>\n<li>是资源分配的单位</li>\n<li>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的执行效率</li>\n</ol>\n<p><strong>线程：</strong></p>\n<ol>\n<li>线程是进程中执行具体操作的个体 </li>\n<li>是任务调度的单位</li>\n<li>线程运行开销小，但不利于资源的管理和保护，进程正相反</li>\n<li>线程不能够独立执行，必须依存在进程中</li>\n<li>可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人</li>\n</ol>\n<h4 id=\"通过队列完成进程间的通信\"><a href=\"#通过队列完成进程间的通信\" class=\"headerlink\" title=\"通过队列完成进程间的通信\"></a>通过队列完成进程间的通信</h4><p>队列：先进先出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from multiprocessing import Queue</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一个Queue对象</span><br><span class=\"line\">q&#x3D;Queue(3)          # 最多可几收三条put信息</span><br><span class=\"line\"></span><br><span class=\"line\"># 往队列中放数据</span><br><span class=\"line\">q.put(&#39;message1&#39;)   # 数据类型任意</span><br><span class=\"line\">q.put(&#39;message2&#39;)</span><br><span class=\"line\">q.put(&#39;message3&#39;)</span><br><span class=\"line\">q.put(&#39;message4&#39;)   # 会阻塞，因为队列满了</span><br><span class=\"line\"></span><br><span class=\"line\"># 判断队列状态</span><br><span class=\"line\">q.full()     # False 表示队列不满</span><br><span class=\"line\">q.full()     # True 表示队列满了</span><br><span class=\"line\">q.empty()    # False 表示队列不为空</span><br><span class=\"line\">q.empty()    # True 表示队列为空</span><br><span class=\"line\"></span><br><span class=\"line\"># 从队列取数据</span><br><span class=\"line\">q.get()             # 先进后出</span><br><span class=\"line\">q.get_nowait()      # 不等待取数据</span><br></pre></td></tr></table></figure>\n\n<p><strong>作用：</strong><br>通过队列解耦合，进程A下载数据，进程B处理数据，互不影响</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\">def download_from_web():</span><br><span class=\"line\">    # 模拟从网上下载数据</span><br><span class=\"line\">    data &#x3D;&#x3D; [11, 22, 33, 44]</span><br><span class=\"line\"></span><br><span class=\"line\">    # 像队列中写入数据</span><br><span class=\"line\">    from temp in data:</span><br><span class=\"line\">        q.put()</span><br><span class=\"line\">        </span><br><span class=\"line\">    print(&quot;下载器已经下载完了数据并且存入到队列中。&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def analysis_data():</span><br><span class=\"line\">    &#39;&#39;&#39;数据处理&#39;&#39;&#39;</span><br><span class=\"line\">    waitting_analysis_data &#x3D; list()</span><br><span class=\"line\">    # 从队列中取数据</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        data &#x3D; q.get()</span><br><span class=\"line\">        waitting_analysis_data.append(data)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if q.empty():</span><br><span class=\"line\">            break</span><br><span class=\"line\"></span><br><span class=\"line\">    # 模拟数据处理</span><br><span class=\"line\">    print(waitting_analysis_data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main()</span><br><span class=\"line\">    # 1. 创建一个队列</span><br><span class=\"line\">    q &#x3D; multiprocessing.Queue()</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 创建多个进程，将队列的应用当作实参进行传递到里面</span><br><span class=\"line\">    p1 &#x3D; multiprocessing.Process(target&#x3D;download_from_web, args&#x3D;(q,))</span><br><span class=\"line\">    p2 &#x3D; multiprocessing.Process(target&#x3D;analysis_data， argd&#x3D;(q,))</span><br><span class=\"line\"></span><br><span class=\"line\">    p1.start()</span><br><span class=\"line\">    p2.start()</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进程池Pool\"><a href=\"#进程池Pool\" class=\"headerlink\" title=\"进程池Pool\"></a>进程池Pool</h4><p>重复利用进程池中的进程<br>进程数过多时，采用进程池减少进程的数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\"></span><br><span class=\"line\">po &#x3D; Pool(3)    # 定义一个进程池，最大进程数为3</span><br><span class=\"line\">po.apply_async(worker,(1,))  #要调用的目标，(传递给目标的参数元组,))</span><br><span class=\"line\">po.close()      # 关闭进程池</span><br><span class=\"line\">po.jion()       # 等待po中所有子进程完成，必须放在close()前面</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\">import os, time, random</span><br><span class=\"line\"></span><br><span class=\"line\">def worker(msg):</span><br><span class=\"line\">    t_start &#x3D; time.time()</span><br><span class=\"line\">    print(&quot;%s开始执行，进程号为%d&quot; % (msg,os.getpid()))</span><br><span class=\"line\">    # random.random() 随机生成0-1之间的浮点数</span><br><span class=\"line\">    time.sleep(random.random()*2)</span><br><span class=\"line\">    t_stop &#x3D; time.time()</span><br><span class=\"line\">    print(msg,&quot;执行完毕，好事%0.2f&quot; % (t_stop-t_start))</span><br><span class=\"line\">    </span><br><span class=\"line\">po &#x3D; Pool(3)        # 定义一个进程池，最大进程数3</span><br><span class=\"line\">for i in range(0,10):</span><br><span class=\"line\">    # Pool().apply_async(要调用的目标，(传递给目标的参数元组，))</span><br><span class=\"line\">    # 每次循环将会用空闲出来的子进程去调用目标</span><br><span class=\"line\">    po.apply_async(worker,(i,))</span><br><span class=\"line\">    </span><br><span class=\"line\">print(&quot;----start----&quot;)</span><br><span class=\"line\">po.close()          # 关闭进程池，关闭后po不再接收新的请求</span><br><span class=\"line\">po.join()           # 等待po中所有子进程执行完成，必须放在close语句之后</span><br><span class=\"line\">print(&quot;----end----&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"案例-实现copy\"><a href=\"#案例-实现copy\" class=\"headerlink\" title=\"案例 实现copy\"></a>案例 实现copy</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\">def copy_file(q, file_name, old_folder_name, new_folder_name):</span><br><span class=\"line\">    &#39;&#39;&#39;完成文件的复制&#39;&#39;&#39;</span><br><span class=\"line\">    old_f &#x3D; open(old_folder_name + &quot;&#x2F;&quot; + file_name, &quot;rb&quot;)</span><br><span class=\"line\">    content &#x3D; old_f.read()</span><br><span class=\"line\">    old_f.close()</span><br><span class=\"line\">    </span><br><span class=\"line\">    new_f &#x3D; open(new_folder_name + &quot;&#x2F;&quot; + file_name, &quot;wb&quot;)</span><br><span class=\"line\">    content &#x3D; new_f.write()</span><br><span class=\"line\">    new_f.close()</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 如果拷贝完了文件，那么就向队列中写入一个消息表示已经完成</span><br><span class=\"line\">    q.put(file_name)</span><br><span class=\"line\">    </span><br><span class=\"line\">def main():</span><br><span class=\"line\">    # 1. 获取用户要copy的文件夹的名字</span><br><span class=\"line\">    old_folder_name &#x3D; input(&quot;请输入要copy的文件夹的名字：&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 2. 创建一个新的文件夹</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        new_folder_name &#x3D; old_folder_name + &quot;[复件]&quot;</span><br><span class=\"line\">        os.mkdir(new_folder_name)</span><br><span class=\"line\">    except:</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    # 3. 获取文件夹的所有的待copy的文件名字 listdir()</span><br><span class=\"line\">    file_names &#x3D; os.listdir(old_folder_name)</span><br><span class=\"line\">    # print(file_names)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 4. 创建进程池 主进程负责往进程池添加 进程池负责拷贝</span><br><span class=\"line\">    po &#x3D; multiprocessing.Pool(5)</span><br><span class=\"line\">    </span><br><span class=\"line\">    # 5. 创建一个队列</span><br><span class=\"line\">    q &#x3D; multiprocessing.Manager().Queue()</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    # 6. 向进程池中添加copy文件的任务</span><br><span class=\"line\">    for file_name in file_names:</span><br><span class=\"line\">        po.apply_async(q, copy_file,args&#x3D;(file_name, old_folder_name. new_folder_name)</span><br><span class=\"line\">    # 进程池中的进程出错时不会抛出异常。</span><br><span class=\"line\">    po.close()</span><br><span class=\"line\">    # po.join()</span><br><span class=\"line\">    all_file_num &#x3D; len(file_names) # 所有文件的个数</span><br><span class=\"line\">    copy_ok_num &#x3D; 0</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        file_name &#x3D; q.get()</span><br><span class=\"line\">        # print(&quot;已经完成copy： %s&quot; % file_name)</span><br><span class=\"line\">        copy_ok_num +&#x3D; 1</span><br><span class=\"line\">        print(&quot;\\r拷贝的进度为：%.2f%%&quot; % (copy_on_num*100 &#x2F;&#x2F; all_file_num),end&#x3D;&quot;&quot;)</span><br><span class=\"line\">        if copy_ok_num &gt;&#x3D; all_file_num:</span><br><span class=\"line\">            break</span><br><span class=\"line\">        </span><br><span class=\"line\">        print()</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>"},{"title":"gitee折腾记录","date":"2020-03-06T06:17:18.870Z","comments":1,"_content":"\n# gitee.com 介绍\n\n码云(gitee.com) 代码托管·协作开发平台，开发者近 400 万，托管项目超过 600 万，汇聚几乎所有本土原创开源项目，并于 2016 年推出企业版，提供企业级代码托管服务，成为开发领域领先的 SaaS 服务提供商。\n\n# 1. 注册 gitee.com 账户\n\n> 打开 [gitee官网](https://gitee.com/)， 注册账号并登录\n\n# 2. 创建仓库\n> 创建仓库 ![](https://pic.downk.cc/item/5e60e39498271cb2b8b33976.jpg)\n\n> 键入仓库信息 ![](https://pic.downk.cc/item/5e60e41598271cb2b8b378d9.jpg)\n\n- 仓库名称：任意\n- 归属/路径：保持默认即可\n- 仓库介绍：非必填\n- 是否开源：\n    - 私有：拉取代码需要验证用户名和密码\n    - 公开：任何人无需验证身份即可直接拉取代码\n- 选择语言：项目代码的语言\n- 添加.gitignore: 该文件用于指定上传代码时不包含项目内的某些文件，譬如包含密码的文件、缓存、项目环境、日志等无用文件，\n- [ ] 使用Readme 文件初始化这个仓库：用于介绍项目的文件，建议使用\n- [ ] 使用Issue 模板文件初始化这个仓库：初次配置可忽略\n- [ ] 使用Pull Request模板文件初始化这个仓库：初次配置可忽略\n- 选择分支模型：初始化仓库时默认只有一个master分支，根据需要设定\n\n> 点击![](https://pic.downk.cc/item/5e60e7c098271cb2b8b5272d.jpg)\n\n> 仓库首页 ![](https://pic.downk.cc/item/5e60e98198271cb2b8b60b38.jpg)\n\n# 3. 创建本地仓库/拉取远程仓库\n\n\n## 3.1 创建本地仓库\n\n> 在bash环境下操作\n\n```bash\n# 创建目录并切换到该目录\n$ mkdir local_repo && cd local_repo\n\n# 初始化仓库\n$ git init\n```\n\n## 3.2 拉取远程仓库\n\n> 获取远程仓库链接\n\n![](https://pic.downk.cc/item/5e60ea9a98271cb2b8b6bf3b.jpg)\n\n> 拉取代码\n\n```bash\n# 拉取远程仓库到本地目录learn_git\n$ git clone https://gitee.com/daydaychen/learn_git.git learn_git\nCloning into 'learn_git'...\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (4/4), done.\nChecking connectivity... done. \n```\n\n# 4. 跟踪文件/取消跟踪\n\n> \n\n```bash\n# 当前目录下有两个文件\ndayday:learn_git$ ls\ntotal 8.0K\n-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md\n-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md\n\n# 新建文件\n$ echo \"hello world\" > day1_work.md\n\n# 查看工作区状态\ndayday:learn_git$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files: # <-- 有以下文件未跟踪\n  (use \"git add <file>...\" to include in what will be committed)\n\n        day1_work.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n# 跟踪day1_work.md\n$ git add day1_work.md\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed: # <-- 有以下文件已修改未提交\n  (use \"git reset HEAD <file>...\" to unstage)\n        new file:   day1_work.md\n\n# 提交修改\ndayday:learn_git$ git commit -m 'first commit'\n[master b52affd] first commit\n 1 file changed, 1 insertion(+)\n create mode 100644 day1_work.md\n\n# 查看工作区状态\ndayday:learn_git$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n(use \"git push\" to publish your local commits)\nnothing to commit, working directory clean\n```\n\n# 5. 创建分支/切换分支/删除分支\n```bash\n# 列出所有分支\ndayday:learn_git$ git branch --list\n* master\n\n# 创建dev分支\ndayday:learn_git$ git branch dev\ndayday:learn_git$ git branch --list\ndev\n* master\n\n# 切换到dev分支\ndayday:learn_git$ git checkout dev\nSwitched to branch 'dev'\ndayday:learn_git$ git branch --list\n* dev\nmaster\n\n# 切换回master分支\ndayday:learn_git$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 1 commit.\n(use \"git push\" to publish your local commits) \n\n# 删除dev分支\ndayday:learn_git$ git branch -d dev\nDeleted branch dev (was b52affd). \n```\n# 8. 合并分支\n\n```bash\n# 创建dev分支并切换过去\ndayday:learn_git$ git checkout -b dev\nSwitched to a new branch 'dev'\n\n# 新建文件\ndayday:learn_git$ echo \"dev branch working...\" > dev.md\n\n# 查看dev分支工作区\ndayday:learn_git$ ls\ntotal 8.0K\n-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md\n-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md\n-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md\n-rw-rw-rw- 1 dayday dayday   22 Mar  5 20:44 dev.md\n\n# 跟踪dev.md\ndayday:learn_git$ git add .\n\n# 提交更改\ndayday:learn_git$ git commit -m 'add dev.md'\n[dev a6986a9] add dev.md\n1 file changed, 1 insertion(+)\ncreate mode 100644 dev.md\n\n# 切换到master分支\ndayday:learn_git$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 1 commit.\n(use \"git push\" to publish your local commits) \n\ndayday:learn_git$ git branch\ndev\n* master\n\n# 查看master分支工作区\ndayday:learn_git$ ls\ntotal 8.0K\n-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md\n-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md\n-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md\n\n# 比较master分支和dev分支的区别\ndayday:learn_git$ git diff master dev\ndiff --git a/dev.md b/dev.md\nnew file mode 100644\nindex 0000000..c38f76b\n--- /dev/null\n+++ b/dev.md\n@@ -0,0 +1 @@\n+dev branch working...\n\n# 合并dev分支到master分支\ndayday:learn_git$ git merge dev\nUpdating b52affd..a6986a9 Fast-forward\ndev.md | 1 + 1 file changed, 1 insertion(+)\n\n# 查看master分支工作区\ncreate mode 100644 dev.mddayday:learn_git$ ls\ntotal 8.0K\n-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md\n-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md\n-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md\n-rw-rw-rw- 1 dayday dayday   22 Mar  5 20:53 dev.md\n```\n\n\n# 11. 推送的远程仓库\n\n```bash\n# 查看工作区状态\ndayday:learn_git$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 2 commits.\n(use \"git push\" to publish your local commits)\nnothing to commit, working directory clean \n\n# 推送到远程仓库\ndayday:learn_git$ git push origin master\nUsername for 'https://gitee.com': daydaychen\nPassword for 'https://daydaychen@gitee.com':\nCounting objects: 6, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (6/6), 537 bytes | 0 bytes/s, done.\nTotal 6 (delta 1), reused 0 (delta 0)\nremote: Powered by GITEE.COM [GNK-3.8]\nTo https://gitee.com/daydaychen/learn_git.git\n4618244..a6986a9  master -> master  \n```\n\n# 12 向一个项目贡献\n\n> fork 仓库\n\n> 拉取远程仓库到本地\n\n> 提交修改并推送到远程仓库\n\n> 提交Pull Request\n\n# 13 仓库设置说明\n> 仓库成员管理\n\n添加成员，按角色分配仓库的读写权限\n\n> 部署公钥管理\n\n该操作通过非对称加密密钥对对仓库进行访问验证，无需每次输入用户名密码\n\n![](https://pic.downk.cc/item/5e60fefc98271cb2b8c187aa.jpg)","source":"_posts/gitee折腾记录.md","raw":"---\ntitle: gitee折腾记录\ndate: {{ date }}\ntags: gitee\ncategories: \ncomments: true\n---\n\n# gitee.com 介绍\n\n码云(gitee.com) 代码托管·协作开发平台，开发者近 400 万，托管项目超过 600 万，汇聚几乎所有本土原创开源项目，并于 2016 年推出企业版，提供企业级代码托管服务，成为开发领域领先的 SaaS 服务提供商。\n\n# 1. 注册 gitee.com 账户\n\n> 打开 [gitee官网](https://gitee.com/)， 注册账号并登录\n\n# 2. 创建仓库\n> 创建仓库 ![](https://pic.downk.cc/item/5e60e39498271cb2b8b33976.jpg)\n\n> 键入仓库信息 ![](https://pic.downk.cc/item/5e60e41598271cb2b8b378d9.jpg)\n\n- 仓库名称：任意\n- 归属/路径：保持默认即可\n- 仓库介绍：非必填\n- 是否开源：\n    - 私有：拉取代码需要验证用户名和密码\n    - 公开：任何人无需验证身份即可直接拉取代码\n- 选择语言：项目代码的语言\n- 添加.gitignore: 该文件用于指定上传代码时不包含项目内的某些文件，譬如包含密码的文件、缓存、项目环境、日志等无用文件，\n- [ ] 使用Readme 文件初始化这个仓库：用于介绍项目的文件，建议使用\n- [ ] 使用Issue 模板文件初始化这个仓库：初次配置可忽略\n- [ ] 使用Pull Request模板文件初始化这个仓库：初次配置可忽略\n- 选择分支模型：初始化仓库时默认只有一个master分支，根据需要设定\n\n> 点击![](https://pic.downk.cc/item/5e60e7c098271cb2b8b5272d.jpg)\n\n> 仓库首页 ![](https://pic.downk.cc/item/5e60e98198271cb2b8b60b38.jpg)\n\n# 3. 创建本地仓库/拉取远程仓库\n\n\n## 3.1 创建本地仓库\n\n> 在bash环境下操作\n\n```bash\n# 创建目录并切换到该目录\n$ mkdir local_repo && cd local_repo\n\n# 初始化仓库\n$ git init\n```\n\n## 3.2 拉取远程仓库\n\n> 获取远程仓库链接\n\n![](https://pic.downk.cc/item/5e60ea9a98271cb2b8b6bf3b.jpg)\n\n> 拉取代码\n\n```bash\n# 拉取远程仓库到本地目录learn_git\n$ git clone https://gitee.com/daydaychen/learn_git.git learn_git\nCloning into 'learn_git'...\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (4/4), done.\nChecking connectivity... done. \n```\n\n# 4. 跟踪文件/取消跟踪\n\n> \n\n```bash\n# 当前目录下有两个文件\ndayday:learn_git$ ls\ntotal 8.0K\n-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md\n-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md\n\n# 新建文件\n$ echo \"hello world\" > day1_work.md\n\n# 查看工作区状态\ndayday:learn_git$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nUntracked files: # <-- 有以下文件未跟踪\n  (use \"git add <file>...\" to include in what will be committed)\n\n        day1_work.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n# 跟踪day1_work.md\n$ git add day1_work.md\nOn branch master\nYour branch is up-to-date with 'origin/master'.\nChanges to be committed: # <-- 有以下文件已修改未提交\n  (use \"git reset HEAD <file>...\" to unstage)\n        new file:   day1_work.md\n\n# 提交修改\ndayday:learn_git$ git commit -m 'first commit'\n[master b52affd] first commit\n 1 file changed, 1 insertion(+)\n create mode 100644 day1_work.md\n\n# 查看工作区状态\ndayday:learn_git$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 1 commit.\n(use \"git push\" to publish your local commits)\nnothing to commit, working directory clean\n```\n\n# 5. 创建分支/切换分支/删除分支\n```bash\n# 列出所有分支\ndayday:learn_git$ git branch --list\n* master\n\n# 创建dev分支\ndayday:learn_git$ git branch dev\ndayday:learn_git$ git branch --list\ndev\n* master\n\n# 切换到dev分支\ndayday:learn_git$ git checkout dev\nSwitched to branch 'dev'\ndayday:learn_git$ git branch --list\n* dev\nmaster\n\n# 切换回master分支\ndayday:learn_git$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 1 commit.\n(use \"git push\" to publish your local commits) \n\n# 删除dev分支\ndayday:learn_git$ git branch -d dev\nDeleted branch dev (was b52affd). \n```\n# 8. 合并分支\n\n```bash\n# 创建dev分支并切换过去\ndayday:learn_git$ git checkout -b dev\nSwitched to a new branch 'dev'\n\n# 新建文件\ndayday:learn_git$ echo \"dev branch working...\" > dev.md\n\n# 查看dev分支工作区\ndayday:learn_git$ ls\ntotal 8.0K\n-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md\n-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md\n-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md\n-rw-rw-rw- 1 dayday dayday   22 Mar  5 20:44 dev.md\n\n# 跟踪dev.md\ndayday:learn_git$ git add .\n\n# 提交更改\ndayday:learn_git$ git commit -m 'add dev.md'\n[dev a6986a9] add dev.md\n1 file changed, 1 insertion(+)\ncreate mode 100644 dev.md\n\n# 切换到master分支\ndayday:learn_git$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 1 commit.\n(use \"git push\" to publish your local commits) \n\ndayday:learn_git$ git branch\ndev\n* master\n\n# 查看master分支工作区\ndayday:learn_git$ ls\ntotal 8.0K\n-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md\n-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md\n-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md\n\n# 比较master分支和dev分支的区别\ndayday:learn_git$ git diff master dev\ndiff --git a/dev.md b/dev.md\nnew file mode 100644\nindex 0000000..c38f76b\n--- /dev/null\n+++ b/dev.md\n@@ -0,0 +1 @@\n+dev branch working...\n\n# 合并dev分支到master分支\ndayday:learn_git$ git merge dev\nUpdating b52affd..a6986a9 Fast-forward\ndev.md | 1 + 1 file changed, 1 insertion(+)\n\n# 查看master分支工作区\ncreate mode 100644 dev.mddayday:learn_git$ ls\ntotal 8.0K\n-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md\n-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md\n-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md\n-rw-rw-rw- 1 dayday dayday   22 Mar  5 20:53 dev.md\n```\n\n\n# 11. 推送的远程仓库\n\n```bash\n# 查看工作区状态\ndayday:learn_git$ git status\nOn branch master\nYour branch is ahead of 'origin/master' by 2 commits.\n(use \"git push\" to publish your local commits)\nnothing to commit, working directory clean \n\n# 推送到远程仓库\ndayday:learn_git$ git push origin master\nUsername for 'https://gitee.com': daydaychen\nPassword for 'https://daydaychen@gitee.com':\nCounting objects: 6, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (6/6), 537 bytes | 0 bytes/s, done.\nTotal 6 (delta 1), reused 0 (delta 0)\nremote: Powered by GITEE.COM [GNK-3.8]\nTo https://gitee.com/daydaychen/learn_git.git\n4618244..a6986a9  master -> master  \n```\n\n# 12 向一个项目贡献\n\n> fork 仓库\n\n> 拉取远程仓库到本地\n\n> 提交修改并推送到远程仓库\n\n> 提交Pull Request\n\n# 13 仓库设置说明\n> 仓库成员管理\n\n添加成员，按角色分配仓库的读写权限\n\n> 部署公钥管理\n\n该操作通过非对称加密密钥对对仓库进行访问验证，无需每次输入用户名密码\n\n![](https://pic.downk.cc/item/5e60fefc98271cb2b8c187aa.jpg)","slug":"gitee折腾记录","published":1,"updated":"2020-03-06T06:17:18.870Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0x8000bk8591ioh6mpx","content":"<h1 id=\"gitee-com-介绍\"><a href=\"#gitee-com-介绍\" class=\"headerlink\" title=\"gitee.com 介绍\"></a>gitee.com 介绍</h1><p>码云(gitee.com) 代码托管·协作开发平台，开发者近 400 万，托管项目超过 600 万，汇聚几乎所有本土原创开源项目，并于 2016 年推出企业版，提供企业级代码托管服务，成为开发领域领先的 SaaS 服务提供商。</p>\n<h1 id=\"1-注册-gitee-com-账户\"><a href=\"#1-注册-gitee-com-账户\" class=\"headerlink\" title=\"1. 注册 gitee.com 账户\"></a>1. 注册 gitee.com 账户</h1><blockquote>\n<p>打开 <a href=\"https://gitee.com/\" target=\"_blank\" rel=\"noopener\">gitee官网</a>， 注册账号并登录</p>\n</blockquote>\n<h1 id=\"2-创建仓库\"><a href=\"#2-创建仓库\" class=\"headerlink\" title=\"2. 创建仓库\"></a>2. 创建仓库</h1><blockquote>\n<p>创建仓库 <img data-src=\"https://pic.downk.cc/item/5e60e39498271cb2b8b33976.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>键入仓库信息 <img data-src=\"https://pic.downk.cc/item/5e60e41598271cb2b8b378d9.jpg\" alt=\"\"></p>\n</blockquote>\n<ul>\n<li>仓库名称：任意</li>\n<li>归属/路径：保持默认即可</li>\n<li>仓库介绍：非必填</li>\n<li>是否开源：<ul>\n<li>私有：拉取代码需要验证用户名和密码</li>\n<li>公开：任何人无需验证身份即可直接拉取代码</li>\n</ul>\n</li>\n<li>选择语言：项目代码的语言</li>\n<li>添加.gitignore: 该文件用于指定上传代码时不包含项目内的某些文件，譬如包含密码的文件、缓存、项目环境、日志等无用文件，</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用Readme 文件初始化这个仓库：用于介绍项目的文件，建议使用</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用Issue 模板文件初始化这个仓库：初次配置可忽略</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用Pull Request模板文件初始化这个仓库：初次配置可忽略</li>\n<li>选择分支模型：初始化仓库时默认只有一个master分支，根据需要设定</li>\n</ul>\n<blockquote>\n<p>点击<img data-src=\"https://pic.downk.cc/item/5e60e7c098271cb2b8b5272d.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>仓库首页 <img data-src=\"https://pic.downk.cc/item/5e60e98198271cb2b8b60b38.jpg\" alt=\"\"></p>\n</blockquote>\n<h1 id=\"3-创建本地仓库-拉取远程仓库\"><a href=\"#3-创建本地仓库-拉取远程仓库\" class=\"headerlink\" title=\"3. 创建本地仓库/拉取远程仓库\"></a>3. 创建本地仓库/拉取远程仓库</h1><h2 id=\"3-1-创建本地仓库\"><a href=\"#3-1-创建本地仓库\" class=\"headerlink\" title=\"3.1 创建本地仓库\"></a>3.1 创建本地仓库</h2><blockquote>\n<p>在bash环境下操作</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录并切换到该目录</span></span><br><span class=\"line\">$ mkdir local_repo &amp;&amp; <span class=\"built_in\">cd</span> local_repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化仓库</span></span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-拉取远程仓库\"><a href=\"#3-2-拉取远程仓库\" class=\"headerlink\" title=\"3.2 拉取远程仓库\"></a>3.2 拉取远程仓库</h2><blockquote>\n<p>获取远程仓库链接</p>\n</blockquote>\n<p><img data-src=\"https://pic.downk.cc/item/5e60ea9a98271cb2b8b6bf3b.jpg\" alt=\"\"></p>\n<blockquote>\n<p>拉取代码</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取远程仓库到本地目录learn_git</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://gitee.com/daydaychen/learn_git.git learn_git</span><br><span class=\"line\">Cloning into <span class=\"string\">'learn_git'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 4, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (4/4), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (4/4), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 4 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (4/4), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Checking connectivity... <span class=\"keyword\">done</span>.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-跟踪文件-取消跟踪\"><a href=\"#4-跟踪文件-取消跟踪\" class=\"headerlink\" title=\"4. 跟踪文件/取消跟踪\"></a>4. 跟踪文件/取消跟踪</h1><blockquote>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前目录下有两个文件</span></span><br><span class=\"line\">dayday:learn_git$ ls</span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建文件</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"hello world\"</span> &gt; day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看工作区状态</span></span><br><span class=\"line\">dayday:learn_git$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Untracked files: <span class=\"comment\"># &lt;-- 有以下文件未跟踪</span></span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">        day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">\"git add\"</span> to track)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 跟踪day1_work.md</span></span><br><span class=\"line\">$ git add day1_work.md</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Changes to be committed: <span class=\"comment\"># &lt;-- 有以下文件已修改未提交</span></span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\">        new file:   day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交修改</span></span><br><span class=\"line\">dayday:learn_git$ git commit -m <span class=\"string\">'first commit'</span></span><br><span class=\"line\">[master b52affd] first commit</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看工作区状态</span></span><br><span class=\"line\">dayday:learn_git$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">(use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-创建分支-切换分支-删除分支\"><a href=\"#5-创建分支-切换分支-删除分支\" class=\"headerlink\" title=\"5. 创建分支/切换分支/删除分支\"></a>5. 创建分支/切换分支/删除分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有分支</span></span><br><span class=\"line\">dayday:learn_git$ git branch --list</span><br><span class=\"line\">* master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建dev分支</span></span><br><span class=\"line\">dayday:learn_git$ git branch dev</span><br><span class=\"line\">dayday:learn_git$ git branch --list</span><br><span class=\"line\">dev</span><br><span class=\"line\">* master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到dev分支</span></span><br><span class=\"line\">dayday:learn_git$ git checkout dev</span><br><span class=\"line\">Switched to branch <span class=\"string\">'dev'</span></span><br><span class=\"line\">dayday:learn_git$ git branch --list</span><br><span class=\"line\">* dev</span><br><span class=\"line\">master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换回master分支</span></span><br><span class=\"line\">dayday:learn_git$ git checkout master</span><br><span class=\"line\">Switched to branch <span class=\"string\">'master'</span></span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">(use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除dev分支</span></span><br><span class=\"line\">dayday:learn_git$ git branch -d dev</span><br><span class=\"line\">Deleted branch dev (was b52affd).</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-合并分支\"><a href=\"#8-合并分支\" class=\"headerlink\" title=\"8. 合并分支\"></a>8. 合并分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建dev分支并切换过去</span></span><br><span class=\"line\">dayday:learn_git$ git checkout -b dev</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'dev'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建文件</span></span><br><span class=\"line\">dayday:learn_git$ <span class=\"built_in\">echo</span> <span class=\"string\">\"dev branch working...\"</span> &gt; dev.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看dev分支工作区</span></span><br><span class=\"line\">dayday:learn_git$ ls</span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   22 Mar  5 20:44 dev.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 跟踪dev.md</span></span><br><span class=\"line\">dayday:learn_git$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交更改</span></span><br><span class=\"line\">dayday:learn_git$ git commit -m <span class=\"string\">'add dev.md'</span></span><br><span class=\"line\">[dev a6986a9] add dev.md</span><br><span class=\"line\">1 file changed, 1 insertion(+)</span><br><span class=\"line\">create mode 100644 dev.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到master分支</span></span><br><span class=\"line\">dayday:learn_git$ git checkout master</span><br><span class=\"line\">Switched to branch <span class=\"string\">'master'</span></span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">(use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits) </span><br><span class=\"line\"></span><br><span class=\"line\">dayday:learn_git$ git branch</span><br><span class=\"line\">dev</span><br><span class=\"line\">* master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看master分支工作区</span></span><br><span class=\"line\">dayday:learn_git$ ls</span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较master分支和dev分支的区别</span></span><br><span class=\"line\">dayday:learn_git$ git diff master dev</span><br><span class=\"line\">diff --git a/dev.md b/dev.md</span><br><span class=\"line\">new file mode 100644</span><br><span class=\"line\">index 0000000..c38f76b</span><br><span class=\"line\">--- /dev/null</span><br><span class=\"line\">+++ b/dev.md</span><br><span class=\"line\">@@ -0,0 +1 @@</span><br><span class=\"line\">+dev branch working...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并dev分支到master分支</span></span><br><span class=\"line\">dayday:learn_git$ git merge dev</span><br><span class=\"line\">Updating b52affd..a6986a9 Fast-forward</span><br><span class=\"line\">dev.md | 1 + 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看master分支工作区</span></span><br><span class=\"line\">create mode 100644 dev.mddayday:learn_git$ ls</span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   22 Mar  5 20:53 dev.md</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"11-推送的远程仓库\"><a href=\"#11-推送的远程仓库\" class=\"headerlink\" title=\"11. 推送的远程仓库\"></a>11. 推送的远程仓库</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看工作区状态</span></span><br><span class=\"line\">dayday:learn_git$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 2 commits.</span><br><span class=\"line\">(use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working directory clean </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到远程仓库</span></span><br><span class=\"line\">dayday:learn_git$ git push origin master</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://gitee.com'</span>: daydaychen</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://daydaychen@gitee.com'</span>:</span><br><span class=\"line\">Counting objects: 6, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (4/4), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (6/6), 537 bytes | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 6 (delta 1), reused 0 (delta 0)</span><br><span class=\"line\">remote: Powered by GITEE.COM [GNK-3.8]</span><br><span class=\"line\">To https://gitee.com/daydaychen/learn_git.git</span><br><span class=\"line\">4618244..a6986a9  master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"12-向一个项目贡献\"><a href=\"#12-向一个项目贡献\" class=\"headerlink\" title=\"12 向一个项目贡献\"></a>12 向一个项目贡献</h1><blockquote>\n<p>fork 仓库</p>\n</blockquote>\n<blockquote>\n<p>拉取远程仓库到本地</p>\n</blockquote>\n<blockquote>\n<p>提交修改并推送到远程仓库</p>\n</blockquote>\n<blockquote>\n<p>提交Pull Request</p>\n</blockquote>\n<h1 id=\"13-仓库设置说明\"><a href=\"#13-仓库设置说明\" class=\"headerlink\" title=\"13 仓库设置说明\"></a>13 仓库设置说明</h1><blockquote>\n<p>仓库成员管理</p>\n</blockquote>\n<p>添加成员，按角色分配仓库的读写权限</p>\n<blockquote>\n<p>部署公钥管理</p>\n</blockquote>\n<p>该操作通过非对称加密密钥对对仓库进行访问验证，无需每次输入用户名密码</p>\n<p><img data-src=\"https://pic.downk.cc/item/5e60fefc98271cb2b8c187aa.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"gitee-com-介绍\"><a href=\"#gitee-com-介绍\" class=\"headerlink\" title=\"gitee.com 介绍\"></a>gitee.com 介绍</h1><p>码云(gitee.com) 代码托管·协作开发平台，开发者近 400 万，托管项目超过 600 万，汇聚几乎所有本土原创开源项目，并于 2016 年推出企业版，提供企业级代码托管服务，成为开发领域领先的 SaaS 服务提供商。</p>\n<h1 id=\"1-注册-gitee-com-账户\"><a href=\"#1-注册-gitee-com-账户\" class=\"headerlink\" title=\"1. 注册 gitee.com 账户\"></a>1. 注册 gitee.com 账户</h1><blockquote>\n<p>打开 <a href=\"https://gitee.com/\" target=\"_blank\" rel=\"noopener\">gitee官网</a>， 注册账号并登录</p>\n</blockquote>\n<h1 id=\"2-创建仓库\"><a href=\"#2-创建仓库\" class=\"headerlink\" title=\"2. 创建仓库\"></a>2. 创建仓库</h1><blockquote>\n<p>创建仓库 <img data-src=\"https://pic.downk.cc/item/5e60e39498271cb2b8b33976.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>键入仓库信息 <img data-src=\"https://pic.downk.cc/item/5e60e41598271cb2b8b378d9.jpg\" alt=\"\"></p>\n</blockquote>\n<ul>\n<li>仓库名称：任意</li>\n<li>归属/路径：保持默认即可</li>\n<li>仓库介绍：非必填</li>\n<li>是否开源：<ul>\n<li>私有：拉取代码需要验证用户名和密码</li>\n<li>公开：任何人无需验证身份即可直接拉取代码</li>\n</ul>\n</li>\n<li>选择语言：项目代码的语言</li>\n<li>添加.gitignore: 该文件用于指定上传代码时不包含项目内的某些文件，譬如包含密码的文件、缓存、项目环境、日志等无用文件，</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用Readme 文件初始化这个仓库：用于介绍项目的文件，建议使用</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用Issue 模板文件初始化这个仓库：初次配置可忽略</li>\n<li><input disabled=\"\" type=\"checkbox\"> 使用Pull Request模板文件初始化这个仓库：初次配置可忽略</li>\n<li>选择分支模型：初始化仓库时默认只有一个master分支，根据需要设定</li>\n</ul>\n<blockquote>\n<p>点击<img data-src=\"https://pic.downk.cc/item/5e60e7c098271cb2b8b5272d.jpg\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>仓库首页 <img data-src=\"https://pic.downk.cc/item/5e60e98198271cb2b8b60b38.jpg\" alt=\"\"></p>\n</blockquote>\n<h1 id=\"3-创建本地仓库-拉取远程仓库\"><a href=\"#3-创建本地仓库-拉取远程仓库\" class=\"headerlink\" title=\"3. 创建本地仓库/拉取远程仓库\"></a>3. 创建本地仓库/拉取远程仓库</h1><h2 id=\"3-1-创建本地仓库\"><a href=\"#3-1-创建本地仓库\" class=\"headerlink\" title=\"3.1 创建本地仓库\"></a>3.1 创建本地仓库</h2><blockquote>\n<p>在bash环境下操作</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录并切换到该目录</span></span><br><span class=\"line\">$ mkdir local_repo &amp;&amp; <span class=\"built_in\">cd</span> local_repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化仓库</span></span><br><span class=\"line\">$ git init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-拉取远程仓库\"><a href=\"#3-2-拉取远程仓库\" class=\"headerlink\" title=\"3.2 拉取远程仓库\"></a>3.2 拉取远程仓库</h2><blockquote>\n<p>获取远程仓库链接</p>\n</blockquote>\n<p><img data-src=\"https://pic.downk.cc/item/5e60ea9a98271cb2b8b6bf3b.jpg\" alt=\"\"></p>\n<blockquote>\n<p>拉取代码</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取远程仓库到本地目录learn_git</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://gitee.com/daydaychen/learn_git.git learn_git</span><br><span class=\"line\">Cloning into <span class=\"string\">'learn_git'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 4, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (4/4), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (4/4), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 4 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (4/4), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Checking connectivity... <span class=\"keyword\">done</span>.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-跟踪文件-取消跟踪\"><a href=\"#4-跟踪文件-取消跟踪\" class=\"headerlink\" title=\"4. 跟踪文件/取消跟踪\"></a>4. 跟踪文件/取消跟踪</h1><blockquote>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前目录下有两个文件</span></span><br><span class=\"line\">dayday:learn_git$ ls</span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建文件</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"hello world\"</span> &gt; day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看工作区状态</span></span><br><span class=\"line\">dayday:learn_git$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Untracked files: <span class=\"comment\"># &lt;-- 有以下文件未跟踪</span></span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">        day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">\"git add\"</span> to track)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 跟踪day1_work.md</span></span><br><span class=\"line\">$ git add day1_work.md</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Changes to be committed: <span class=\"comment\"># &lt;-- 有以下文件已修改未提交</span></span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</span><br><span class=\"line\">        new file:   day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交修改</span></span><br><span class=\"line\">dayday:learn_git$ git commit -m <span class=\"string\">'first commit'</span></span><br><span class=\"line\">[master b52affd] first commit</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看工作区状态</span></span><br><span class=\"line\">dayday:learn_git$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">(use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-创建分支-切换分支-删除分支\"><a href=\"#5-创建分支-切换分支-删除分支\" class=\"headerlink\" title=\"5. 创建分支/切换分支/删除分支\"></a>5. 创建分支/切换分支/删除分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有分支</span></span><br><span class=\"line\">dayday:learn_git$ git branch --list</span><br><span class=\"line\">* master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建dev分支</span></span><br><span class=\"line\">dayday:learn_git$ git branch dev</span><br><span class=\"line\">dayday:learn_git$ git branch --list</span><br><span class=\"line\">dev</span><br><span class=\"line\">* master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到dev分支</span></span><br><span class=\"line\">dayday:learn_git$ git checkout dev</span><br><span class=\"line\">Switched to branch <span class=\"string\">'dev'</span></span><br><span class=\"line\">dayday:learn_git$ git branch --list</span><br><span class=\"line\">* dev</span><br><span class=\"line\">master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换回master分支</span></span><br><span class=\"line\">dayday:learn_git$ git checkout master</span><br><span class=\"line\">Switched to branch <span class=\"string\">'master'</span></span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">(use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除dev分支</span></span><br><span class=\"line\">dayday:learn_git$ git branch -d dev</span><br><span class=\"line\">Deleted branch dev (was b52affd).</span><br></pre></td></tr></table></figure>\n<h1 id=\"8-合并分支\"><a href=\"#8-合并分支\" class=\"headerlink\" title=\"8. 合并分支\"></a>8. 合并分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建dev分支并切换过去</span></span><br><span class=\"line\">dayday:learn_git$ git checkout -b dev</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'dev'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建文件</span></span><br><span class=\"line\">dayday:learn_git$ <span class=\"built_in\">echo</span> <span class=\"string\">\"dev branch working...\"</span> &gt; dev.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看dev分支工作区</span></span><br><span class=\"line\">dayday:learn_git$ ls</span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   22 Mar  5 20:44 dev.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 跟踪dev.md</span></span><br><span class=\"line\">dayday:learn_git$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交更改</span></span><br><span class=\"line\">dayday:learn_git$ git commit -m <span class=\"string\">'add dev.md'</span></span><br><span class=\"line\">[dev a6986a9] add dev.md</span><br><span class=\"line\">1 file changed, 1 insertion(+)</span><br><span class=\"line\">create mode 100644 dev.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到master分支</span></span><br><span class=\"line\">dayday:learn_git$ git checkout master</span><br><span class=\"line\">Switched to branch <span class=\"string\">'master'</span></span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 1 commit.</span><br><span class=\"line\">(use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits) </span><br><span class=\"line\"></span><br><span class=\"line\">dayday:learn_git$ git branch</span><br><span class=\"line\">dev</span><br><span class=\"line\">* master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看master分支工作区</span></span><br><span class=\"line\">dayday:learn_git$ ls</span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 比较master分支和dev分支的区别</span></span><br><span class=\"line\">dayday:learn_git$ git diff master dev</span><br><span class=\"line\">diff --git a/dev.md b/dev.md</span><br><span class=\"line\">new file mode 100644</span><br><span class=\"line\">index 0000000..c38f76b</span><br><span class=\"line\">--- /dev/null</span><br><span class=\"line\">+++ b/dev.md</span><br><span class=\"line\">@@ -0,0 +1 @@</span><br><span class=\"line\">+dev branch working...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并dev分支到master分支</span></span><br><span class=\"line\">dayday:learn_git$ git merge dev</span><br><span class=\"line\">Updating b52affd..a6986a9 Fast-forward</span><br><span class=\"line\">dev.md | 1 + 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看master分支工作区</span></span><br><span class=\"line\">create mode 100644 dev.mddayday:learn_git$ ls</span><br><span class=\"line\">total 8.0K</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday  953 Mar  5 20:06 README.en.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday 1.3K Mar  5 20:06 README.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   12 Mar  5 20:12 day1_work.md</span><br><span class=\"line\">-rw-rw-rw- 1 dayday dayday   22 Mar  5 20:53 dev.md</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"11-推送的远程仓库\"><a href=\"#11-推送的远程仓库\" class=\"headerlink\" title=\"11. 推送的远程仓库\"></a>11. 推送的远程仓库</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看工作区状态</span></span><br><span class=\"line\">dayday:learn_git$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">'origin/master'</span> by 2 commits.</span><br><span class=\"line\">(use <span class=\"string\">\"git push\"</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working directory clean </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到远程仓库</span></span><br><span class=\"line\">dayday:learn_git$ git push origin master</span><br><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://gitee.com'</span>: daydaychen</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://daydaychen@gitee.com'</span>:</span><br><span class=\"line\">Counting objects: 6, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (4/4), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (6/6), 537 bytes | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 6 (delta 1), reused 0 (delta 0)</span><br><span class=\"line\">remote: Powered by GITEE.COM [GNK-3.8]</span><br><span class=\"line\">To https://gitee.com/daydaychen/learn_git.git</span><br><span class=\"line\">4618244..a6986a9  master -&gt; master</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"12-向一个项目贡献\"><a href=\"#12-向一个项目贡献\" class=\"headerlink\" title=\"12 向一个项目贡献\"></a>12 向一个项目贡献</h1><blockquote>\n<p>fork 仓库</p>\n</blockquote>\n<blockquote>\n<p>拉取远程仓库到本地</p>\n</blockquote>\n<blockquote>\n<p>提交修改并推送到远程仓库</p>\n</blockquote>\n<blockquote>\n<p>提交Pull Request</p>\n</blockquote>\n<h1 id=\"13-仓库设置说明\"><a href=\"#13-仓库设置说明\" class=\"headerlink\" title=\"13 仓库设置说明\"></a>13 仓库设置说明</h1><blockquote>\n<p>仓库成员管理</p>\n</blockquote>\n<p>添加成员，按角色分配仓库的读写权限</p>\n<blockquote>\n<p>部署公钥管理</p>\n</blockquote>\n<p>该操作通过非对称加密密钥对对仓库进行访问验证，无需每次输入用户名密码</p>\n<p><img data-src=\"https://pic.downk.cc/item/5e60fefc98271cb2b8c187aa.jpg\" alt=\"\"></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!--more-->\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!--more-->\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-03-06T06:07:03.747Z","updated":"2020-03-06T06:07:03.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7fsi0xa000dk8596ci26700","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<a id=\"more\"></a>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"计算机网络-传输层","date":"2020-03-06T06:17:03.067Z","comments":1,"_content":"\n\n\n网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。\n\n### UDP 和 TCP 特点\n\n- 用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。\n- 传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。\n\n### UDP 首部格式\n\n![](https://ae01.alicdn.com/kf/HTB1E4TPdWWs3KVjSZFxq6yWUXXaO.jpg)\n\n首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。\n\n### TCP 首部格式\n\n![](https://ae01.alicdn.com/kf/HTB1w_LPdW1s3KVjSZFA760_ZXXa1.png)\n\n- **序号** ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。\n- **确认号** ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。\n- **数据偏移** ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。\n- **确认 ACK** ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。\n- **同步 SYN** ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。\n- **终止 FIN **：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。\n- **窗口** ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。\n\n### TCP 的三次握手\n\n![](https://ae01.alicdn.com/kf/HTB1w_LPdW1s3KVjSZFA760_ZXXa1.png)\n\n假设 A 为客户端，B 为服务器端。\n\n- 首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。\n- A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。\n- B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。\n- A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。\n- B 收到 A 的确认后，连接建立。\n\n#### 三次握手的原因\n\n第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。\n\n客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。\n\n### TCP 的四次挥手\n\n![](https://ae01.alicdn.com/kf/HTB11G2Id9SD3KVjSZFK76210VXa1.png)\n\n以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。\n\n- A 发送连接释放报文，FIN=1。\n- B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。当 B 不再需要连接时，发送连接释放报文，FIN=1。\n- A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。\n- B 收到 A 的确认后释放连接。\n\n#### 四次挥手的原因\n\n客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。\n\n##### TIME_WAIT\n\n客户端收到服务器端的 FIN 豹纹后进入此状态，此时并不是直接进入CLOSED状态，还需要等待一个时间计时器设置的时间2MSL。这么做有两个理由：\n\n- 确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文， 那么就会重新发送连接释放请求报文， A 等待一段时间就是为了处理这种情况的发生。\n- 等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。\n\n### TCP 可靠传输\n\nTCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。 \n\n一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：\n\n![](https://ae01.alicdn.com/kf/HTB11vzRdW1s3KVjSZFA5jX_ZXXal.gif)\n\n其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。     \n超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：\n\n![](https://ae01.alicdn.com/kf/HTB1HSwVbfBj_uVjSZFp5jc0SXXaR.gif)\n\n其中 RTTd 为偏差的加权平均值。\n\n### TCP 滑动窗口\n\n窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。\n\n发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。\n\n接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。\n\n![](https://ae01.alicdn.com/kf/HTB1FXrPd8Kw3KVjSZFOq6yrDVXaY.jpg)\n\n### TCP 流量控制\n\n流量控制是为了控制发送方发送速率，保证接收方来得及接收。\n\n接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0 ，则发送方不能发送数据。\n\n### TCP 拥塞控制\n\n如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。\n\n![](https://ae01.alicdn.com/kf/HTB17THJd8iE3KVjSZFMq6zQhVXax.jpg)\n\nTCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。\n\n发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。\n\n为了便于讨论，做如下假设：\n\n- 接收方有足够大的接收缓存，因此不会发生流量控制；\n- 虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。\n\n![](https://ae01.alicdn.com/kf/HTB1i5HKd9SD3KVjSZFK76210VXa1.png)\n\n#### 1. 慢开始与拥塞避免\n\n发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 ...\n\n注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd >= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。\n\n如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。\n\n#### 2. 快重传与快恢复\n\n在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。\n\n在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。\n\n在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。\n\n慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。\n\n![](https://ae01.alicdn.com/kf/HTB1XVrLd21G3KVjSZFk761K4XXak.png)\n","source":"_posts/传输层-over.md","raw":"---\ntitle: 计算机网络-传输层\ndate: {{ date }}\ntags: Internet\ncategories:\ncomments: true\n---\n\n\n\n网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。\n\n### UDP 和 TCP 特点\n\n- 用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。\n- 传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。\n\n### UDP 首部格式\n\n![](https://ae01.alicdn.com/kf/HTB1E4TPdWWs3KVjSZFxq6yWUXXaO.jpg)\n\n首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。\n\n### TCP 首部格式\n\n![](https://ae01.alicdn.com/kf/HTB1w_LPdW1s3KVjSZFA760_ZXXa1.png)\n\n- **序号** ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。\n- **确认号** ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。\n- **数据偏移** ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。\n- **确认 ACK** ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。\n- **同步 SYN** ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。\n- **终止 FIN **：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。\n- **窗口** ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。\n\n### TCP 的三次握手\n\n![](https://ae01.alicdn.com/kf/HTB1w_LPdW1s3KVjSZFA760_ZXXa1.png)\n\n假设 A 为客户端，B 为服务器端。\n\n- 首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。\n- A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。\n- B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。\n- A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。\n- B 收到 A 的确认后，连接建立。\n\n#### 三次握手的原因\n\n第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。\n\n客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。\n\n### TCP 的四次挥手\n\n![](https://ae01.alicdn.com/kf/HTB11G2Id9SD3KVjSZFK76210VXa1.png)\n\n以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。\n\n- A 发送连接释放报文，FIN=1。\n- B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。当 B 不再需要连接时，发送连接释放报文，FIN=1。\n- A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。\n- B 收到 A 的确认后释放连接。\n\n#### 四次挥手的原因\n\n客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。\n\n##### TIME_WAIT\n\n客户端收到服务器端的 FIN 豹纹后进入此状态，此时并不是直接进入CLOSED状态，还需要等待一个时间计时器设置的时间2MSL。这么做有两个理由：\n\n- 确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文， 那么就会重新发送连接释放请求报文， A 等待一段时间就是为了处理这种情况的发生。\n- 等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。\n\n### TCP 可靠传输\n\nTCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。 \n\n一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：\n\n![](https://ae01.alicdn.com/kf/HTB11vzRdW1s3KVjSZFA5jX_ZXXal.gif)\n\n其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。     \n超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：\n\n![](https://ae01.alicdn.com/kf/HTB1HSwVbfBj_uVjSZFp5jc0SXXaR.gif)\n\n其中 RTTd 为偏差的加权平均值。\n\n### TCP 滑动窗口\n\n窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。\n\n发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。\n\n接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。\n\n![](https://ae01.alicdn.com/kf/HTB1FXrPd8Kw3KVjSZFOq6yrDVXaY.jpg)\n\n### TCP 流量控制\n\n流量控制是为了控制发送方发送速率，保证接收方来得及接收。\n\n接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0 ，则发送方不能发送数据。\n\n### TCP 拥塞控制\n\n如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。\n\n![](https://ae01.alicdn.com/kf/HTB17THJd8iE3KVjSZFMq6zQhVXax.jpg)\n\nTCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。\n\n发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。\n\n为了便于讨论，做如下假设：\n\n- 接收方有足够大的接收缓存，因此不会发生流量控制；\n- 虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。\n\n![](https://ae01.alicdn.com/kf/HTB1i5HKd9SD3KVjSZFK76210VXa1.png)\n\n#### 1. 慢开始与拥塞避免\n\n发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 ...\n\n注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd >= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。\n\n如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。\n\n#### 2. 快重传与快恢复\n\n在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。\n\n在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。\n\n在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。\n\n慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。\n\n![](https://ae01.alicdn.com/kf/HTB1XVrLd21G3KVjSZFk761K4XXak.png)\n","slug":"传输层-over","published":1,"updated":"2020-03-06T06:17:03.067Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xc000gk85935epe905","content":"<p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。</p>\n<h3 id=\"UDP-和-TCP-特点\"><a href=\"#UDP-和-TCP-特点\" class=\"headerlink\" title=\"UDP 和 TCP 特点\"></a>UDP 和 TCP 特点</h3><ul>\n<li>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</li>\n<li>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</li>\n</ul>\n<h3 id=\"UDP-首部格式\"><a href=\"#UDP-首部格式\" class=\"headerlink\" title=\"UDP 首部格式\"></a>UDP 首部格式</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB1E4TPdWWs3KVjSZFxq6yWUXXaO.jpg\" alt=\"\"></p>\n<p>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p>\n<h3 id=\"TCP-首部格式\"><a href=\"#TCP-首部格式\" class=\"headerlink\" title=\"TCP 首部格式\"></a>TCP 首部格式</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB1w_LPdW1s3KVjSZFA760_ZXXa1.png\" alt=\"\"></p>\n<ul>\n<li><strong>序号</strong> ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</li>\n<li><strong>确认号</strong> ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li>\n<li><strong>数据偏移</strong> ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</li>\n<li><strong>确认 ACK</strong> ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li>\n<li><strong>同步 SYN</strong> ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</li>\n<li>*<em>终止 FIN *</em>：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li>\n<li><strong>窗口</strong> ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</li>\n</ul>\n<h3 id=\"TCP-的三次握手\"><a href=\"#TCP-的三次握手\" class=\"headerlink\" title=\"TCP 的三次握手\"></a>TCP 的三次握手</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB1w_LPdW1s3KVjSZFA760_ZXXa1.png\" alt=\"\"></p>\n<p>假设 A 为客户端，B 为服务器端。</p>\n<ul>\n<li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</li>\n<li>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</li>\n<li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li>\n<li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</li>\n<li>B 收到 A 的确认后，连接建立。</li>\n</ul>\n<h4 id=\"三次握手的原因\"><a href=\"#三次握手的原因\" class=\"headerlink\" title=\"三次握手的原因\"></a>三次握手的原因</h4><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p>\n<p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p>\n<h3 id=\"TCP-的四次挥手\"><a href=\"#TCP-的四次挥手\" class=\"headerlink\" title=\"TCP 的四次挥手\"></a>TCP 的四次挥手</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB11G2Id9SD3KVjSZFK76210VXa1.png\" alt=\"\"></p>\n<p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p>\n<ul>\n<li>A 发送连接释放报文，FIN=1。</li>\n<li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。当 B 不再需要连接时，发送连接释放报文，FIN=1。</li>\n<li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li>\n<li>B 收到 A 的确认后释放连接。</li>\n</ul>\n<h4 id=\"四次挥手的原因\"><a href=\"#四次挥手的原因\" class=\"headerlink\" title=\"四次挥手的原因\"></a>四次挥手的原因</h4><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p>\n<h5 id=\"TIME-WAIT\"><a href=\"#TIME-WAIT\" class=\"headerlink\" title=\"TIME_WAIT\"></a>TIME_WAIT</h5><p>客户端收到服务器端的 FIN 豹纹后进入此状态，此时并不是直接进入CLOSED状态，还需要等待一个时间计时器设置的时间2MSL。这么做有两个理由：</p>\n<ul>\n<li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文， 那么就会重新发送连接释放请求报文， A 等待一段时间就是为了处理这种情况的发生。</li>\n<li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li>\n</ul>\n<h3 id=\"TCP-可靠传输\"><a href=\"#TCP-可靠传输\" class=\"headerlink\" title=\"TCP 可靠传输\"></a>TCP 可靠传输</h3><p>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。 </p>\n<p>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB11vzRdW1s3KVjSZFA5jX_ZXXal.gif\" alt=\"\"></p>\n<p>其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。<br>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1HSwVbfBj_uVjSZFp5jc0SXXaR.gif\" alt=\"\"></p>\n<p>其中 RTTd 为偏差的加权平均值。</p>\n<h3 id=\"TCP-滑动窗口\"><a href=\"#TCP-滑动窗口\" class=\"headerlink\" title=\"TCP 滑动窗口\"></a>TCP 滑动窗口</h3><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p>\n<p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p>\n<p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1FXrPd8Kw3KVjSZFOq6yrDVXaY.jpg\" alt=\"\"></p>\n<h3 id=\"TCP-流量控制\"><a href=\"#TCP-流量控制\" class=\"headerlink\" title=\"TCP 流量控制\"></a>TCP 流量控制</h3><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p>\n<p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0 ，则发送方不能发送数据。</p>\n<h3 id=\"TCP-拥塞控制\"><a href=\"#TCP-拥塞控制\" class=\"headerlink\" title=\"TCP 拥塞控制\"></a>TCP 拥塞控制</h3><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB17THJd8iE3KVjSZFMq6zQhVXax.jpg\" alt=\"\"></p>\n<p>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p>\n<p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p>\n<p>为了便于讨论，做如下假设：</p>\n<ul>\n<li>接收方有足够大的接收缓存，因此不会发生流量控制；</li>\n<li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1i5HKd9SD3KVjSZFK76210VXa1.png\" alt=\"\"></p>\n<h4 id=\"1-慢开始与拥塞避免\"><a href=\"#1-慢开始与拥塞避免\" class=\"headerlink\" title=\"1. 慢开始与拥塞避免\"></a>1. 慢开始与拥塞避免</h4><p>发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p>\n<p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p>\n<p>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p>\n<h4 id=\"2-快重传与快恢复\"><a href=\"#2-快重传与快恢复\" class=\"headerlink\" title=\"2. 快重传与快恢复\"></a>2. 快重传与快恢复</h4><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。</p>\n<p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。</p>\n<p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p>\n<p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1XVrLd21G3KVjSZFk761K4XXak.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。</p>\n<h3 id=\"UDP-和-TCP-特点\"><a href=\"#UDP-和-TCP-特点\" class=\"headerlink\" title=\"UDP 和 TCP 特点\"></a>UDP 和 TCP 特点</h3><ul>\n<li>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</li>\n<li>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</li>\n</ul>\n<h3 id=\"UDP-首部格式\"><a href=\"#UDP-首部格式\" class=\"headerlink\" title=\"UDP 首部格式\"></a>UDP 首部格式</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB1E4TPdWWs3KVjSZFxq6yWUXXaO.jpg\" alt=\"\"></p>\n<p>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p>\n<h3 id=\"TCP-首部格式\"><a href=\"#TCP-首部格式\" class=\"headerlink\" title=\"TCP 首部格式\"></a>TCP 首部格式</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB1w_LPdW1s3KVjSZFA760_ZXXa1.png\" alt=\"\"></p>\n<ul>\n<li><strong>序号</strong> ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</li>\n<li><strong>确认号</strong> ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li>\n<li><strong>数据偏移</strong> ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</li>\n<li><strong>确认 ACK</strong> ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li>\n<li><strong>同步 SYN</strong> ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</li>\n<li>*<em>终止 FIN *</em>：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li>\n<li><strong>窗口</strong> ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</li>\n</ul>\n<h3 id=\"TCP-的三次握手\"><a href=\"#TCP-的三次握手\" class=\"headerlink\" title=\"TCP 的三次握手\"></a>TCP 的三次握手</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB1w_LPdW1s3KVjSZFA760_ZXXa1.png\" alt=\"\"></p>\n<p>假设 A 为客户端，B 为服务器端。</p>\n<ul>\n<li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</li>\n<li>A 向 B 发送连接请求报文，SYN=1，ACK=0，选择一个初始的序号 x。</li>\n<li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li>\n<li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</li>\n<li>B 收到 A 的确认后，连接建立。</li>\n</ul>\n<h4 id=\"三次握手的原因\"><a href=\"#三次握手的原因\" class=\"headerlink\" title=\"三次握手的原因\"></a>三次握手的原因</h4><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p>\n<p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p>\n<h3 id=\"TCP-的四次挥手\"><a href=\"#TCP-的四次挥手\" class=\"headerlink\" title=\"TCP 的四次挥手\"></a>TCP 的四次挥手</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB11G2Id9SD3KVjSZFK76210VXa1.png\" alt=\"\"></p>\n<p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p>\n<ul>\n<li>A 发送连接释放报文，FIN=1。</li>\n<li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。当 B 不再需要连接时，发送连接释放报文，FIN=1。</li>\n<li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li>\n<li>B 收到 A 的确认后释放连接。</li>\n</ul>\n<h4 id=\"四次挥手的原因\"><a href=\"#四次挥手的原因\" class=\"headerlink\" title=\"四次挥手的原因\"></a>四次挥手的原因</h4><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p>\n<h5 id=\"TIME-WAIT\"><a href=\"#TIME-WAIT\" class=\"headerlink\" title=\"TIME_WAIT\"></a>TIME_WAIT</h5><p>客户端收到服务器端的 FIN 豹纹后进入此状态，此时并不是直接进入CLOSED状态，还需要等待一个时间计时器设置的时间2MSL。这么做有两个理由：</p>\n<ul>\n<li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文， 那么就会重新发送连接释放请求报文， A 等待一段时间就是为了处理这种情况的发生。</li>\n<li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li>\n</ul>\n<h3 id=\"TCP-可靠传输\"><a href=\"#TCP-可靠传输\" class=\"headerlink\" title=\"TCP 可靠传输\"></a>TCP 可靠传输</h3><p>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。 </p>\n<p>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB11vzRdW1s3KVjSZFA5jX_ZXXal.gif\" alt=\"\"></p>\n<p>其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。<br>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1HSwVbfBj_uVjSZFp5jc0SXXaR.gif\" alt=\"\"></p>\n<p>其中 RTTd 为偏差的加权平均值。</p>\n<h3 id=\"TCP-滑动窗口\"><a href=\"#TCP-滑动窗口\" class=\"headerlink\" title=\"TCP 滑动窗口\"></a>TCP 滑动窗口</h3><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p>\n<p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p>\n<p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1FXrPd8Kw3KVjSZFOq6yrDVXaY.jpg\" alt=\"\"></p>\n<h3 id=\"TCP-流量控制\"><a href=\"#TCP-流量控制\" class=\"headerlink\" title=\"TCP 流量控制\"></a>TCP 流量控制</h3><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p>\n<p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0 ，则发送方不能发送数据。</p>\n<h3 id=\"TCP-拥塞控制\"><a href=\"#TCP-拥塞控制\" class=\"headerlink\" title=\"TCP 拥塞控制\"></a>TCP 拥塞控制</h3><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB17THJd8iE3KVjSZFMq6zQhVXax.jpg\" alt=\"\"></p>\n<p>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p>\n<p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p>\n<p>为了便于讨论，做如下假设：</p>\n<ul>\n<li>接收方有足够大的接收缓存，因此不会发生流量控制；</li>\n<li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1i5HKd9SD3KVjSZFK76210VXa1.png\" alt=\"\"></p>\n<h4 id=\"1-慢开始与拥塞避免\"><a href=\"#1-慢开始与拥塞避免\" class=\"headerlink\" title=\"1. 慢开始与拥塞避免\"></a>1. 慢开始与拥塞避免</h4><p>发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p>\n<p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p>\n<p>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p>\n<h4 id=\"2-快重传与快恢复\"><a href=\"#2-快重传与快恢复\" class=\"headerlink\" title=\"2. 快重传与快恢复\"></a>2. 快重传与快恢复</h4><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。</p>\n<p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。</p>\n<p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p>\n<p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1XVrLd21G3KVjSZFk761K4XXak.png\" alt=\"\"></p>\n"},{"title":"使用正则处理字幕文件","date":"2020-03-06T06:13:49.912Z","comments":1,"_content":"\n\n### 使用python中的re模块处理YouTube字幕文件\n\n状况：18个字幕文件，编码格式Window-1254，命名规律，按数字排序\n\n需求：将字幕文件中的演讲词提取出来，剔除无用的字符，并合并为一个文件\n\n#### 文件命名格式\n```\nls tmp/\ntotal 84K\n-rw-r--r-- 1 root root 3.1K Apr 22 14:50 02-Odyssey_Plans__The_Stages_of_Life.srt\n-rw-r--r-- 1 root root 4.6K Apr 22 14:51 03-Odyssey_Plans__What_is_an_Odyssey_Plan_.srt\n-rw-r--r-- 1 root root 2.5K Apr 22 14:51 04-Odyssey_Plans__What_does_an_Odyssey_Plan_Include_.srt\n-rw-r--r-- 1 root root 2.9K Apr 22 14:52 05-Odyssey_Plans__Presentation_Format.srt\n-rw-r--r-- 1 root root 1.5K Apr 22 14:52 06-Odyssey_Plans__5-Year_Timelines.srt\n-rw-r--r-- 1 root root 1.2K Apr 22 14:53 07-Odyssey_Plans__6-Word_Title.srt\n-rw-r--r-- 1 root root 2.0K Apr 22 14:53 08-Odyssey_Plans__Designing_3_Timelines.srt\n-rw-r--r-- 1 root root 1.9K Apr 22 14:54 09-Odyssey_Plans__Building_your_10-year_timeline.srt\n-rw-r--r-- 1 root root 1.3K Apr 22 14:54 10-Odyssey_Plans__Choosing_a_Symbol.srt\n-rw-r--r-- 1 root root 3.2K Apr 22 14:54 11-Odyssey_Plans__Creating_a_Dashboard.srt\n-rw-r--r-- 1 root root 1013 Apr 22 14:54 12-Odyssey_Plans__Identifying_Questions.srt\n-rw-r--r-- 1 root root 1.6K Apr 22 14:55 13-Odyssey_Plans__Writing_a_Thank-You_note.srt\n-rw-r--r-- 1 root root 2.8K Apr 22 14:55 14-Odyssey_Plans__How_to_'Prototype'_your_Odysseys.srt\n-rw-r--r-- 1 root root 4.7K Apr 22 14:55 15-Odyssey_Plans__Prototype_Conversations_and_Experiences.srt\n-rw-r--r-- 1 root root 3.7K Apr 22 14:55 16-Odyssey_Plans__How_often_to_design_an_Odyssey_plan.srt\n-rw-r--r-- 1 root root 3.8K Apr 22 14:56 17-Odyssey_Plans__Insights_and_Takeaways.srt\n-rw-r--r-- 1 root root 3.2K Apr 24 19:55 01-Odyssey_Plans__What_are_the_Odyssey_Years_.srt\n-rw-r--r-- 1 root root 5.8K Apr 24 20:05 18-Odyssey_Plans__Applying_Designers'_Mindsets.srt\n```\n#### 文件内容格式\n```\n1\n00:00:03,590 --> 00:00:04,710\nMy name is Bill Burnett.\n\n2\n00:00:04,710 --> 00:00:07,460\nI'm one of the co-authors\nof Designing Your Life,\n\n3\n00:00:07,460 --> 00:00:09,410\nHow to Live a\nWell-Lived Joyful Life.\n\n......\n```\n#### 思路分析\n- 获取所有文件名存入列表  <--  方便循环进行文件操作\n- 然后用正则匹配演讲词并打印出来  <-- 剔除无用字符\n- 执行脚本并将输出重定向到一个新文件 <-- 合并为一个文件\n\n#### 实现代码\n```\n# Script_name: merge_final.py\n\nimport re\nimport os\n\n# 字幕文件所在目录\ndir = \"/root/tmp/\"\n\ndef process(filename):\n        '''对文件进行操作'''\n        print(filename)\n        \n        with open(dir+filename, 'r', encode='utf-8') as f:       # 打开文件\n                lines = f.readlines()       # 按行读取整个文件，存入列表\n                \n                for line in lines:\n                        # 剔除无用字符\n                        lrc = re.search(r'^\\D.*[a-z.]', line) \n                        if lrc: \n                                print(lrc.group()) \n        \n        print(\"--------------------\")\n\n\ndef main():\n        filelist = os.listdir(dir)      # 获取目录下所有的文件名称\n        filelist.sort()                 # 按照数字排序\n        \n        for filename in filelist:\n                process(filename)       # 将文件名传过去\n\n\nif __name__ == \"__main__\":\n        main()\n```\n#### 执行脚本\n```\n[root@dayday ~]# python merge_final.py > lecture.txt\n```\n\n#### 知识点整理\n**1. 编码格式问题**\n\n在读取中文的情况下，通常会遇到一些编码的问题，但是首先需要了解目前的编码方式是什么，然后再用decode或者encode去编码和解码，下面是使用chardet库来查看编码方式的。\n```\nimport chardet\n\npath = \"E:/t.csv\"\nf = open(path,'rb')\n\ndata = f.read()\nprint(chardet.detect(data))\n```\n```\n[root@dayday ~]# python test.py\n{'encoding': 'GB2312', 'confidence': 0.99, 'language': 'Chinese'}\n```\n当时的字幕是从[downsub.com](http://downsub.com/)网站下载的，编码格式是Windows-1254格式，在Python进行文件操作时总是报错，偷懒在notepad++下手动更改编码格式为utf-8，当然也可以用Python脚本实现。\n\n**2. 导入目录下所有文件的名称&排序问题**\n\n这个就是知识没掌握的问题了，在此记录。os是个强大的模块！\n\n**3. 正则语法**\n\n好多语法格式都不熟练，一边调试一边查[runoob.com](runoob.com)，着实耗时间，需反复练习！\n\n**4. re.match()返回值问题**\n\nre.match()匹配成功返回re.match()对象，可用.group()方法提取字符串；匹配失败返回None。\n\n文件时是按行读取的，因此循环对行进行正则匹配，返回的结果中穿插着None和re.match对象，而None调用.group()方法会报错，所以在这简单的用if过滤掉了None。\n\n在敲这篇记录时突然想起，应该可以用Python的异常处理过滤掉报错，改天试试看\n\n**5. 养成随手记录的习惯**\n\n在整个解决过程中，查了很多资料，但没有随时记下来，解决完问题做记录的时候有些问题都忘记了！","source":"_posts/使用正则处理字幕文件，python.md","raw":"---\ntitle: 使用正则处理字幕文件\ndate: {{ date }}\ntags: \ncategories:\ncomments: true\n---\n\n\n### 使用python中的re模块处理YouTube字幕文件\n\n状况：18个字幕文件，编码格式Window-1254，命名规律，按数字排序\n\n需求：将字幕文件中的演讲词提取出来，剔除无用的字符，并合并为一个文件\n\n#### 文件命名格式\n```\nls tmp/\ntotal 84K\n-rw-r--r-- 1 root root 3.1K Apr 22 14:50 02-Odyssey_Plans__The_Stages_of_Life.srt\n-rw-r--r-- 1 root root 4.6K Apr 22 14:51 03-Odyssey_Plans__What_is_an_Odyssey_Plan_.srt\n-rw-r--r-- 1 root root 2.5K Apr 22 14:51 04-Odyssey_Plans__What_does_an_Odyssey_Plan_Include_.srt\n-rw-r--r-- 1 root root 2.9K Apr 22 14:52 05-Odyssey_Plans__Presentation_Format.srt\n-rw-r--r-- 1 root root 1.5K Apr 22 14:52 06-Odyssey_Plans__5-Year_Timelines.srt\n-rw-r--r-- 1 root root 1.2K Apr 22 14:53 07-Odyssey_Plans__6-Word_Title.srt\n-rw-r--r-- 1 root root 2.0K Apr 22 14:53 08-Odyssey_Plans__Designing_3_Timelines.srt\n-rw-r--r-- 1 root root 1.9K Apr 22 14:54 09-Odyssey_Plans__Building_your_10-year_timeline.srt\n-rw-r--r-- 1 root root 1.3K Apr 22 14:54 10-Odyssey_Plans__Choosing_a_Symbol.srt\n-rw-r--r-- 1 root root 3.2K Apr 22 14:54 11-Odyssey_Plans__Creating_a_Dashboard.srt\n-rw-r--r-- 1 root root 1013 Apr 22 14:54 12-Odyssey_Plans__Identifying_Questions.srt\n-rw-r--r-- 1 root root 1.6K Apr 22 14:55 13-Odyssey_Plans__Writing_a_Thank-You_note.srt\n-rw-r--r-- 1 root root 2.8K Apr 22 14:55 14-Odyssey_Plans__How_to_'Prototype'_your_Odysseys.srt\n-rw-r--r-- 1 root root 4.7K Apr 22 14:55 15-Odyssey_Plans__Prototype_Conversations_and_Experiences.srt\n-rw-r--r-- 1 root root 3.7K Apr 22 14:55 16-Odyssey_Plans__How_often_to_design_an_Odyssey_plan.srt\n-rw-r--r-- 1 root root 3.8K Apr 22 14:56 17-Odyssey_Plans__Insights_and_Takeaways.srt\n-rw-r--r-- 1 root root 3.2K Apr 24 19:55 01-Odyssey_Plans__What_are_the_Odyssey_Years_.srt\n-rw-r--r-- 1 root root 5.8K Apr 24 20:05 18-Odyssey_Plans__Applying_Designers'_Mindsets.srt\n```\n#### 文件内容格式\n```\n1\n00:00:03,590 --> 00:00:04,710\nMy name is Bill Burnett.\n\n2\n00:00:04,710 --> 00:00:07,460\nI'm one of the co-authors\nof Designing Your Life,\n\n3\n00:00:07,460 --> 00:00:09,410\nHow to Live a\nWell-Lived Joyful Life.\n\n......\n```\n#### 思路分析\n- 获取所有文件名存入列表  <--  方便循环进行文件操作\n- 然后用正则匹配演讲词并打印出来  <-- 剔除无用字符\n- 执行脚本并将输出重定向到一个新文件 <-- 合并为一个文件\n\n#### 实现代码\n```\n# Script_name: merge_final.py\n\nimport re\nimport os\n\n# 字幕文件所在目录\ndir = \"/root/tmp/\"\n\ndef process(filename):\n        '''对文件进行操作'''\n        print(filename)\n        \n        with open(dir+filename, 'r', encode='utf-8') as f:       # 打开文件\n                lines = f.readlines()       # 按行读取整个文件，存入列表\n                \n                for line in lines:\n                        # 剔除无用字符\n                        lrc = re.search(r'^\\D.*[a-z.]', line) \n                        if lrc: \n                                print(lrc.group()) \n        \n        print(\"--------------------\")\n\n\ndef main():\n        filelist = os.listdir(dir)      # 获取目录下所有的文件名称\n        filelist.sort()                 # 按照数字排序\n        \n        for filename in filelist:\n                process(filename)       # 将文件名传过去\n\n\nif __name__ == \"__main__\":\n        main()\n```\n#### 执行脚本\n```\n[root@dayday ~]# python merge_final.py > lecture.txt\n```\n\n#### 知识点整理\n**1. 编码格式问题**\n\n在读取中文的情况下，通常会遇到一些编码的问题，但是首先需要了解目前的编码方式是什么，然后再用decode或者encode去编码和解码，下面是使用chardet库来查看编码方式的。\n```\nimport chardet\n\npath = \"E:/t.csv\"\nf = open(path,'rb')\n\ndata = f.read()\nprint(chardet.detect(data))\n```\n```\n[root@dayday ~]# python test.py\n{'encoding': 'GB2312', 'confidence': 0.99, 'language': 'Chinese'}\n```\n当时的字幕是从[downsub.com](http://downsub.com/)网站下载的，编码格式是Windows-1254格式，在Python进行文件操作时总是报错，偷懒在notepad++下手动更改编码格式为utf-8，当然也可以用Python脚本实现。\n\n**2. 导入目录下所有文件的名称&排序问题**\n\n这个就是知识没掌握的问题了，在此记录。os是个强大的模块！\n\n**3. 正则语法**\n\n好多语法格式都不熟练，一边调试一边查[runoob.com](runoob.com)，着实耗时间，需反复练习！\n\n**4. re.match()返回值问题**\n\nre.match()匹配成功返回re.match()对象，可用.group()方法提取字符串；匹配失败返回None。\n\n文件时是按行读取的，因此循环对行进行正则匹配，返回的结果中穿插着None和re.match对象，而None调用.group()方法会报错，所以在这简单的用if过滤掉了None。\n\n在敲这篇记录时突然想起，应该可以用Python的异常处理过滤掉报错，改天试试看\n\n**5. 养成随手记录的习惯**\n\n在整个解决过程中，查了很多资料，但没有随时记下来，解决完问题做记录的时候有些问题都忘记了！","slug":"使用正则处理字幕文件，python","published":1,"updated":"2020-03-06T06:13:49.912Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xd000ik8599nvggt4n","content":"<h3 id=\"使用python中的re模块处理YouTube字幕文件\"><a href=\"#使用python中的re模块处理YouTube字幕文件\" class=\"headerlink\" title=\"使用python中的re模块处理YouTube字幕文件\"></a>使用python中的re模块处理YouTube字幕文件</h3><p>状况：18个字幕文件，编码格式Window-1254，命名规律，按数字排序</p>\n<p>需求：将字幕文件中的演讲词提取出来，剔除无用的字符，并合并为一个文件</p>\n<h4 id=\"文件命名格式\"><a href=\"#文件命名格式\" class=\"headerlink\" title=\"文件命名格式\"></a>文件命名格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls tmp&#x2F;</span><br><span class=\"line\">total 84K</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.1K Apr 22 14:50 02-Odyssey_Plans__The_Stages_of_Life.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 4.6K Apr 22 14:51 03-Odyssey_Plans__What_is_an_Odyssey_Plan_.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 2.5K Apr 22 14:51 04-Odyssey_Plans__What_does_an_Odyssey_Plan_Include_.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 2.9K Apr 22 14:52 05-Odyssey_Plans__Presentation_Format.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.5K Apr 22 14:52 06-Odyssey_Plans__5-Year_Timelines.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.2K Apr 22 14:53 07-Odyssey_Plans__6-Word_Title.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 2.0K Apr 22 14:53 08-Odyssey_Plans__Designing_3_Timelines.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.9K Apr 22 14:54 09-Odyssey_Plans__Building_your_10-year_timeline.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.3K Apr 22 14:54 10-Odyssey_Plans__Choosing_a_Symbol.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.2K Apr 22 14:54 11-Odyssey_Plans__Creating_a_Dashboard.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1013 Apr 22 14:54 12-Odyssey_Plans__Identifying_Questions.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.6K Apr 22 14:55 13-Odyssey_Plans__Writing_a_Thank-You_note.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 2.8K Apr 22 14:55 14-Odyssey_Plans__How_to_&#39;Prototype&#39;_your_Odysseys.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 4.7K Apr 22 14:55 15-Odyssey_Plans__Prototype_Conversations_and_Experiences.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.7K Apr 22 14:55 16-Odyssey_Plans__How_often_to_design_an_Odyssey_plan.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.8K Apr 22 14:56 17-Odyssey_Plans__Insights_and_Takeaways.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.2K Apr 24 19:55 01-Odyssey_Plans__What_are_the_Odyssey_Years_.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.8K Apr 24 20:05 18-Odyssey_Plans__Applying_Designers&#39;_Mindsets.srt</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件内容格式\"><a href=\"#文件内容格式\" class=\"headerlink\" title=\"文件内容格式\"></a>文件内容格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">00:00:03,590 --&gt; 00:00:04,710</span><br><span class=\"line\">My name is Bill Burnett.</span><br><span class=\"line\"></span><br><span class=\"line\">2</span><br><span class=\"line\">00:00:04,710 --&gt; 00:00:07,460</span><br><span class=\"line\">I&#39;m one of the co-authors</span><br><span class=\"line\">of Designing Your Life,</span><br><span class=\"line\"></span><br><span class=\"line\">3</span><br><span class=\"line\">00:00:07,460 --&gt; 00:00:09,410</span><br><span class=\"line\">How to Live a</span><br><span class=\"line\">Well-Lived Joyful Life.</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h4 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ul>\n<li>获取所有文件名存入列表  &lt;–  方便循环进行文件操作</li>\n<li>然后用正则匹配演讲词并打印出来  &lt;– 剔除无用字符</li>\n<li>执行脚本并将输出重定向到一个新文件 &lt;– 合并为一个文件</li>\n</ul>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Script_name: merge_final.py</span><br><span class=\"line\"></span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># 字幕文件所在目录</span><br><span class=\"line\">dir &#x3D; &quot;&#x2F;root&#x2F;tmp&#x2F;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def process(filename):</span><br><span class=\"line\">        &#39;&#39;&#39;对文件进行操作&#39;&#39;&#39;</span><br><span class=\"line\">        print(filename)</span><br><span class=\"line\">        </span><br><span class=\"line\">        with open(dir+filename, &#39;r&#39;, encode&#x3D;&#39;utf-8&#39;) as f:       # 打开文件</span><br><span class=\"line\">                lines &#x3D; f.readlines()       # 按行读取整个文件，存入列表</span><br><span class=\"line\">                </span><br><span class=\"line\">                for line in lines:</span><br><span class=\"line\">                        # 剔除无用字符</span><br><span class=\"line\">                        lrc &#x3D; re.search(r&#39;^\\D.*[a-z.]&#39;, line) </span><br><span class=\"line\">                        if lrc: </span><br><span class=\"line\">                                print(lrc.group()) </span><br><span class=\"line\">        </span><br><span class=\"line\">        print(&quot;--------------------&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">        filelist &#x3D; os.listdir(dir)      # 获取目录下所有的文件名称</span><br><span class=\"line\">        filelist.sort()                 # 按照数字排序</span><br><span class=\"line\">        </span><br><span class=\"line\">        for filename in filelist:</span><br><span class=\"line\">                process(filename)       # 将文件名传过去</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">        main()</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dayday ~]# python merge_final.py &gt; lecture.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"知识点整理\"><a href=\"#知识点整理\" class=\"headerlink\" title=\"知识点整理\"></a>知识点整理</h4><p><strong>1. 编码格式问题</strong></p>\n<p>在读取中文的情况下，通常会遇到一些编码的问题，但是首先需要了解目前的编码方式是什么，然后再用decode或者encode去编码和解码，下面是使用chardet库来查看编码方式的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import chardet</span><br><span class=\"line\"></span><br><span class=\"line\">path &#x3D; &quot;E:&#x2F;t.csv&quot;</span><br><span class=\"line\">f &#x3D; open(path,&#39;rb&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">data &#x3D; f.read()</span><br><span class=\"line\">print(chardet.detect(data))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dayday ~]# python test.py</span><br><span class=\"line\">&#123;&#39;encoding&#39;: &#39;GB2312&#39;, &#39;confidence&#39;: 0.99, &#39;language&#39;: &#39;Chinese&#39;&#125;</span><br></pre></td></tr></table></figure>\n<p>当时的字幕是从<a href=\"http://downsub.com/\" target=\"_blank\" rel=\"noopener\">downsub.com</a>网站下载的，编码格式是Windows-1254格式，在Python进行文件操作时总是报错，偷懒在notepad++下手动更改编码格式为utf-8，当然也可以用Python脚本实现。</p>\n<p><strong>2. 导入目录下所有文件的名称&amp;排序问题</strong></p>\n<p>这个就是知识没掌握的问题了，在此记录。os是个强大的模块！</p>\n<p><strong>3. 正则语法</strong></p>\n<p>好多语法格式都不熟练，一边调试一边查<a href=\"runoob.com\">runoob.com</a>，着实耗时间，需反复练习！</p>\n<p><strong>4. re.match()返回值问题</strong></p>\n<p>re.match()匹配成功返回re.match()对象，可用.group()方法提取字符串；匹配失败返回None。</p>\n<p>文件时是按行读取的，因此循环对行进行正则匹配，返回的结果中穿插着None和re.match对象，而None调用.group()方法会报错，所以在这简单的用if过滤掉了None。</p>\n<p>在敲这篇记录时突然想起，应该可以用Python的异常处理过滤掉报错，改天试试看</p>\n<p><strong>5. 养成随手记录的习惯</strong></p>\n<p>在整个解决过程中，查了很多资料，但没有随时记下来，解决完问题做记录的时候有些问题都忘记了！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用python中的re模块处理YouTube字幕文件\"><a href=\"#使用python中的re模块处理YouTube字幕文件\" class=\"headerlink\" title=\"使用python中的re模块处理YouTube字幕文件\"></a>使用python中的re模块处理YouTube字幕文件</h3><p>状况：18个字幕文件，编码格式Window-1254，命名规律，按数字排序</p>\n<p>需求：将字幕文件中的演讲词提取出来，剔除无用的字符，并合并为一个文件</p>\n<h4 id=\"文件命名格式\"><a href=\"#文件命名格式\" class=\"headerlink\" title=\"文件命名格式\"></a>文件命名格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls tmp&#x2F;</span><br><span class=\"line\">total 84K</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.1K Apr 22 14:50 02-Odyssey_Plans__The_Stages_of_Life.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 4.6K Apr 22 14:51 03-Odyssey_Plans__What_is_an_Odyssey_Plan_.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 2.5K Apr 22 14:51 04-Odyssey_Plans__What_does_an_Odyssey_Plan_Include_.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 2.9K Apr 22 14:52 05-Odyssey_Plans__Presentation_Format.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.5K Apr 22 14:52 06-Odyssey_Plans__5-Year_Timelines.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.2K Apr 22 14:53 07-Odyssey_Plans__6-Word_Title.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 2.0K Apr 22 14:53 08-Odyssey_Plans__Designing_3_Timelines.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.9K Apr 22 14:54 09-Odyssey_Plans__Building_your_10-year_timeline.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.3K Apr 22 14:54 10-Odyssey_Plans__Choosing_a_Symbol.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.2K Apr 22 14:54 11-Odyssey_Plans__Creating_a_Dashboard.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1013 Apr 22 14:54 12-Odyssey_Plans__Identifying_Questions.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1.6K Apr 22 14:55 13-Odyssey_Plans__Writing_a_Thank-You_note.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 2.8K Apr 22 14:55 14-Odyssey_Plans__How_to_&#39;Prototype&#39;_your_Odysseys.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 4.7K Apr 22 14:55 15-Odyssey_Plans__Prototype_Conversations_and_Experiences.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.7K Apr 22 14:55 16-Odyssey_Plans__How_often_to_design_an_Odyssey_plan.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.8K Apr 22 14:56 17-Odyssey_Plans__Insights_and_Takeaways.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 3.2K Apr 24 19:55 01-Odyssey_Plans__What_are_the_Odyssey_Years_.srt</span><br><span class=\"line\">-rw-r--r-- 1 root root 5.8K Apr 24 20:05 18-Odyssey_Plans__Applying_Designers&#39;_Mindsets.srt</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件内容格式\"><a href=\"#文件内容格式\" class=\"headerlink\" title=\"文件内容格式\"></a>文件内容格式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">00:00:03,590 --&gt; 00:00:04,710</span><br><span class=\"line\">My name is Bill Burnett.</span><br><span class=\"line\"></span><br><span class=\"line\">2</span><br><span class=\"line\">00:00:04,710 --&gt; 00:00:07,460</span><br><span class=\"line\">I&#39;m one of the co-authors</span><br><span class=\"line\">of Designing Your Life,</span><br><span class=\"line\"></span><br><span class=\"line\">3</span><br><span class=\"line\">00:00:07,460 --&gt; 00:00:09,410</span><br><span class=\"line\">How to Live a</span><br><span class=\"line\">Well-Lived Joyful Life.</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h4 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ul>\n<li>获取所有文件名存入列表  &lt;–  方便循环进行文件操作</li>\n<li>然后用正则匹配演讲词并打印出来  &lt;– 剔除无用字符</li>\n<li>执行脚本并将输出重定向到一个新文件 &lt;– 合并为一个文件</li>\n</ul>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Script_name: merge_final.py</span><br><span class=\"line\"></span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># 字幕文件所在目录</span><br><span class=\"line\">dir &#x3D; &quot;&#x2F;root&#x2F;tmp&#x2F;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">def process(filename):</span><br><span class=\"line\">        &#39;&#39;&#39;对文件进行操作&#39;&#39;&#39;</span><br><span class=\"line\">        print(filename)</span><br><span class=\"line\">        </span><br><span class=\"line\">        with open(dir+filename, &#39;r&#39;, encode&#x3D;&#39;utf-8&#39;) as f:       # 打开文件</span><br><span class=\"line\">                lines &#x3D; f.readlines()       # 按行读取整个文件，存入列表</span><br><span class=\"line\">                </span><br><span class=\"line\">                for line in lines:</span><br><span class=\"line\">                        # 剔除无用字符</span><br><span class=\"line\">                        lrc &#x3D; re.search(r&#39;^\\D.*[a-z.]&#39;, line) </span><br><span class=\"line\">                        if lrc: </span><br><span class=\"line\">                                print(lrc.group()) </span><br><span class=\"line\">        </span><br><span class=\"line\">        print(&quot;--------------------&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def main():</span><br><span class=\"line\">        filelist &#x3D; os.listdir(dir)      # 获取目录下所有的文件名称</span><br><span class=\"line\">        filelist.sort()                 # 按照数字排序</span><br><span class=\"line\">        </span><br><span class=\"line\">        for filename in filelist:</span><br><span class=\"line\">                process(filename)       # 将文件名传过去</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">        main()</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dayday ~]# python merge_final.py &gt; lecture.txt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"知识点整理\"><a href=\"#知识点整理\" class=\"headerlink\" title=\"知识点整理\"></a>知识点整理</h4><p><strong>1. 编码格式问题</strong></p>\n<p>在读取中文的情况下，通常会遇到一些编码的问题，但是首先需要了解目前的编码方式是什么，然后再用decode或者encode去编码和解码，下面是使用chardet库来查看编码方式的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import chardet</span><br><span class=\"line\"></span><br><span class=\"line\">path &#x3D; &quot;E:&#x2F;t.csv&quot;</span><br><span class=\"line\">f &#x3D; open(path,&#39;rb&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">data &#x3D; f.read()</span><br><span class=\"line\">print(chardet.detect(data))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dayday ~]# python test.py</span><br><span class=\"line\">&#123;&#39;encoding&#39;: &#39;GB2312&#39;, &#39;confidence&#39;: 0.99, &#39;language&#39;: &#39;Chinese&#39;&#125;</span><br></pre></td></tr></table></figure>\n<p>当时的字幕是从<a href=\"http://downsub.com/\" target=\"_blank\" rel=\"noopener\">downsub.com</a>网站下载的，编码格式是Windows-1254格式，在Python进行文件操作时总是报错，偷懒在notepad++下手动更改编码格式为utf-8，当然也可以用Python脚本实现。</p>\n<p><strong>2. 导入目录下所有文件的名称&amp;排序问题</strong></p>\n<p>这个就是知识没掌握的问题了，在此记录。os是个强大的模块！</p>\n<p><strong>3. 正则语法</strong></p>\n<p>好多语法格式都不熟练，一边调试一边查<a href=\"runoob.com\">runoob.com</a>，着实耗时间，需反复练习！</p>\n<p><strong>4. re.match()返回值问题</strong></p>\n<p>re.match()匹配成功返回re.match()对象，可用.group()方法提取字符串；匹配失败返回None。</p>\n<p>文件时是按行读取的，因此循环对行进行正则匹配，返回的结果中穿插着None和re.match对象，而None调用.group()方法会报错，所以在这简单的用if过滤掉了None。</p>\n<p>在敲这篇记录时突然想起，应该可以用Python的异常处理过滤掉报错，改天试试看</p>\n<p><strong>5. 养成随手记录的习惯</strong></p>\n<p>在整个解决过程中，查了很多资料，但没有随时记下来，解决完问题做记录的时候有些问题都忘记了！</p>\n"},{"title":"安装黑苹果记录","date":"2020-03-06T06:14:27.352Z","comments":1,"_content":"\n\n### 硬件平台：XiaoMi Air12.5 m3-6y30 4G+128G\n\n#### 完整备份win10系统\n\n建议使用win10系统自带备份功能。\n\n##### 恢复win10系统\n\n安装黑苹果会格掉整个盘，所以恢复时在U盘PE下使用系统镜像的install.wim软件左下角的恢复系统功能来进行恢复。\n\n#### 准备文件\n\n1. 系统镜像         [mirror](https://blog.daliansky.net/macOS-Mojave-10.14.4-18E226-official-version-with-Clover-4903-original-image.html)\n2. 刻盘软件etcher   [etcher](https://www.balena.io/etcher/)\n3. 专用EFI          [EFI](https://github.com/johnnync13/EFI-Xiaomi-Notebook-air-12-5.git)\n4. win10备份U盘，16G以上\n5. 黑苹果系统U盘，8G以上\n\n#### 制作安装镜像\n\n1. 格式化U盘\n2. 打开etcher软件\n3. 傻瓜式操作\n\n#### 替换EFI\n\n因为镜像自带的EFI不兼容air12.5，所以我们要手动替换为专用EFI\n\nwin10磁盘管理工具可以进入U盘的EFI分区，将专用EFI中的EFI目录替换进U盘EFI分区中\n\n#### 小米BIOS设置\n\n##### 升级BIOS版本至A05\nA04版本的BIOS有关机不断掉的Bug，所以我们需要更新BIOS至A05\n\n下载链接: [BIOS-A05](http://bbs.xiaomi.cn/t-13100333)\n\n按照帖子描述一键刷入即可。\n\n##### 设置BIOS\n关闭Secure Boot模式，不然无法引导至macOS。\n\n1. 开机按F2进BIOS\n2. Security -> Set Supervisor Password -> Installed  # 不设置密码不能关闭\n3. Securt Boot Mode -> Disabled\n\n> 开机按F12进入Boot Manager，设置从U盘启动。\n\n#### 安装黑苹果\n\n首先进入Clover界面，Clover是一个黑苹果引导工具，因为macOS不支持非苹果机运行，所以我们要通过第三方工具来修正一系列底层参数，以正确的在非苹果机上引导macOS，该程序就是Clover\n\n1. 屏幕亮起，进入Clover\n2. 选择 Boot OS X Install from XiaoMi\n3. 拷贝镜像到磁盘。。。。。。。。。\n\n进入macOS恢复模式，开始安装\n1. 选择语言\n\n抹掉硬盘，确保你已经将所有的重要数据正确的备份到其他存储介质上。\n\n1. 选中macOS实用工具 -> 磁盘工具 -> 左上角选项-显示所有设备\n6. 选择本地磁盘SSD Media -> 上方功能栏-抹掉\n7. 选择默认的Mac OS扩展(日志型)  rename-->Macintosh HD  -> 抹掉\n8. 退出磁盘工具\n\n真正开始安装macOS\n\n1. 安装macOS\n2. 进入安装界面\n3. 开始安装\n\n#### 安装第二阶段\n\n等。。。。。。\n\n#### 设置向导\n\n略\n\n#### 替换EFI\n\n因为EFI分区此时还在U盘上，所以我们需要将EFI文件拷贝到本地磁盘的EFI分区上\n\n1.挂载EFI分区\n\n打开终端，输入以下命令\n\n```\n$ diskutil list                # 查看磁盘分区表\n$ diskutil mount disk0s1        # 挂载磁盘FEI分区\n$ diskutil mount disk1s1        # 挂载U盘EFI分区\n$ find .                      # 打开Finder，进行替换操作\n```\n\n2. 合并EFI\n\n纯净安装macOS，没有Win10系统的EFI，不需要合并，此步省略\n\n3. 替换EFI\n\n将U盘EFI分区下的EFI目录复制到磁盘EFI分区下\n\n#### 完善网卡驱动\n\nMac本身不支持小米自带的网卡型号，无解，扩展槽无法添加WIFI无线网卡，只能选择外置USB网卡。\n\n或者使用USB网络共享暂时上网 [HoRNDIS](https://github.com/jwise/HoRNDIS/releases)，下载安装即可。\n\nUSB连接手机，手机上打开热点，即可上网。\n\n#### 开启HiDPI\n\n1080P分辨率在12寸的屏幕上显示的字体特别小，所以有了开启HiDPI的需求\n\n教程链接 [开启HiDPI](https://zhih.me/one-key-hidpi/)\n脚本下载链接 [下载HiDPI](https://github.com/xzhih/one-key-hidpi.git)\n\n#### GitHub访问加速\n\n域名的IP地址在 https://www.ipaddress.com 查询\n```\n$ sudo vim /etc/hosts\n# github\n192.30.253.112 GitHub.com\n185.199.108.153 assets-cdn.github.com\n151.101.185.194 github.global.ssl.fastly.net\n```\n\n感谢提供专用EFI的作者[johnnync13](https://github.com/johnnync13/)\n感谢提供思路的[etrock](http://bbs.xiaomi.cn/t-36526099)\n感谢提供镜像的作者[黑果小兵](https://blog.daliansky.net)","source":"_posts/安装黑苹果小记.md","raw":"---\ntitle: 安装黑苹果记录\ndate: {{ date }}\ntags: hackintosh\ncategories:\ncomments: true\n---\n\n\n### 硬件平台：XiaoMi Air12.5 m3-6y30 4G+128G\n\n#### 完整备份win10系统\n\n建议使用win10系统自带备份功能。\n\n##### 恢复win10系统\n\n安装黑苹果会格掉整个盘，所以恢复时在U盘PE下使用系统镜像的install.wim软件左下角的恢复系统功能来进行恢复。\n\n#### 准备文件\n\n1. 系统镜像         [mirror](https://blog.daliansky.net/macOS-Mojave-10.14.4-18E226-official-version-with-Clover-4903-original-image.html)\n2. 刻盘软件etcher   [etcher](https://www.balena.io/etcher/)\n3. 专用EFI          [EFI](https://github.com/johnnync13/EFI-Xiaomi-Notebook-air-12-5.git)\n4. win10备份U盘，16G以上\n5. 黑苹果系统U盘，8G以上\n\n#### 制作安装镜像\n\n1. 格式化U盘\n2. 打开etcher软件\n3. 傻瓜式操作\n\n#### 替换EFI\n\n因为镜像自带的EFI不兼容air12.5，所以我们要手动替换为专用EFI\n\nwin10磁盘管理工具可以进入U盘的EFI分区，将专用EFI中的EFI目录替换进U盘EFI分区中\n\n#### 小米BIOS设置\n\n##### 升级BIOS版本至A05\nA04版本的BIOS有关机不断掉的Bug，所以我们需要更新BIOS至A05\n\n下载链接: [BIOS-A05](http://bbs.xiaomi.cn/t-13100333)\n\n按照帖子描述一键刷入即可。\n\n##### 设置BIOS\n关闭Secure Boot模式，不然无法引导至macOS。\n\n1. 开机按F2进BIOS\n2. Security -> Set Supervisor Password -> Installed  # 不设置密码不能关闭\n3. Securt Boot Mode -> Disabled\n\n> 开机按F12进入Boot Manager，设置从U盘启动。\n\n#### 安装黑苹果\n\n首先进入Clover界面，Clover是一个黑苹果引导工具，因为macOS不支持非苹果机运行，所以我们要通过第三方工具来修正一系列底层参数，以正确的在非苹果机上引导macOS，该程序就是Clover\n\n1. 屏幕亮起，进入Clover\n2. 选择 Boot OS X Install from XiaoMi\n3. 拷贝镜像到磁盘。。。。。。。。。\n\n进入macOS恢复模式，开始安装\n1. 选择语言\n\n抹掉硬盘，确保你已经将所有的重要数据正确的备份到其他存储介质上。\n\n1. 选中macOS实用工具 -> 磁盘工具 -> 左上角选项-显示所有设备\n6. 选择本地磁盘SSD Media -> 上方功能栏-抹掉\n7. 选择默认的Mac OS扩展(日志型)  rename-->Macintosh HD  -> 抹掉\n8. 退出磁盘工具\n\n真正开始安装macOS\n\n1. 安装macOS\n2. 进入安装界面\n3. 开始安装\n\n#### 安装第二阶段\n\n等。。。。。。\n\n#### 设置向导\n\n略\n\n#### 替换EFI\n\n因为EFI分区此时还在U盘上，所以我们需要将EFI文件拷贝到本地磁盘的EFI分区上\n\n1.挂载EFI分区\n\n打开终端，输入以下命令\n\n```\n$ diskutil list                # 查看磁盘分区表\n$ diskutil mount disk0s1        # 挂载磁盘FEI分区\n$ diskutil mount disk1s1        # 挂载U盘EFI分区\n$ find .                      # 打开Finder，进行替换操作\n```\n\n2. 合并EFI\n\n纯净安装macOS，没有Win10系统的EFI，不需要合并，此步省略\n\n3. 替换EFI\n\n将U盘EFI分区下的EFI目录复制到磁盘EFI分区下\n\n#### 完善网卡驱动\n\nMac本身不支持小米自带的网卡型号，无解，扩展槽无法添加WIFI无线网卡，只能选择外置USB网卡。\n\n或者使用USB网络共享暂时上网 [HoRNDIS](https://github.com/jwise/HoRNDIS/releases)，下载安装即可。\n\nUSB连接手机，手机上打开热点，即可上网。\n\n#### 开启HiDPI\n\n1080P分辨率在12寸的屏幕上显示的字体特别小，所以有了开启HiDPI的需求\n\n教程链接 [开启HiDPI](https://zhih.me/one-key-hidpi/)\n脚本下载链接 [下载HiDPI](https://github.com/xzhih/one-key-hidpi.git)\n\n#### GitHub访问加速\n\n域名的IP地址在 https://www.ipaddress.com 查询\n```\n$ sudo vim /etc/hosts\n# github\n192.30.253.112 GitHub.com\n185.199.108.153 assets-cdn.github.com\n151.101.185.194 github.global.ssl.fastly.net\n```\n\n感谢提供专用EFI的作者[johnnync13](https://github.com/johnnync13/)\n感谢提供思路的[etrock](http://bbs.xiaomi.cn/t-36526099)\n感谢提供镜像的作者[黑果小兵](https://blog.daliansky.net)","slug":"安装黑苹果小记","published":1,"updated":"2020-03-06T06:14:27.352Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xg000lk859bqfi2jy4","content":"<h3 id=\"硬件平台：XiaoMi-Air12-5-m3-6y30-4G-128G\"><a href=\"#硬件平台：XiaoMi-Air12-5-m3-6y30-4G-128G\" class=\"headerlink\" title=\"硬件平台：XiaoMi Air12.5 m3-6y30 4G+128G\"></a>硬件平台：XiaoMi Air12.5 m3-6y30 4G+128G</h3><h4 id=\"完整备份win10系统\"><a href=\"#完整备份win10系统\" class=\"headerlink\" title=\"完整备份win10系统\"></a>完整备份win10系统</h4><p>建议使用win10系统自带备份功能。</p>\n<h5 id=\"恢复win10系统\"><a href=\"#恢复win10系统\" class=\"headerlink\" title=\"恢复win10系统\"></a>恢复win10系统</h5><p>安装黑苹果会格掉整个盘，所以恢复时在U盘PE下使用系统镜像的install.wim软件左下角的恢复系统功能来进行恢复。</p>\n<h4 id=\"准备文件\"><a href=\"#准备文件\" class=\"headerlink\" title=\"准备文件\"></a>准备文件</h4><ol>\n<li>系统镜像         <a href=\"https://blog.daliansky.net/macOS-Mojave-10.14.4-18E226-official-version-with-Clover-4903-original-image.html\" target=\"_blank\" rel=\"noopener\">mirror</a></li>\n<li>刻盘软件etcher   <a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"noopener\">etcher</a></li>\n<li>专用EFI          <a href=\"https://github.com/johnnync13/EFI-Xiaomi-Notebook-air-12-5.git\" target=\"_blank\" rel=\"noopener\">EFI</a></li>\n<li>win10备份U盘，16G以上</li>\n<li>黑苹果系统U盘，8G以上</li>\n</ol>\n<h4 id=\"制作安装镜像\"><a href=\"#制作安装镜像\" class=\"headerlink\" title=\"制作安装镜像\"></a>制作安装镜像</h4><ol>\n<li>格式化U盘</li>\n<li>打开etcher软件</li>\n<li>傻瓜式操作</li>\n</ol>\n<h4 id=\"替换EFI\"><a href=\"#替换EFI\" class=\"headerlink\" title=\"替换EFI\"></a>替换EFI</h4><p>因为镜像自带的EFI不兼容air12.5，所以我们要手动替换为专用EFI</p>\n<p>win10磁盘管理工具可以进入U盘的EFI分区，将专用EFI中的EFI目录替换进U盘EFI分区中</p>\n<h4 id=\"小米BIOS设置\"><a href=\"#小米BIOS设置\" class=\"headerlink\" title=\"小米BIOS设置\"></a>小米BIOS设置</h4><h5 id=\"升级BIOS版本至A05\"><a href=\"#升级BIOS版本至A05\" class=\"headerlink\" title=\"升级BIOS版本至A05\"></a>升级BIOS版本至A05</h5><p>A04版本的BIOS有关机不断掉的Bug，所以我们需要更新BIOS至A05</p>\n<p>下载链接: <a href=\"http://bbs.xiaomi.cn/t-13100333\" target=\"_blank\" rel=\"noopener\">BIOS-A05</a></p>\n<p>按照帖子描述一键刷入即可。</p>\n<h5 id=\"设置BIOS\"><a href=\"#设置BIOS\" class=\"headerlink\" title=\"设置BIOS\"></a>设置BIOS</h5><p>关闭Secure Boot模式，不然无法引导至macOS。</p>\n<ol>\n<li>开机按F2进BIOS</li>\n<li>Security -&gt; Set Supervisor Password -&gt; Installed  # 不设置密码不能关闭</li>\n<li>Securt Boot Mode -&gt; Disabled</li>\n</ol>\n<blockquote>\n<p>开机按F12进入Boot Manager，设置从U盘启动。</p>\n</blockquote>\n<h4 id=\"安装黑苹果\"><a href=\"#安装黑苹果\" class=\"headerlink\" title=\"安装黑苹果\"></a>安装黑苹果</h4><p>首先进入Clover界面，Clover是一个黑苹果引导工具，因为macOS不支持非苹果机运行，所以我们要通过第三方工具来修正一系列底层参数，以正确的在非苹果机上引导macOS，该程序就是Clover</p>\n<ol>\n<li>屏幕亮起，进入Clover</li>\n<li>选择 Boot OS X Install from XiaoMi</li>\n<li>拷贝镜像到磁盘。。。。。。。。。</li>\n</ol>\n<p>进入macOS恢复模式，开始安装</p>\n<ol>\n<li>选择语言</li>\n</ol>\n<p>抹掉硬盘，确保你已经将所有的重要数据正确的备份到其他存储介质上。</p>\n<ol>\n<li>选中macOS实用工具 -&gt; 磁盘工具 -&gt; 左上角选项-显示所有设备</li>\n<li>选择本地磁盘SSD Media -&gt; 上方功能栏-抹掉</li>\n<li>选择默认的Mac OS扩展(日志型)  rename–&gt;Macintosh HD  -&gt; 抹掉</li>\n<li>退出磁盘工具</li>\n</ol>\n<p>真正开始安装macOS</p>\n<ol>\n<li>安装macOS</li>\n<li>进入安装界面</li>\n<li>开始安装</li>\n</ol>\n<h4 id=\"安装第二阶段\"><a href=\"#安装第二阶段\" class=\"headerlink\" title=\"安装第二阶段\"></a>安装第二阶段</h4><p>等。。。。。。</p>\n<h4 id=\"设置向导\"><a href=\"#设置向导\" class=\"headerlink\" title=\"设置向导\"></a>设置向导</h4><p>略</p>\n<h4 id=\"替换EFI-1\"><a href=\"#替换EFI-1\" class=\"headerlink\" title=\"替换EFI\"></a>替换EFI</h4><p>因为EFI分区此时还在U盘上，所以我们需要将EFI文件拷贝到本地磁盘的EFI分区上</p>\n<p>1.挂载EFI分区</p>\n<p>打开终端，输入以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ diskutil list                # 查看磁盘分区表</span><br><span class=\"line\">$ diskutil mount disk0s1        # 挂载磁盘FEI分区</span><br><span class=\"line\">$ diskutil mount disk1s1        # 挂载U盘EFI分区</span><br><span class=\"line\">$ find .                      # 打开Finder，进行替换操作</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>合并EFI</li>\n</ol>\n<p>纯净安装macOS，没有Win10系统的EFI，不需要合并，此步省略</p>\n<ol start=\"3\">\n<li>替换EFI</li>\n</ol>\n<p>将U盘EFI分区下的EFI目录复制到磁盘EFI分区下</p>\n<h4 id=\"完善网卡驱动\"><a href=\"#完善网卡驱动\" class=\"headerlink\" title=\"完善网卡驱动\"></a>完善网卡驱动</h4><p>Mac本身不支持小米自带的网卡型号，无解，扩展槽无法添加WIFI无线网卡，只能选择外置USB网卡。</p>\n<p>或者使用USB网络共享暂时上网 <a href=\"https://github.com/jwise/HoRNDIS/releases\" target=\"_blank\" rel=\"noopener\">HoRNDIS</a>，下载安装即可。</p>\n<p>USB连接手机，手机上打开热点，即可上网。</p>\n<h4 id=\"开启HiDPI\"><a href=\"#开启HiDPI\" class=\"headerlink\" title=\"开启HiDPI\"></a>开启HiDPI</h4><p>1080P分辨率在12寸的屏幕上显示的字体特别小，所以有了开启HiDPI的需求</p>\n<p>教程链接 <a href=\"https://zhih.me/one-key-hidpi/\" target=\"_blank\" rel=\"noopener\">开启HiDPI</a><br>脚本下载链接 <a href=\"https://github.com/xzhih/one-key-hidpi.git\" target=\"_blank\" rel=\"noopener\">下载HiDPI</a></p>\n<h4 id=\"GitHub访问加速\"><a href=\"#GitHub访问加速\" class=\"headerlink\" title=\"GitHub访问加速\"></a>GitHub访问加速</h4><p>域名的IP地址在 <a href=\"https://www.ipaddress.com\" target=\"_blank\" rel=\"noopener\">https://www.ipaddress.com</a> 查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim &#x2F;etc&#x2F;hosts</span><br><span class=\"line\"># github</span><br><span class=\"line\">192.30.253.112 GitHub.com</span><br><span class=\"line\">185.199.108.153 assets-cdn.github.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n\n<p>感谢提供专用EFI的作者<a href=\"https://github.com/johnnync13/\" target=\"_blank\" rel=\"noopener\">johnnync13</a><br>感谢提供思路的<a href=\"http://bbs.xiaomi.cn/t-36526099\" target=\"_blank\" rel=\"noopener\">etrock</a><br>感谢提供镜像的作者<a href=\"https://blog.daliansky.net\" target=\"_blank\" rel=\"noopener\">黑果小兵</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"硬件平台：XiaoMi-Air12-5-m3-6y30-4G-128G\"><a href=\"#硬件平台：XiaoMi-Air12-5-m3-6y30-4G-128G\" class=\"headerlink\" title=\"硬件平台：XiaoMi Air12.5 m3-6y30 4G+128G\"></a>硬件平台：XiaoMi Air12.5 m3-6y30 4G+128G</h3><h4 id=\"完整备份win10系统\"><a href=\"#完整备份win10系统\" class=\"headerlink\" title=\"完整备份win10系统\"></a>完整备份win10系统</h4><p>建议使用win10系统自带备份功能。</p>\n<h5 id=\"恢复win10系统\"><a href=\"#恢复win10系统\" class=\"headerlink\" title=\"恢复win10系统\"></a>恢复win10系统</h5><p>安装黑苹果会格掉整个盘，所以恢复时在U盘PE下使用系统镜像的install.wim软件左下角的恢复系统功能来进行恢复。</p>\n<h4 id=\"准备文件\"><a href=\"#准备文件\" class=\"headerlink\" title=\"准备文件\"></a>准备文件</h4><ol>\n<li>系统镜像         <a href=\"https://blog.daliansky.net/macOS-Mojave-10.14.4-18E226-official-version-with-Clover-4903-original-image.html\" target=\"_blank\" rel=\"noopener\">mirror</a></li>\n<li>刻盘软件etcher   <a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"noopener\">etcher</a></li>\n<li>专用EFI          <a href=\"https://github.com/johnnync13/EFI-Xiaomi-Notebook-air-12-5.git\" target=\"_blank\" rel=\"noopener\">EFI</a></li>\n<li>win10备份U盘，16G以上</li>\n<li>黑苹果系统U盘，8G以上</li>\n</ol>\n<h4 id=\"制作安装镜像\"><a href=\"#制作安装镜像\" class=\"headerlink\" title=\"制作安装镜像\"></a>制作安装镜像</h4><ol>\n<li>格式化U盘</li>\n<li>打开etcher软件</li>\n<li>傻瓜式操作</li>\n</ol>\n<h4 id=\"替换EFI\"><a href=\"#替换EFI\" class=\"headerlink\" title=\"替换EFI\"></a>替换EFI</h4><p>因为镜像自带的EFI不兼容air12.5，所以我们要手动替换为专用EFI</p>\n<p>win10磁盘管理工具可以进入U盘的EFI分区，将专用EFI中的EFI目录替换进U盘EFI分区中</p>\n<h4 id=\"小米BIOS设置\"><a href=\"#小米BIOS设置\" class=\"headerlink\" title=\"小米BIOS设置\"></a>小米BIOS设置</h4><h5 id=\"升级BIOS版本至A05\"><a href=\"#升级BIOS版本至A05\" class=\"headerlink\" title=\"升级BIOS版本至A05\"></a>升级BIOS版本至A05</h5><p>A04版本的BIOS有关机不断掉的Bug，所以我们需要更新BIOS至A05</p>\n<p>下载链接: <a href=\"http://bbs.xiaomi.cn/t-13100333\" target=\"_blank\" rel=\"noopener\">BIOS-A05</a></p>\n<p>按照帖子描述一键刷入即可。</p>\n<h5 id=\"设置BIOS\"><a href=\"#设置BIOS\" class=\"headerlink\" title=\"设置BIOS\"></a>设置BIOS</h5><p>关闭Secure Boot模式，不然无法引导至macOS。</p>\n<ol>\n<li>开机按F2进BIOS</li>\n<li>Security -&gt; Set Supervisor Password -&gt; Installed  # 不设置密码不能关闭</li>\n<li>Securt Boot Mode -&gt; Disabled</li>\n</ol>\n<blockquote>\n<p>开机按F12进入Boot Manager，设置从U盘启动。</p>\n</blockquote>\n<h4 id=\"安装黑苹果\"><a href=\"#安装黑苹果\" class=\"headerlink\" title=\"安装黑苹果\"></a>安装黑苹果</h4><p>首先进入Clover界面，Clover是一个黑苹果引导工具，因为macOS不支持非苹果机运行，所以我们要通过第三方工具来修正一系列底层参数，以正确的在非苹果机上引导macOS，该程序就是Clover</p>\n<ol>\n<li>屏幕亮起，进入Clover</li>\n<li>选择 Boot OS X Install from XiaoMi</li>\n<li>拷贝镜像到磁盘。。。。。。。。。</li>\n</ol>\n<p>进入macOS恢复模式，开始安装</p>\n<ol>\n<li>选择语言</li>\n</ol>\n<p>抹掉硬盘，确保你已经将所有的重要数据正确的备份到其他存储介质上。</p>\n<ol>\n<li>选中macOS实用工具 -&gt; 磁盘工具 -&gt; 左上角选项-显示所有设备</li>\n<li>选择本地磁盘SSD Media -&gt; 上方功能栏-抹掉</li>\n<li>选择默认的Mac OS扩展(日志型)  rename–&gt;Macintosh HD  -&gt; 抹掉</li>\n<li>退出磁盘工具</li>\n</ol>\n<p>真正开始安装macOS</p>\n<ol>\n<li>安装macOS</li>\n<li>进入安装界面</li>\n<li>开始安装</li>\n</ol>\n<h4 id=\"安装第二阶段\"><a href=\"#安装第二阶段\" class=\"headerlink\" title=\"安装第二阶段\"></a>安装第二阶段</h4><p>等。。。。。。</p>\n<h4 id=\"设置向导\"><a href=\"#设置向导\" class=\"headerlink\" title=\"设置向导\"></a>设置向导</h4><p>略</p>\n<h4 id=\"替换EFI-1\"><a href=\"#替换EFI-1\" class=\"headerlink\" title=\"替换EFI\"></a>替换EFI</h4><p>因为EFI分区此时还在U盘上，所以我们需要将EFI文件拷贝到本地磁盘的EFI分区上</p>\n<p>1.挂载EFI分区</p>\n<p>打开终端，输入以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ diskutil list                # 查看磁盘分区表</span><br><span class=\"line\">$ diskutil mount disk0s1        # 挂载磁盘FEI分区</span><br><span class=\"line\">$ diskutil mount disk1s1        # 挂载U盘EFI分区</span><br><span class=\"line\">$ find .                      # 打开Finder，进行替换操作</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>合并EFI</li>\n</ol>\n<p>纯净安装macOS，没有Win10系统的EFI，不需要合并，此步省略</p>\n<ol start=\"3\">\n<li>替换EFI</li>\n</ol>\n<p>将U盘EFI分区下的EFI目录复制到磁盘EFI分区下</p>\n<h4 id=\"完善网卡驱动\"><a href=\"#完善网卡驱动\" class=\"headerlink\" title=\"完善网卡驱动\"></a>完善网卡驱动</h4><p>Mac本身不支持小米自带的网卡型号，无解，扩展槽无法添加WIFI无线网卡，只能选择外置USB网卡。</p>\n<p>或者使用USB网络共享暂时上网 <a href=\"https://github.com/jwise/HoRNDIS/releases\" target=\"_blank\" rel=\"noopener\">HoRNDIS</a>，下载安装即可。</p>\n<p>USB连接手机，手机上打开热点，即可上网。</p>\n<h4 id=\"开启HiDPI\"><a href=\"#开启HiDPI\" class=\"headerlink\" title=\"开启HiDPI\"></a>开启HiDPI</h4><p>1080P分辨率在12寸的屏幕上显示的字体特别小，所以有了开启HiDPI的需求</p>\n<p>教程链接 <a href=\"https://zhih.me/one-key-hidpi/\" target=\"_blank\" rel=\"noopener\">开启HiDPI</a><br>脚本下载链接 <a href=\"https://github.com/xzhih/one-key-hidpi.git\" target=\"_blank\" rel=\"noopener\">下载HiDPI</a></p>\n<h4 id=\"GitHub访问加速\"><a href=\"#GitHub访问加速\" class=\"headerlink\" title=\"GitHub访问加速\"></a>GitHub访问加速</h4><p>域名的IP地址在 <a href=\"https://www.ipaddress.com\" target=\"_blank\" rel=\"noopener\">https://www.ipaddress.com</a> 查询</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vim &#x2F;etc&#x2F;hosts</span><br><span class=\"line\"># github</span><br><span class=\"line\">192.30.253.112 GitHub.com</span><br><span class=\"line\">185.199.108.153 assets-cdn.github.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>\n\n<p>感谢提供专用EFI的作者<a href=\"https://github.com/johnnync13/\" target=\"_blank\" rel=\"noopener\">johnnync13</a><br>感谢提供思路的<a href=\"http://bbs.xiaomi.cn/t-36526099\" target=\"_blank\" rel=\"noopener\">etrock</a><br>感谢提供镜像的作者<a href=\"https://blog.daliansky.net\" target=\"_blank\" rel=\"noopener\">黑果小兵</a></p>\n"},{"title":"计算机网络-应用层","date":"2020-03-06T06:16:51.074Z","comments":1,"_content":"\n\n### 域名系统DNS\n\nDNS（Domain Name Protocol）\nDNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。\n\n域名具有层次结构，从上到下以此为：根域名、顶级域名、二级域名。\n\n#### 域名服务器\n根据其功能分为：根域名服务器、顶级域名服务器、权限域名服务器、本地域名服务器。    \n前三者用于提供DNS解析**数据**，本地域名服务器用于提供DNS解析**服务**。\n\n主机向本地域名服务器查询一般采用**递归查询**，  \n本地域名服务器向根域名服务器的查询一般采用**迭代查询**。\n\n![](https://ae01.alicdn.com/kf/HTB1xaNxeliE3KVjSZFMq6zQhVXau.jpg)\n\nDNS 可以使用 UDP 或 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：\n- 如果返回的响应超过的 512 字节（UDP最大支持512字节的数据）\n- 区域传送（区域传送是主域服务器向辅助域名服务器传送变化的那部分数据）\n\n### 文件传送协议FTP\n\nFTP（File Transfer Protocol）\n\nFTP 使用的 TCP 进行连接，它需要两个连接来传送一个文件：\n- 控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传送服务器的应答。\n- 数据连接：用来传送一个文件数据。\n\n根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：\n\n- 主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。\n\n![](https://ae01.alicdn.com/kf/HTB1g8NDelKw3KVjSZFOq6yrDVXaP.jpg)\n\n- 被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。\n\n![](https://ae01.alicdn.com/kf/HTB149Vyel1D3KVjSZFyq6zuFpXa5.jpg)\n\n主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。\n\n### 简单文件传送协议TFTP\n\nTFTP（Trivial File Transfer Protocol）\n\n主要用于手机端，使用客户服务器方式，但使用 UDP 协议进行通信，TFTP 只支持文件传输而不支持交互。 \nTFTP 没有庞大的命令集，没有列目录功能，也不能对用户进行身份鉴别。\n\n#### TFTP的主要优点：\n\n1. TFTP 可用于 UDP 环境。\n2. TFTP 代码所占的内存较小。\n3. 每次传送的数据报文中有 512 个字节数据，最后一次可不足 512 字节\n4. 数据报文按序编号，从 1 开始。\n5. 支持 ASCII 码或二进制传送。\n6. 可对文件进行读写。\n7. 很用很简单的首部。\n\n\n### 动态主机配置协议DHCP\n\nDHCP（Dynamic Host Configuration Protocol）提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。\n\nDHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。\n\nDHCP 工作过程：\n\n1. 客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。\n2. DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。\n3. 如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。\n4. DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。\n\n![](https://ae01.alicdn.com/kf/HTB1ysVxegaH3KVjSZFjq6AFWpXai.jpg)\n\n### 远程登录协议TELNET\n\n又称**终端仿真协议**。\n\nTELNET 用于登陆到远程主机上，并且远程主机上的输出也会返回。\n\nTELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统的换行符定义。即所谓的**网络虚拟终端NVT**（Network Virtual Terminal）\n\n### 电子邮件协议\n\n一个电子邮件系统由三部分组成：用户代理、邮件服务器、邮件协议。\n\n邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。\n\n![](https://ae01.alicdn.com/kf/HTB1H.pHebus3KVjSZKb760qkFXaR.png)\n\n#### 1.SMTP\n\nSMTP（Simple Mail Transfer Protocol）简单邮件传送协议\n\nSMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。\n\nMIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。\n\n![](https://ae01.alicdn.com/kf/HTB1glCLbvBj_uVjSZFp7630SXXam.png)\n\n#### 2. POP3\n\nPOP3（Post Office Protocol）邮局协议\n\nPOP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。\n\n#### 3. IMAP\n\nIMAP（Internet Message Access Protocol）网际报文存取协议\n\nIAMP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以上用户随时随地去访问服务器上的邮件。\n\n#### 电子邮件的地址格式\n\n用户名 @ 邮件服务器的域名   \n示例：xyz@abc.com   \nxyz为用户名，abc.com为邮件服务器域名\n\n#### 电子邮件的信息格式\n\n一个电子邮件分为**信封**和**内容**两大部分。\n\n首部关键字：\n\n- To：后跟一个或多个收件人邮件地址\n- Subject：邮件主题\n- Cc：抄送，收件人可以看到抄送人\n- Bcc：暗送，收件人不知情\n- From：发件人的电邮地址\n- Date：发新日期\n- Reply-To：对方回信地址\n\n\n### 常用端口\n\n应用|应用层协议|端口号|传输层协议|备注\n---|---|---|---|---\n域名解析|DNS|53|UDP/TCP|长度超过 512 字节时使用 TCP\n动态主机配置协议|DHCP|67/68|UDP\t\n简单网络管理协议|SNMP|161/162|UDP\t\n文件传送协议|FTP|20/21|TCP|控制连接 21，数据连接 20\n远程终端协议|TELNET|23|TCP\t\n超文本传送协议|HTTP|80|TCP\t\n简单邮件传送协议|SMTP|25|TCP\t\n邮件读取协议|POP3|110|TCP\t\n网际报文存取协议|IMAP|143|TCP\n\n### 万维网WWW\nWWW（World Wide Web），英文简称Web。    \n万维网是一个大规模、联机式的信息储藏所。    \n万维网以客户服务器方式工作。    \n\n#### 统一资源定位符URL\n\nURL（Uniform Resource Locator）\n\n格式：<协议>://<主机>:<端口>/<路径>\n\n### Web 页面请求过程\n\n#### 1. DHCP 配置主机信息\n\n- 假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。\n\n- 主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。\n\n- 该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。\n\n- 该数据报被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。\n\n- 连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。\n\n- 该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。\n\n- 主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。\n\n#### 2. ARP 解析 MAC 地址\n\n- 主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。\n\n- 主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。\n\n- 该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。\n\n- 该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。\n\n- DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。\n\n- 主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。\n\n- 网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机\n\n#### 3. DNS 解析域名\n\n- 知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。\n\n- 网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。\n\n- 因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。\n\n- 到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。\n\n- 找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。\n\n#### 4. HTTP 请求页面\n\n- 有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。\n\n- 在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。\n\n- HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。\n\n- 连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。\n\n- HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。\n\n- 浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。","source":"_posts/应用层-over.md","raw":"---\ntitle: 计算机网络-应用层\ndate: {{ date }}\ntags: Internet\ncategories:\ncomments: true\n---\n\n\n### 域名系统DNS\n\nDNS（Domain Name Protocol）\nDNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。\n\n域名具有层次结构，从上到下以此为：根域名、顶级域名、二级域名。\n\n#### 域名服务器\n根据其功能分为：根域名服务器、顶级域名服务器、权限域名服务器、本地域名服务器。    \n前三者用于提供DNS解析**数据**，本地域名服务器用于提供DNS解析**服务**。\n\n主机向本地域名服务器查询一般采用**递归查询**，  \n本地域名服务器向根域名服务器的查询一般采用**迭代查询**。\n\n![](https://ae01.alicdn.com/kf/HTB1xaNxeliE3KVjSZFMq6zQhVXau.jpg)\n\nDNS 可以使用 UDP 或 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：\n- 如果返回的响应超过的 512 字节（UDP最大支持512字节的数据）\n- 区域传送（区域传送是主域服务器向辅助域名服务器传送变化的那部分数据）\n\n### 文件传送协议FTP\n\nFTP（File Transfer Protocol）\n\nFTP 使用的 TCP 进行连接，它需要两个连接来传送一个文件：\n- 控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传送服务器的应答。\n- 数据连接：用来传送一个文件数据。\n\n根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：\n\n- 主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。\n\n![](https://ae01.alicdn.com/kf/HTB1g8NDelKw3KVjSZFOq6yrDVXaP.jpg)\n\n- 被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。\n\n![](https://ae01.alicdn.com/kf/HTB149Vyel1D3KVjSZFyq6zuFpXa5.jpg)\n\n主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。\n\n### 简单文件传送协议TFTP\n\nTFTP（Trivial File Transfer Protocol）\n\n主要用于手机端，使用客户服务器方式，但使用 UDP 协议进行通信，TFTP 只支持文件传输而不支持交互。 \nTFTP 没有庞大的命令集，没有列目录功能，也不能对用户进行身份鉴别。\n\n#### TFTP的主要优点：\n\n1. TFTP 可用于 UDP 环境。\n2. TFTP 代码所占的内存较小。\n3. 每次传送的数据报文中有 512 个字节数据，最后一次可不足 512 字节\n4. 数据报文按序编号，从 1 开始。\n5. 支持 ASCII 码或二进制传送。\n6. 可对文件进行读写。\n7. 很用很简单的首部。\n\n\n### 动态主机配置协议DHCP\n\nDHCP（Dynamic Host Configuration Protocol）提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。\n\nDHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。\n\nDHCP 工作过程：\n\n1. 客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。\n2. DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。\n3. 如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。\n4. DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。\n\n![](https://ae01.alicdn.com/kf/HTB1ysVxegaH3KVjSZFjq6AFWpXai.jpg)\n\n### 远程登录协议TELNET\n\n又称**终端仿真协议**。\n\nTELNET 用于登陆到远程主机上，并且远程主机上的输出也会返回。\n\nTELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统的换行符定义。即所谓的**网络虚拟终端NVT**（Network Virtual Terminal）\n\n### 电子邮件协议\n\n一个电子邮件系统由三部分组成：用户代理、邮件服务器、邮件协议。\n\n邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。\n\n![](https://ae01.alicdn.com/kf/HTB1H.pHebus3KVjSZKb760qkFXaR.png)\n\n#### 1.SMTP\n\nSMTP（Simple Mail Transfer Protocol）简单邮件传送协议\n\nSMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。\n\nMIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。\n\n![](https://ae01.alicdn.com/kf/HTB1glCLbvBj_uVjSZFp7630SXXam.png)\n\n#### 2. POP3\n\nPOP3（Post Office Protocol）邮局协议\n\nPOP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。\n\n#### 3. IMAP\n\nIMAP（Internet Message Access Protocol）网际报文存取协议\n\nIAMP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以上用户随时随地去访问服务器上的邮件。\n\n#### 电子邮件的地址格式\n\n用户名 @ 邮件服务器的域名   \n示例：xyz@abc.com   \nxyz为用户名，abc.com为邮件服务器域名\n\n#### 电子邮件的信息格式\n\n一个电子邮件分为**信封**和**内容**两大部分。\n\n首部关键字：\n\n- To：后跟一个或多个收件人邮件地址\n- Subject：邮件主题\n- Cc：抄送，收件人可以看到抄送人\n- Bcc：暗送，收件人不知情\n- From：发件人的电邮地址\n- Date：发新日期\n- Reply-To：对方回信地址\n\n\n### 常用端口\n\n应用|应用层协议|端口号|传输层协议|备注\n---|---|---|---|---\n域名解析|DNS|53|UDP/TCP|长度超过 512 字节时使用 TCP\n动态主机配置协议|DHCP|67/68|UDP\t\n简单网络管理协议|SNMP|161/162|UDP\t\n文件传送协议|FTP|20/21|TCP|控制连接 21，数据连接 20\n远程终端协议|TELNET|23|TCP\t\n超文本传送协议|HTTP|80|TCP\t\n简单邮件传送协议|SMTP|25|TCP\t\n邮件读取协议|POP3|110|TCP\t\n网际报文存取协议|IMAP|143|TCP\n\n### 万维网WWW\nWWW（World Wide Web），英文简称Web。    \n万维网是一个大规模、联机式的信息储藏所。    \n万维网以客户服务器方式工作。    \n\n#### 统一资源定位符URL\n\nURL（Uniform Resource Locator）\n\n格式：<协议>://<主机>:<端口>/<路径>\n\n### Web 页面请求过程\n\n#### 1. DHCP 配置主机信息\n\n- 假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。\n\n- 主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。\n\n- 该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。\n\n- 该数据报被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。\n\n- 连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。\n\n- 该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。\n\n- 主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。\n\n#### 2. ARP 解析 MAC 地址\n\n- 主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。\n\n- 主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。\n\n- 该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。\n\n- 该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。\n\n- DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。\n\n- 主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。\n\n- 网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机\n\n#### 3. DNS 解析域名\n\n- 知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。\n\n- 网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。\n\n- 因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。\n\n- 到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。\n\n- 找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。\n\n#### 4. HTTP 请求页面\n\n- 有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。\n\n- 在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。\n\n- HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。\n\n- 连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。\n\n- HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。\n\n- 浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。","slug":"应用层-over","published":1,"updated":"2020-03-06T06:16:51.074Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xh000mk859a0mz9bhb","content":"<h3 id=\"域名系统DNS\"><a href=\"#域名系统DNS\" class=\"headerlink\" title=\"域名系统DNS\"></a>域名系统DNS</h3><p>DNS（Domain Name Protocol）<br>DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。</p>\n<p>域名具有层次结构，从上到下以此为：根域名、顶级域名、二级域名。</p>\n<h4 id=\"域名服务器\"><a href=\"#域名服务器\" class=\"headerlink\" title=\"域名服务器\"></a>域名服务器</h4><p>根据其功能分为：根域名服务器、顶级域名服务器、权限域名服务器、本地域名服务器。<br>前三者用于提供DNS解析<strong>数据</strong>，本地域名服务器用于提供DNS解析<strong>服务</strong>。</p>\n<p>主机向本地域名服务器查询一般采用<strong>递归查询</strong>，<br>本地域名服务器向根域名服务器的查询一般采用<strong>迭代查询</strong>。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1xaNxeliE3KVjSZFMq6zQhVXau.jpg\" alt=\"\"></p>\n<p>DNS 可以使用 UDP 或 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：</p>\n<ul>\n<li>如果返回的响应超过的 512 字节（UDP最大支持512字节的数据）</li>\n<li>区域传送（区域传送是主域服务器向辅助域名服务器传送变化的那部分数据）</li>\n</ul>\n<h3 id=\"文件传送协议FTP\"><a href=\"#文件传送协议FTP\" class=\"headerlink\" title=\"文件传送协议FTP\"></a>文件传送协议FTP</h3><p>FTP（File Transfer Protocol）</p>\n<p>FTP 使用的 TCP 进行连接，它需要两个连接来传送一个文件：</p>\n<ul>\n<li>控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传送服务器的应答。</li>\n<li>数据连接：用来传送一个文件数据。</li>\n</ul>\n<p>根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：</p>\n<ul>\n<li>主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1g8NDelKw3KVjSZFOq6yrDVXaP.jpg\" alt=\"\"></p>\n<ul>\n<li>被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB149Vyel1D3KVjSZFyq6zuFpXa5.jpg\" alt=\"\"></p>\n<p>主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。</p>\n<h3 id=\"简单文件传送协议TFTP\"><a href=\"#简单文件传送协议TFTP\" class=\"headerlink\" title=\"简单文件传送协议TFTP\"></a>简单文件传送协议TFTP</h3><p>TFTP（Trivial File Transfer Protocol）</p>\n<p>主要用于手机端，使用客户服务器方式，但使用 UDP 协议进行通信，TFTP 只支持文件传输而不支持交互。<br>TFTP 没有庞大的命令集，没有列目录功能，也不能对用户进行身份鉴别。</p>\n<h4 id=\"TFTP的主要优点：\"><a href=\"#TFTP的主要优点：\" class=\"headerlink\" title=\"TFTP的主要优点：\"></a>TFTP的主要优点：</h4><ol>\n<li>TFTP 可用于 UDP 环境。</li>\n<li>TFTP 代码所占的内存较小。</li>\n<li>每次传送的数据报文中有 512 个字节数据，最后一次可不足 512 字节</li>\n<li>数据报文按序编号，从 1 开始。</li>\n<li>支持 ASCII 码或二进制传送。</li>\n<li>可对文件进行读写。</li>\n<li>很用很简单的首部。</li>\n</ol>\n<h3 id=\"动态主机配置协议DHCP\"><a href=\"#动态主机配置协议DHCP\" class=\"headerlink\" title=\"动态主机配置协议DHCP\"></a>动态主机配置协议DHCP</h3><p>DHCP（Dynamic Host Configuration Protocol）提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。</p>\n<p>DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。</p>\n<p>DHCP 工作过程：</p>\n<ol>\n<li>客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。</li>\n<li>DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。</li>\n<li>如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。</li>\n<li>DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。</li>\n</ol>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1ysVxegaH3KVjSZFjq6AFWpXai.jpg\" alt=\"\"></p>\n<h3 id=\"远程登录协议TELNET\"><a href=\"#远程登录协议TELNET\" class=\"headerlink\" title=\"远程登录协议TELNET\"></a>远程登录协议TELNET</h3><p>又称<strong>终端仿真协议</strong>。</p>\n<p>TELNET 用于登陆到远程主机上，并且远程主机上的输出也会返回。</p>\n<p>TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统的换行符定义。即所谓的<strong>网络虚拟终端NVT</strong>（Network Virtual Terminal）</p>\n<h3 id=\"电子邮件协议\"><a href=\"#电子邮件协议\" class=\"headerlink\" title=\"电子邮件协议\"></a>电子邮件协议</h3><p>一个电子邮件系统由三部分组成：用户代理、邮件服务器、邮件协议。</p>\n<p>邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1H.pHebus3KVjSZKb760qkFXaR.png\" alt=\"\"></p>\n<h4 id=\"1-SMTP\"><a href=\"#1-SMTP\" class=\"headerlink\" title=\"1.SMTP\"></a>1.SMTP</h4><p>SMTP（Simple Mail Transfer Protocol）简单邮件传送协议</p>\n<p>SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。</p>\n<p>MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1glCLbvBj_uVjSZFp7630SXXam.png\" alt=\"\"></p>\n<h4 id=\"2-POP3\"><a href=\"#2-POP3\" class=\"headerlink\" title=\"2. POP3\"></a>2. POP3</h4><p>POP3（Post Office Protocol）邮局协议</p>\n<p>POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。</p>\n<h4 id=\"3-IMAP\"><a href=\"#3-IMAP\" class=\"headerlink\" title=\"3. IMAP\"></a>3. IMAP</h4><p>IMAP（Internet Message Access Protocol）网际报文存取协议</p>\n<p>IAMP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以上用户随时随地去访问服务器上的邮件。</p>\n<h4 id=\"电子邮件的地址格式\"><a href=\"#电子邮件的地址格式\" class=\"headerlink\" title=\"电子邮件的地址格式\"></a>电子邮件的地址格式</h4><p>用户名 @ 邮件服务器的域名<br>示例：<a href=\"mailto:xyz@abc.com\">xyz@abc.com</a><br>xyz为用户名，abc.com为邮件服务器域名</p>\n<h4 id=\"电子邮件的信息格式\"><a href=\"#电子邮件的信息格式\" class=\"headerlink\" title=\"电子邮件的信息格式\"></a>电子邮件的信息格式</h4><p>一个电子邮件分为<strong>信封</strong>和<strong>内容</strong>两大部分。</p>\n<p>首部关键字：</p>\n<ul>\n<li>To：后跟一个或多个收件人邮件地址</li>\n<li>Subject：邮件主题</li>\n<li>Cc：抄送，收件人可以看到抄送人</li>\n<li>Bcc：暗送，收件人不知情</li>\n<li>From：发件人的电邮地址</li>\n<li>Date：发新日期</li>\n<li>Reply-To：对方回信地址</li>\n</ul>\n<h3 id=\"常用端口\"><a href=\"#常用端口\" class=\"headerlink\" title=\"常用端口\"></a>常用端口</h3><table>\n<thead>\n<tr>\n<th>应用</th>\n<th>应用层协议</th>\n<th>端口号</th>\n<th>传输层协议</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>域名解析</td>\n<td>DNS</td>\n<td>53</td>\n<td>UDP/TCP</td>\n<td>长度超过 512 字节时使用 TCP</td>\n</tr>\n<tr>\n<td>动态主机配置协议</td>\n<td>DHCP</td>\n<td>67/68</td>\n<td>UDP</td>\n<td></td>\n</tr>\n<tr>\n<td>简单网络管理协议</td>\n<td>SNMP</td>\n<td>161/162</td>\n<td>UDP</td>\n<td></td>\n</tr>\n<tr>\n<td>文件传送协议</td>\n<td>FTP</td>\n<td>20/21</td>\n<td>TCP</td>\n<td>控制连接 21，数据连接 20</td>\n</tr>\n<tr>\n<td>远程终端协议</td>\n<td>TELNET</td>\n<td>23</td>\n<td>TCP</td>\n<td></td>\n</tr>\n<tr>\n<td>超文本传送协议</td>\n<td>HTTP</td>\n<td>80</td>\n<td>TCP</td>\n<td></td>\n</tr>\n<tr>\n<td>简单邮件传送协议</td>\n<td>SMTP</td>\n<td>25</td>\n<td>TCP</td>\n<td></td>\n</tr>\n<tr>\n<td>邮件读取协议</td>\n<td>POP3</td>\n<td>110</td>\n<td>TCP</td>\n<td></td>\n</tr>\n<tr>\n<td>网际报文存取协议</td>\n<td>IMAP</td>\n<td>143</td>\n<td>TCP</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"万维网WWW\"><a href=\"#万维网WWW\" class=\"headerlink\" title=\"万维网WWW\"></a>万维网WWW</h3><p>WWW（World Wide Web），英文简称Web。<br>万维网是一个大规模、联机式的信息储藏所。<br>万维网以客户服务器方式工作。    </p>\n<h4 id=\"统一资源定位符URL\"><a href=\"#统一资源定位符URL\" class=\"headerlink\" title=\"统一资源定位符URL\"></a>统一资源定位符URL</h4><p>URL（Uniform Resource Locator）</p>\n<p>格式：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p>\n<h3 id=\"Web-页面请求过程\"><a href=\"#Web-页面请求过程\" class=\"headerlink\" title=\"Web 页面请求过程\"></a>Web 页面请求过程</h3><h4 id=\"1-DHCP-配置主机信息\"><a href=\"#1-DHCP-配置主机信息\" class=\"headerlink\" title=\"1. DHCP 配置主机信息\"></a>1. DHCP 配置主机信息</h4><ul>\n<li><p>假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。</p>\n</li>\n<li><p>主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。</p>\n</li>\n<li><p>该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。</p>\n</li>\n<li><p>该数据报被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。</p>\n</li>\n<li><p>连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。</p>\n</li>\n<li><p>该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。</p>\n</li>\n<li><p>主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。</p>\n</li>\n</ul>\n<h4 id=\"2-ARP-解析-MAC-地址\"><a href=\"#2-ARP-解析-MAC-地址\" class=\"headerlink\" title=\"2. ARP 解析 MAC 地址\"></a>2. ARP 解析 MAC 地址</h4><ul>\n<li><p>主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。</p>\n</li>\n<li><p>主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。</p>\n</li>\n<li><p>该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。</p>\n</li>\n<li><p>该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。</p>\n</li>\n<li><p>DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。</p>\n</li>\n<li><p>主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。</p>\n</li>\n<li><p>网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机</p>\n</li>\n</ul>\n<h4 id=\"3-DNS-解析域名\"><a href=\"#3-DNS-解析域名\" class=\"headerlink\" title=\"3. DNS 解析域名\"></a>3. DNS 解析域名</h4><ul>\n<li><p>知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。</p>\n</li>\n<li><p>网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。</p>\n</li>\n<li><p>因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。</p>\n</li>\n<li><p>到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。</p>\n</li>\n<li><p>找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。</p>\n</li>\n</ul>\n<h4 id=\"4-HTTP-请求页面\"><a href=\"#4-HTTP-请求页面\" class=\"headerlink\" title=\"4. HTTP 请求页面\"></a>4. HTTP 请求页面</h4><ul>\n<li><p>有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。</p>\n</li>\n<li><p>在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。</p>\n</li>\n<li><p>HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。</p>\n</li>\n<li><p>连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。</p>\n</li>\n<li><p>HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。</p>\n</li>\n<li><p>浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"域名系统DNS\"><a href=\"#域名系统DNS\" class=\"headerlink\" title=\"域名系统DNS\"></a>域名系统DNS</h3><p>DNS（Domain Name Protocol）<br>DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。</p>\n<p>域名具有层次结构，从上到下以此为：根域名、顶级域名、二级域名。</p>\n<h4 id=\"域名服务器\"><a href=\"#域名服务器\" class=\"headerlink\" title=\"域名服务器\"></a>域名服务器</h4><p>根据其功能分为：根域名服务器、顶级域名服务器、权限域名服务器、本地域名服务器。<br>前三者用于提供DNS解析<strong>数据</strong>，本地域名服务器用于提供DNS解析<strong>服务</strong>。</p>\n<p>主机向本地域名服务器查询一般采用<strong>递归查询</strong>，<br>本地域名服务器向根域名服务器的查询一般采用<strong>迭代查询</strong>。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1xaNxeliE3KVjSZFMq6zQhVXau.jpg\" alt=\"\"></p>\n<p>DNS 可以使用 UDP 或 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：</p>\n<ul>\n<li>如果返回的响应超过的 512 字节（UDP最大支持512字节的数据）</li>\n<li>区域传送（区域传送是主域服务器向辅助域名服务器传送变化的那部分数据）</li>\n</ul>\n<h3 id=\"文件传送协议FTP\"><a href=\"#文件传送协议FTP\" class=\"headerlink\" title=\"文件传送协议FTP\"></a>文件传送协议FTP</h3><p>FTP（File Transfer Protocol）</p>\n<p>FTP 使用的 TCP 进行连接，它需要两个连接来传送一个文件：</p>\n<ul>\n<li>控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传送服务器的应答。</li>\n<li>数据连接：用来传送一个文件数据。</li>\n</ul>\n<p>根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：</p>\n<ul>\n<li>主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1g8NDelKw3KVjSZFOq6yrDVXaP.jpg\" alt=\"\"></p>\n<ul>\n<li>被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB149Vyel1D3KVjSZFyq6zuFpXa5.jpg\" alt=\"\"></p>\n<p>主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。</p>\n<h3 id=\"简单文件传送协议TFTP\"><a href=\"#简单文件传送协议TFTP\" class=\"headerlink\" title=\"简单文件传送协议TFTP\"></a>简单文件传送协议TFTP</h3><p>TFTP（Trivial File Transfer Protocol）</p>\n<p>主要用于手机端，使用客户服务器方式，但使用 UDP 协议进行通信，TFTP 只支持文件传输而不支持交互。<br>TFTP 没有庞大的命令集，没有列目录功能，也不能对用户进行身份鉴别。</p>\n<h4 id=\"TFTP的主要优点：\"><a href=\"#TFTP的主要优点：\" class=\"headerlink\" title=\"TFTP的主要优点：\"></a>TFTP的主要优点：</h4><ol>\n<li>TFTP 可用于 UDP 环境。</li>\n<li>TFTP 代码所占的内存较小。</li>\n<li>每次传送的数据报文中有 512 个字节数据，最后一次可不足 512 字节</li>\n<li>数据报文按序编号，从 1 开始。</li>\n<li>支持 ASCII 码或二进制传送。</li>\n<li>可对文件进行读写。</li>\n<li>很用很简单的首部。</li>\n</ol>\n<h3 id=\"动态主机配置协议DHCP\"><a href=\"#动态主机配置协议DHCP\" class=\"headerlink\" title=\"动态主机配置协议DHCP\"></a>动态主机配置协议DHCP</h3><p>DHCP（Dynamic Host Configuration Protocol）提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。</p>\n<p>DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。</p>\n<p>DHCP 工作过程：</p>\n<ol>\n<li>客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。</li>\n<li>DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。</li>\n<li>如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。</li>\n<li>DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。</li>\n</ol>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1ysVxegaH3KVjSZFjq6AFWpXai.jpg\" alt=\"\"></p>\n<h3 id=\"远程登录协议TELNET\"><a href=\"#远程登录协议TELNET\" class=\"headerlink\" title=\"远程登录协议TELNET\"></a>远程登录协议TELNET</h3><p>又称<strong>终端仿真协议</strong>。</p>\n<p>TELNET 用于登陆到远程主机上，并且远程主机上的输出也会返回。</p>\n<p>TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统的换行符定义。即所谓的<strong>网络虚拟终端NVT</strong>（Network Virtual Terminal）</p>\n<h3 id=\"电子邮件协议\"><a href=\"#电子邮件协议\" class=\"headerlink\" title=\"电子邮件协议\"></a>电子邮件协议</h3><p>一个电子邮件系统由三部分组成：用户代理、邮件服务器、邮件协议。</p>\n<p>邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1H.pHebus3KVjSZKb760qkFXaR.png\" alt=\"\"></p>\n<h4 id=\"1-SMTP\"><a href=\"#1-SMTP\" class=\"headerlink\" title=\"1.SMTP\"></a>1.SMTP</h4><p>SMTP（Simple Mail Transfer Protocol）简单邮件传送协议</p>\n<p>SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。</p>\n<p>MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1glCLbvBj_uVjSZFp7630SXXam.png\" alt=\"\"></p>\n<h4 id=\"2-POP3\"><a href=\"#2-POP3\" class=\"headerlink\" title=\"2. POP3\"></a>2. POP3</h4><p>POP3（Post Office Protocol）邮局协议</p>\n<p>POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。</p>\n<h4 id=\"3-IMAP\"><a href=\"#3-IMAP\" class=\"headerlink\" title=\"3. IMAP\"></a>3. IMAP</h4><p>IMAP（Internet Message Access Protocol）网际报文存取协议</p>\n<p>IAMP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以上用户随时随地去访问服务器上的邮件。</p>\n<h4 id=\"电子邮件的地址格式\"><a href=\"#电子邮件的地址格式\" class=\"headerlink\" title=\"电子邮件的地址格式\"></a>电子邮件的地址格式</h4><p>用户名 @ 邮件服务器的域名<br>示例：<a href=\"mailto:xyz@abc.com\">xyz@abc.com</a><br>xyz为用户名，abc.com为邮件服务器域名</p>\n<h4 id=\"电子邮件的信息格式\"><a href=\"#电子邮件的信息格式\" class=\"headerlink\" title=\"电子邮件的信息格式\"></a>电子邮件的信息格式</h4><p>一个电子邮件分为<strong>信封</strong>和<strong>内容</strong>两大部分。</p>\n<p>首部关键字：</p>\n<ul>\n<li>To：后跟一个或多个收件人邮件地址</li>\n<li>Subject：邮件主题</li>\n<li>Cc：抄送，收件人可以看到抄送人</li>\n<li>Bcc：暗送，收件人不知情</li>\n<li>From：发件人的电邮地址</li>\n<li>Date：发新日期</li>\n<li>Reply-To：对方回信地址</li>\n</ul>\n<h3 id=\"常用端口\"><a href=\"#常用端口\" class=\"headerlink\" title=\"常用端口\"></a>常用端口</h3><table>\n<thead>\n<tr>\n<th>应用</th>\n<th>应用层协议</th>\n<th>端口号</th>\n<th>传输层协议</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>域名解析</td>\n<td>DNS</td>\n<td>53</td>\n<td>UDP/TCP</td>\n<td>长度超过 512 字节时使用 TCP</td>\n</tr>\n<tr>\n<td>动态主机配置协议</td>\n<td>DHCP</td>\n<td>67/68</td>\n<td>UDP</td>\n<td></td>\n</tr>\n<tr>\n<td>简单网络管理协议</td>\n<td>SNMP</td>\n<td>161/162</td>\n<td>UDP</td>\n<td></td>\n</tr>\n<tr>\n<td>文件传送协议</td>\n<td>FTP</td>\n<td>20/21</td>\n<td>TCP</td>\n<td>控制连接 21，数据连接 20</td>\n</tr>\n<tr>\n<td>远程终端协议</td>\n<td>TELNET</td>\n<td>23</td>\n<td>TCP</td>\n<td></td>\n</tr>\n<tr>\n<td>超文本传送协议</td>\n<td>HTTP</td>\n<td>80</td>\n<td>TCP</td>\n<td></td>\n</tr>\n<tr>\n<td>简单邮件传送协议</td>\n<td>SMTP</td>\n<td>25</td>\n<td>TCP</td>\n<td></td>\n</tr>\n<tr>\n<td>邮件读取协议</td>\n<td>POP3</td>\n<td>110</td>\n<td>TCP</td>\n<td></td>\n</tr>\n<tr>\n<td>网际报文存取协议</td>\n<td>IMAP</td>\n<td>143</td>\n<td>TCP</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"万维网WWW\"><a href=\"#万维网WWW\" class=\"headerlink\" title=\"万维网WWW\"></a>万维网WWW</h3><p>WWW（World Wide Web），英文简称Web。<br>万维网是一个大规模、联机式的信息储藏所。<br>万维网以客户服务器方式工作。    </p>\n<h4 id=\"统一资源定位符URL\"><a href=\"#统一资源定位符URL\" class=\"headerlink\" title=\"统一资源定位符URL\"></a>统一资源定位符URL</h4><p>URL（Uniform Resource Locator）</p>\n<p>格式：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p>\n<h3 id=\"Web-页面请求过程\"><a href=\"#Web-页面请求过程\" class=\"headerlink\" title=\"Web 页面请求过程\"></a>Web 页面请求过程</h3><h4 id=\"1-DHCP-配置主机信息\"><a href=\"#1-DHCP-配置主机信息\" class=\"headerlink\" title=\"1. DHCP 配置主机信息\"></a>1. DHCP 配置主机信息</h4><ul>\n<li><p>假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。</p>\n</li>\n<li><p>主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。</p>\n</li>\n<li><p>该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。</p>\n</li>\n<li><p>该数据报被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。</p>\n</li>\n<li><p>连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。</p>\n</li>\n<li><p>该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。</p>\n</li>\n<li><p>主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。</p>\n</li>\n</ul>\n<h4 id=\"2-ARP-解析-MAC-地址\"><a href=\"#2-ARP-解析-MAC-地址\" class=\"headerlink\" title=\"2. ARP 解析 MAC 地址\"></a>2. ARP 解析 MAC 地址</h4><ul>\n<li><p>主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。</p>\n</li>\n<li><p>主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。</p>\n</li>\n<li><p>该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。</p>\n</li>\n<li><p>该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。</p>\n</li>\n<li><p>DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。</p>\n</li>\n<li><p>主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。</p>\n</li>\n<li><p>网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机</p>\n</li>\n</ul>\n<h4 id=\"3-DNS-解析域名\"><a href=\"#3-DNS-解析域名\" class=\"headerlink\" title=\"3. DNS 解析域名\"></a>3. DNS 解析域名</h4><ul>\n<li><p>知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。</p>\n</li>\n<li><p>网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。</p>\n</li>\n<li><p>因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。</p>\n</li>\n<li><p>到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。</p>\n</li>\n<li><p>找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。</p>\n</li>\n</ul>\n<h4 id=\"4-HTTP-请求页面\"><a href=\"#4-HTTP-请求页面\" class=\"headerlink\" title=\"4. HTTP 请求页面\"></a>4. HTTP 请求页面</h4><ul>\n<li><p>有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。</p>\n</li>\n<li><p>在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。</p>\n</li>\n<li><p>HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。</p>\n</li>\n<li><p>连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。</p>\n</li>\n<li><p>HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。</p>\n</li>\n<li><p>浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。</p>\n</li>\n</ul>\n"},{"title":"计算机网络-数据链路层","date":"2020-03-06T06:16:59.852Z","comments":1,"_content":"\n\n### 基本问题\n\n#### 1. 封装成帧\n\n将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/29a14735-e154-4f60-9a04-c9628e5d09f4.png)\n\n#### 2. 透明传输\n\n透明表示一个实际存在的事物看起来好像不存在一样。\n\n帧使用首部和尾部进行定界，如果帧的数据部分含有和首尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。因此需要在数据部分出现首尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e738a3d2-f42e-4755-ae13-ca23497e7a97.png)\n\n#### 3. 差错检测\n\n目前数据链路层广泛使用来循环冗余校验（CRC）来检查比特差错。\n\n\n### 信道分类\n\n- 点对点信道：一对一通信，因为不会发生碰撞，因此也比较简单，使用PPP协议进行控制。\n- 广播信道：一对多通信，一个节点发送的数据能够倍广播信道上所有的节点接收到。\n    - 所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。\n    - 主要有两种控制方法进行协调，一个是信道复用技术，另一个是CSMA/CD协议。\n\n\n#### 点对点信道的相关概念\n\n- 链路：从一个结点到相邻结点的一段物理线路（有线或无线），而中间没有任何其他的交换结点。\n- 数据链路：当需要在一条线路上传送数据时，除了必须有一条物理线路外，还必须有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成来数据链路。\n    - 现在最常用的方法是使用网络适配器来实现这些协议。\n\n\n### PPP协议\n\nPPP（Point to Point Protocol）点对点协议\n\n互联网用户通常需要连接到某个ISP之后才能接入到互联网，PPP协议是用户计算机和ISP进行通信时所使用的数据链路层协议。\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e1ab9f28-cb15-4178-84b2-98aad87f9bc8.jpg)\n\nPPP的帧格式：\n- F 字段为帧的定界符 1字节\n- A 和 C 字段暂时没有意义 1字节\n- FCS 字段是使用CRC的检验序列 2字节\n- 信息部分的长度不超过1500字节\n- 协议字段：信息字段  2字节\n    - 0x0021 ： IP数据报\n    - 0xC021 ： 链路控制协议LCP的数据\n    - 0x8021 ： 网络层的控制数据\n\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/759013d7-61d8-4509-897a-d75af598a236.png)\n\n#### CRC校验手动计算示例\n\n生成多项式:G(x)=x^4+x^3+1，要求出二进制序列10110011的CRC校验码。\n\n- 1. G(x)=x^4+x^3+1,二进制比特串为11001;(有X的几次方，对应的2的几次方的位就是1)\n- 2. 因为校验码4位，所以10110011后面再加4个0，得到101100110000，用“模2除法”(其实就是亦或^)即可得出结果；\n- 3. CRC^101100110000得到101100110100。发送到接收端；\n- 4. 接收端收到101100110100后除以11001(以“模2除法”方式去除),余数为0则无差错；\n\n![image](https://ae01.alicdn.com/kf/HTB1XMQkdG1s3KVjSZFAq6x_ZXXaw.jpg)\n\n#### 字节填充、零比特填充\n\n- 字节填充：在发送端，当发现信息字段中出现与定界符相同的字符时，插入转义符，当信息字段中出现转义符时，在转义符前插入转义符。\n- 零比特填充：在发送端，扫描整个信息字段，只要发现有5个连续的1，则立即填入一个0，确保信息字段不会出现6个连续1.\n\n### CSMA/CD协议\n\nCSMA/CD（Carrier Sense Multiple Access with Collision Detection） 表示载波监听多点接入/碰撞检测\n\n- 多点接入：说明这是总线型网络，许多主机以多点的方式连接到总线上\n- 载波监听：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。\n- 碰撞检测：在发送中，如果检测到信道已有其他主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。\n\n> 总结：先听后发、边听边发、冲突停发、随机重发。    \n显然使用CSMA/CD协议，不可能同时进行发送和接收（但必须边发送边监听信道），因此使用CSMA/CD协议的以太网只能进行半双工通信。\n\n记端到端的传播时延为τ，最先发送的站点最多经过2τ就可以知道是否发生了碰撞，称2τ为**争用期**。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。\n\n当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用**截断二进制指数退避算法**来确定。从离散的整数集合{0，1，...，(2^k-1)}中随机取出一个数，记作r，然后取r倍的争用期作为重传等待时间。\n\n整数集合中的参数k按下面的公式计算：k = Min[重传次数, 10]\n\n当重传16次仍不能成功时，表明网络堵塞，则丢弃该帧，并向高层报告。\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/19d423e9-74f7-4c2b-9b97-55890e0d5193.png)\n\n### MAC地址\n\nMAC地址是链路层地址，长度为6字节（48位），用于唯一标识网络适配器（网卡）。\n\n一台主机拥有多少个网络适配器就有多少个MAC地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个MAC地址。\n\n### 局域网\n\n局域网是一种典型的广播信道。  \n\n#### 局域网的特点：  \n\n- 网络为一个单位所拥有，且地理范围和站点数目均有限。\n- 具有广播功能，局域网上的主机可共享连接在局域网上的各种硬件和软件资源。\n- 便于系统的扩展和逐渐演变，各设备的位置可灵活调整和改变。\n- 提高了系统的可靠性、可用性和生存性。\n\n#### 局域网的分类：\n可按照网络拓扑进行分类：\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/807f4258-dba8-4c54-9c3c-a707c7ccffa2.jpg)\n\n### 以太网\n\n以太网是一种星型拓扑结构局域网。\n\n#### 以太网的两个标准\n\n1. DEC公司、Intel公司、Xerox公司联合提出的DIX Ethernet V2标准，数据率10Mbit/s，使用曼彻斯特编码。\n2. IEEE 802委员会提出的IEEE 802.3标准，数据率：10Mbit/s，使用差分曼彻斯特编码。\n\nIEEE 802委员会把局域网的数据链路层拆分成了**逻辑链路控制LLC**、**媒体接入控制MAC**两个子层。  \n因为TCP/IP协议经常使用的局域网协议是DIX Ethernet V2标准，因此802.3的LLC的作用已经消失了，之后厂商生产的适配器就仅装有MAC协议而没有LLC协议。\n\n\n#### 以太网帧格式：\n\n- 类型：标记上层使用的协议；\n- 数据：长度在46-1500之间，如果太小则需要填充；\n- FCS：帧检验序列，使用的是CRC检验方法；\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/164944d3-bbd2-4bb2-924b-e62199c51b90.png)\n\n### 交换机Switch\n\n交换机具有自学习能力，学习的是交换表的内容，交换表中存储这MAC地址到接口的映射。\n\n正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。\n\n下图中，交换机有4个接口，主机A向主机B发送数据帧时，交换机把主机A到接口1的映射写入交换表中。为了发送数据帧到B，先查交换表，此时没有主机B的表项，那么主机A就发送广播帧，主机C和主机D会丢弃该帧，主机B回应该帧向主机A发送数据包时，交换机查找交换表得到主机A映射的接口为1，就发送数据帧到接口1，同时交换机添加主机B到接口2的映射。\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a4444545-0d68-4015-9a3d-19209dc436b3.png)\n\n### 虚拟局域网VLAN\n\n虚拟局域网只是给局域网用户提供的一种服务，而不是一种新型局域网。\n\n虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。\n\n例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。\n\n使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e98e9d20-206b-4533-bacf-3448d0096f38.png)\n","source":"_posts/数据链路层-over.md","raw":"---\ntitle: 计算机网络-数据链路层\ndate: {{ date }}\ntags: Internet\ncategories:\ncomments: true\n---\n\n\n### 基本问题\n\n#### 1. 封装成帧\n\n将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/29a14735-e154-4f60-9a04-c9628e5d09f4.png)\n\n#### 2. 透明传输\n\n透明表示一个实际存在的事物看起来好像不存在一样。\n\n帧使用首部和尾部进行定界，如果帧的数据部分含有和首尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。因此需要在数据部分出现首尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e738a3d2-f42e-4755-ae13-ca23497e7a97.png)\n\n#### 3. 差错检测\n\n目前数据链路层广泛使用来循环冗余校验（CRC）来检查比特差错。\n\n\n### 信道分类\n\n- 点对点信道：一对一通信，因为不会发生碰撞，因此也比较简单，使用PPP协议进行控制。\n- 广播信道：一对多通信，一个节点发送的数据能够倍广播信道上所有的节点接收到。\n    - 所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。\n    - 主要有两种控制方法进行协调，一个是信道复用技术，另一个是CSMA/CD协议。\n\n\n#### 点对点信道的相关概念\n\n- 链路：从一个结点到相邻结点的一段物理线路（有线或无线），而中间没有任何其他的交换结点。\n- 数据链路：当需要在一条线路上传送数据时，除了必须有一条物理线路外，还必须有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成来数据链路。\n    - 现在最常用的方法是使用网络适配器来实现这些协议。\n\n\n### PPP协议\n\nPPP（Point to Point Protocol）点对点协议\n\n互联网用户通常需要连接到某个ISP之后才能接入到互联网，PPP协议是用户计算机和ISP进行通信时所使用的数据链路层协议。\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e1ab9f28-cb15-4178-84b2-98aad87f9bc8.jpg)\n\nPPP的帧格式：\n- F 字段为帧的定界符 1字节\n- A 和 C 字段暂时没有意义 1字节\n- FCS 字段是使用CRC的检验序列 2字节\n- 信息部分的长度不超过1500字节\n- 协议字段：信息字段  2字节\n    - 0x0021 ： IP数据报\n    - 0xC021 ： 链路控制协议LCP的数据\n    - 0x8021 ： 网络层的控制数据\n\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/759013d7-61d8-4509-897a-d75af598a236.png)\n\n#### CRC校验手动计算示例\n\n生成多项式:G(x)=x^4+x^3+1，要求出二进制序列10110011的CRC校验码。\n\n- 1. G(x)=x^4+x^3+1,二进制比特串为11001;(有X的几次方，对应的2的几次方的位就是1)\n- 2. 因为校验码4位，所以10110011后面再加4个0，得到101100110000，用“模2除法”(其实就是亦或^)即可得出结果；\n- 3. CRC^101100110000得到101100110100。发送到接收端；\n- 4. 接收端收到101100110100后除以11001(以“模2除法”方式去除),余数为0则无差错；\n\n![image](https://ae01.alicdn.com/kf/HTB1XMQkdG1s3KVjSZFAq6x_ZXXaw.jpg)\n\n#### 字节填充、零比特填充\n\n- 字节填充：在发送端，当发现信息字段中出现与定界符相同的字符时，插入转义符，当信息字段中出现转义符时，在转义符前插入转义符。\n- 零比特填充：在发送端，扫描整个信息字段，只要发现有5个连续的1，则立即填入一个0，确保信息字段不会出现6个连续1.\n\n### CSMA/CD协议\n\nCSMA/CD（Carrier Sense Multiple Access with Collision Detection） 表示载波监听多点接入/碰撞检测\n\n- 多点接入：说明这是总线型网络，许多主机以多点的方式连接到总线上\n- 载波监听：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。\n- 碰撞检测：在发送中，如果检测到信道已有其他主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。\n\n> 总结：先听后发、边听边发、冲突停发、随机重发。    \n显然使用CSMA/CD协议，不可能同时进行发送和接收（但必须边发送边监听信道），因此使用CSMA/CD协议的以太网只能进行半双工通信。\n\n记端到端的传播时延为τ，最先发送的站点最多经过2τ就可以知道是否发生了碰撞，称2τ为**争用期**。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。\n\n当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用**截断二进制指数退避算法**来确定。从离散的整数集合{0，1，...，(2^k-1)}中随机取出一个数，记作r，然后取r倍的争用期作为重传等待时间。\n\n整数集合中的参数k按下面的公式计算：k = Min[重传次数, 10]\n\n当重传16次仍不能成功时，表明网络堵塞，则丢弃该帧，并向高层报告。\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/19d423e9-74f7-4c2b-9b97-55890e0d5193.png)\n\n### MAC地址\n\nMAC地址是链路层地址，长度为6字节（48位），用于唯一标识网络适配器（网卡）。\n\n一台主机拥有多少个网络适配器就有多少个MAC地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个MAC地址。\n\n### 局域网\n\n局域网是一种典型的广播信道。  \n\n#### 局域网的特点：  \n\n- 网络为一个单位所拥有，且地理范围和站点数目均有限。\n- 具有广播功能，局域网上的主机可共享连接在局域网上的各种硬件和软件资源。\n- 便于系统的扩展和逐渐演变，各设备的位置可灵活调整和改变。\n- 提高了系统的可靠性、可用性和生存性。\n\n#### 局域网的分类：\n可按照网络拓扑进行分类：\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/807f4258-dba8-4c54-9c3c-a707c7ccffa2.jpg)\n\n### 以太网\n\n以太网是一种星型拓扑结构局域网。\n\n#### 以太网的两个标准\n\n1. DEC公司、Intel公司、Xerox公司联合提出的DIX Ethernet V2标准，数据率10Mbit/s，使用曼彻斯特编码。\n2. IEEE 802委员会提出的IEEE 802.3标准，数据率：10Mbit/s，使用差分曼彻斯特编码。\n\nIEEE 802委员会把局域网的数据链路层拆分成了**逻辑链路控制LLC**、**媒体接入控制MAC**两个子层。  \n因为TCP/IP协议经常使用的局域网协议是DIX Ethernet V2标准，因此802.3的LLC的作用已经消失了，之后厂商生产的适配器就仅装有MAC协议而没有LLC协议。\n\n\n#### 以太网帧格式：\n\n- 类型：标记上层使用的协议；\n- 数据：长度在46-1500之间，如果太小则需要填充；\n- FCS：帧检验序列，使用的是CRC检验方法；\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/164944d3-bbd2-4bb2-924b-e62199c51b90.png)\n\n### 交换机Switch\n\n交换机具有自学习能力，学习的是交换表的内容，交换表中存储这MAC地址到接口的映射。\n\n正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。\n\n下图中，交换机有4个接口，主机A向主机B发送数据帧时，交换机把主机A到接口1的映射写入交换表中。为了发送数据帧到B，先查交换表，此时没有主机B的表项，那么主机A就发送广播帧，主机C和主机D会丢弃该帧，主机B回应该帧向主机A发送数据包时，交换机查找交换表得到主机A映射的接口为1，就发送数据帧到接口1，同时交换机添加主机B到接口2的映射。\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a4444545-0d68-4015-9a3d-19209dc436b3.png)\n\n### 虚拟局域网VLAN\n\n虚拟局域网只是给局域网用户提供的一种服务，而不是一种新型局域网。\n\n虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。\n\n例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。\n\n使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。\n\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e98e9d20-206b-4533-bacf-3448d0096f38.png)\n","slug":"数据链路层-over","published":1,"updated":"2020-03-06T06:16:59.852Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xi000ok85991ok1018","content":"<h3 id=\"基本问题\"><a href=\"#基本问题\" class=\"headerlink\" title=\"基本问题\"></a>基本问题</h3><h4 id=\"1-封装成帧\"><a href=\"#1-封装成帧\" class=\"headerlink\" title=\"1. 封装成帧\"></a>1. 封装成帧</h4><p>将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/29a14735-e154-4f60-9a04-c9628e5d09f4.png\" alt=\"image\"></p>\n<h4 id=\"2-透明传输\"><a href=\"#2-透明传输\" class=\"headerlink\" title=\"2. 透明传输\"></a>2. 透明传输</h4><p>透明表示一个实际存在的事物看起来好像不存在一样。</p>\n<p>帧使用首部和尾部进行定界，如果帧的数据部分含有和首尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。因此需要在数据部分出现首尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e738a3d2-f42e-4755-ae13-ca23497e7a97.png\" alt=\"image\"></p>\n<h4 id=\"3-差错检测\"><a href=\"#3-差错检测\" class=\"headerlink\" title=\"3. 差错检测\"></a>3. 差错检测</h4><p>目前数据链路层广泛使用来循环冗余校验（CRC）来检查比特差错。</p>\n<h3 id=\"信道分类\"><a href=\"#信道分类\" class=\"headerlink\" title=\"信道分类\"></a>信道分类</h3><ul>\n<li>点对点信道：一对一通信，因为不会发生碰撞，因此也比较简单，使用PPP协议进行控制。</li>\n<li>广播信道：一对多通信，一个节点发送的数据能够倍广播信道上所有的节点接收到。<ul>\n<li>所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。</li>\n<li>主要有两种控制方法进行协调，一个是信道复用技术，另一个是CSMA/CD协议。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"点对点信道的相关概念\"><a href=\"#点对点信道的相关概念\" class=\"headerlink\" title=\"点对点信道的相关概念\"></a>点对点信道的相关概念</h4><ul>\n<li>链路：从一个结点到相邻结点的一段物理线路（有线或无线），而中间没有任何其他的交换结点。</li>\n<li>数据链路：当需要在一条线路上传送数据时，除了必须有一条物理线路外，还必须有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成来数据链路。<ul>\n<li>现在最常用的方法是使用网络适配器来实现这些协议。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"PPP协议\"><a href=\"#PPP协议\" class=\"headerlink\" title=\"PPP协议\"></a>PPP协议</h3><p>PPP（Point to Point Protocol）点对点协议</p>\n<p>互联网用户通常需要连接到某个ISP之后才能接入到互联网，PPP协议是用户计算机和ISP进行通信时所使用的数据链路层协议。<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e1ab9f28-cb15-4178-84b2-98aad87f9bc8.jpg\" alt=\"image\"></p>\n<p>PPP的帧格式：</p>\n<ul>\n<li>F 字段为帧的定界符 1字节</li>\n<li>A 和 C 字段暂时没有意义 1字节</li>\n<li>FCS 字段是使用CRC的检验序列 2字节</li>\n<li>信息部分的长度不超过1500字节</li>\n<li>协议字段：信息字段  2字节<ul>\n<li>0x0021 ： IP数据报</li>\n<li>0xC021 ： 链路控制协议LCP的数据</li>\n<li>0x8021 ： 网络层的控制数据</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/759013d7-61d8-4509-897a-d75af598a236.png\" alt=\"image\"></p>\n<h4 id=\"CRC校验手动计算示例\"><a href=\"#CRC校验手动计算示例\" class=\"headerlink\" title=\"CRC校验手动计算示例\"></a>CRC校验手动计算示例</h4><p>生成多项式:G(x)=x^4+x^3+1，要求出二进制序列10110011的CRC校验码。</p>\n<ul>\n<li><ol>\n<li>G(x)=x^4+x^3+1,二进制比特串为11001;(有X的几次方，对应的2的几次方的位就是1)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>因为校验码4位，所以10110011后面再加4个0，得到101100110000，用“模2除法”(其实就是亦或^)即可得出结果；</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>CRC^101100110000得到101100110100。发送到接收端；</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>接收端收到101100110100后除以11001(以“模2除法”方式去除),余数为0则无差错；</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1XMQkdG1s3KVjSZFAq6x_ZXXaw.jpg\" alt=\"image\"></p>\n<h4 id=\"字节填充、零比特填充\"><a href=\"#字节填充、零比特填充\" class=\"headerlink\" title=\"字节填充、零比特填充\"></a>字节填充、零比特填充</h4><ul>\n<li>字节填充：在发送端，当发现信息字段中出现与定界符相同的字符时，插入转义符，当信息字段中出现转义符时，在转义符前插入转义符。</li>\n<li>零比特填充：在发送端，扫描整个信息字段，只要发现有5个连续的1，则立即填入一个0，确保信息字段不会出现6个连续1.</li>\n</ul>\n<h3 id=\"CSMA-CD协议\"><a href=\"#CSMA-CD协议\" class=\"headerlink\" title=\"CSMA/CD协议\"></a>CSMA/CD协议</h3><p>CSMA/CD（Carrier Sense Multiple Access with Collision Detection） 表示载波监听多点接入/碰撞检测</p>\n<ul>\n<li>多点接入：说明这是总线型网络，许多主机以多点的方式连接到总线上</li>\n<li>载波监听：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。</li>\n<li>碰撞检测：在发送中，如果检测到信道已有其他主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</li>\n</ul>\n<blockquote>\n<p>总结：先听后发、边听边发、冲突停发、随机重发。<br>显然使用CSMA/CD协议，不可能同时进行发送和接收（但必须边发送边监听信道），因此使用CSMA/CD协议的以太网只能进行半双工通信。</p>\n</blockquote>\n<p>记端到端的传播时延为τ，最先发送的站点最多经过2τ就可以知道是否发生了碰撞，称2τ为<strong>争用期</strong>。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p>\n<p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用<strong>截断二进制指数退避算法</strong>来确定。从离散的整数集合{0，1，…，(2^k-1)}中随机取出一个数，记作r，然后取r倍的争用期作为重传等待时间。</p>\n<p>整数集合中的参数k按下面的公式计算：k = Min[重传次数, 10]</p>\n<p>当重传16次仍不能成功时，表明网络堵塞，则丢弃该帧，并向高层报告。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/19d423e9-74f7-4c2b-9b97-55890e0d5193.png\" alt=\"\"></p>\n<h3 id=\"MAC地址\"><a href=\"#MAC地址\" class=\"headerlink\" title=\"MAC地址\"></a>MAC地址</h3><p>MAC地址是链路层地址，长度为6字节（48位），用于唯一标识网络适配器（网卡）。</p>\n<p>一台主机拥有多少个网络适配器就有多少个MAC地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个MAC地址。</p>\n<h3 id=\"局域网\"><a href=\"#局域网\" class=\"headerlink\" title=\"局域网\"></a>局域网</h3><p>局域网是一种典型的广播信道。  </p>\n<h4 id=\"局域网的特点：\"><a href=\"#局域网的特点：\" class=\"headerlink\" title=\"局域网的特点：\"></a>局域网的特点：</h4><ul>\n<li>网络为一个单位所拥有，且地理范围和站点数目均有限。</li>\n<li>具有广播功能，局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li>\n<li>便于系统的扩展和逐渐演变，各设备的位置可灵活调整和改变。</li>\n<li>提高了系统的可靠性、可用性和生存性。</li>\n</ul>\n<h4 id=\"局域网的分类：\"><a href=\"#局域网的分类：\" class=\"headerlink\" title=\"局域网的分类：\"></a>局域网的分类：</h4><p>可按照网络拓扑进行分类：</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/807f4258-dba8-4c54-9c3c-a707c7ccffa2.jpg\" alt=\"\"></p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>以太网是一种星型拓扑结构局域网。</p>\n<h4 id=\"以太网的两个标准\"><a href=\"#以太网的两个标准\" class=\"headerlink\" title=\"以太网的两个标准\"></a>以太网的两个标准</h4><ol>\n<li>DEC公司、Intel公司、Xerox公司联合提出的DIX Ethernet V2标准，数据率10Mbit/s，使用曼彻斯特编码。</li>\n<li>IEEE 802委员会提出的IEEE 802.3标准，数据率：10Mbit/s，使用差分曼彻斯特编码。</li>\n</ol>\n<p>IEEE 802委员会把局域网的数据链路层拆分成了<strong>逻辑链路控制LLC</strong>、<strong>媒体接入控制MAC</strong>两个子层。<br>因为TCP/IP协议经常使用的局域网协议是DIX Ethernet V2标准，因此802.3的LLC的作用已经消失了，之后厂商生产的适配器就仅装有MAC协议而没有LLC协议。</p>\n<h4 id=\"以太网帧格式：\"><a href=\"#以太网帧格式：\" class=\"headerlink\" title=\"以太网帧格式：\"></a>以太网帧格式：</h4><ul>\n<li>类型：标记上层使用的协议；</li>\n<li>数据：长度在46-1500之间，如果太小则需要填充；</li>\n<li>FCS：帧检验序列，使用的是CRC检验方法；</li>\n</ul>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/164944d3-bbd2-4bb2-924b-e62199c51b90.png\" alt=\"\"></p>\n<h3 id=\"交换机Switch\"><a href=\"#交换机Switch\" class=\"headerlink\" title=\"交换机Switch\"></a>交换机Switch</h3><p>交换机具有自学习能力，学习的是交换表的内容，交换表中存储这MAC地址到接口的映射。</p>\n<p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p>\n<p>下图中，交换机有4个接口，主机A向主机B发送数据帧时，交换机把主机A到接口1的映射写入交换表中。为了发送数据帧到B，先查交换表，此时没有主机B的表项，那么主机A就发送广播帧，主机C和主机D会丢弃该帧，主机B回应该帧向主机A发送数据包时，交换机查找交换表得到主机A映射的接口为1，就发送数据帧到接口1，同时交换机添加主机B到接口2的映射。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a4444545-0d68-4015-9a3d-19209dc436b3.png\" alt=\"\"></p>\n<h3 id=\"虚拟局域网VLAN\"><a href=\"#虚拟局域网VLAN\" class=\"headerlink\" title=\"虚拟局域网VLAN\"></a>虚拟局域网VLAN</h3><p>虚拟局域网只是给局域网用户提供的一种服务，而不是一种新型局域网。</p>\n<p>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</p>\n<p>例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。</p>\n<p>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e98e9d20-206b-4533-bacf-3448d0096f38.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本问题\"><a href=\"#基本问题\" class=\"headerlink\" title=\"基本问题\"></a>基本问题</h3><h4 id=\"1-封装成帧\"><a href=\"#1-封装成帧\" class=\"headerlink\" title=\"1. 封装成帧\"></a>1. 封装成帧</h4><p>将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/29a14735-e154-4f60-9a04-c9628e5d09f4.png\" alt=\"image\"></p>\n<h4 id=\"2-透明传输\"><a href=\"#2-透明传输\" class=\"headerlink\" title=\"2. 透明传输\"></a>2. 透明传输</h4><p>透明表示一个实际存在的事物看起来好像不存在一样。</p>\n<p>帧使用首部和尾部进行定界，如果帧的数据部分含有和首尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。因此需要在数据部分出现首尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e738a3d2-f42e-4755-ae13-ca23497e7a97.png\" alt=\"image\"></p>\n<h4 id=\"3-差错检测\"><a href=\"#3-差错检测\" class=\"headerlink\" title=\"3. 差错检测\"></a>3. 差错检测</h4><p>目前数据链路层广泛使用来循环冗余校验（CRC）来检查比特差错。</p>\n<h3 id=\"信道分类\"><a href=\"#信道分类\" class=\"headerlink\" title=\"信道分类\"></a>信道分类</h3><ul>\n<li>点对点信道：一对一通信，因为不会发生碰撞，因此也比较简单，使用PPP协议进行控制。</li>\n<li>广播信道：一对多通信，一个节点发送的数据能够倍广播信道上所有的节点接收到。<ul>\n<li>所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。</li>\n<li>主要有两种控制方法进行协调，一个是信道复用技术，另一个是CSMA/CD协议。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"点对点信道的相关概念\"><a href=\"#点对点信道的相关概念\" class=\"headerlink\" title=\"点对点信道的相关概念\"></a>点对点信道的相关概念</h4><ul>\n<li>链路：从一个结点到相邻结点的一段物理线路（有线或无线），而中间没有任何其他的交换结点。</li>\n<li>数据链路：当需要在一条线路上传送数据时，除了必须有一条物理线路外，还必须有一些必要的通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成来数据链路。<ul>\n<li>现在最常用的方法是使用网络适配器来实现这些协议。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"PPP协议\"><a href=\"#PPP协议\" class=\"headerlink\" title=\"PPP协议\"></a>PPP协议</h3><p>PPP（Point to Point Protocol）点对点协议</p>\n<p>互联网用户通常需要连接到某个ISP之后才能接入到互联网，PPP协议是用户计算机和ISP进行通信时所使用的数据链路层协议。<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e1ab9f28-cb15-4178-84b2-98aad87f9bc8.jpg\" alt=\"image\"></p>\n<p>PPP的帧格式：</p>\n<ul>\n<li>F 字段为帧的定界符 1字节</li>\n<li>A 和 C 字段暂时没有意义 1字节</li>\n<li>FCS 字段是使用CRC的检验序列 2字节</li>\n<li>信息部分的长度不超过1500字节</li>\n<li>协议字段：信息字段  2字节<ul>\n<li>0x0021 ： IP数据报</li>\n<li>0xC021 ： 链路控制协议LCP的数据</li>\n<li>0x8021 ： 网络层的控制数据</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/759013d7-61d8-4509-897a-d75af598a236.png\" alt=\"image\"></p>\n<h4 id=\"CRC校验手动计算示例\"><a href=\"#CRC校验手动计算示例\" class=\"headerlink\" title=\"CRC校验手动计算示例\"></a>CRC校验手动计算示例</h4><p>生成多项式:G(x)=x^4+x^3+1，要求出二进制序列10110011的CRC校验码。</p>\n<ul>\n<li><ol>\n<li>G(x)=x^4+x^3+1,二进制比特串为11001;(有X的几次方，对应的2的几次方的位就是1)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>因为校验码4位，所以10110011后面再加4个0，得到101100110000，用“模2除法”(其实就是亦或^)即可得出结果；</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>CRC^101100110000得到101100110100。发送到接收端；</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>接收端收到101100110100后除以11001(以“模2除法”方式去除),余数为0则无差错；</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1XMQkdG1s3KVjSZFAq6x_ZXXaw.jpg\" alt=\"image\"></p>\n<h4 id=\"字节填充、零比特填充\"><a href=\"#字节填充、零比特填充\" class=\"headerlink\" title=\"字节填充、零比特填充\"></a>字节填充、零比特填充</h4><ul>\n<li>字节填充：在发送端，当发现信息字段中出现与定界符相同的字符时，插入转义符，当信息字段中出现转义符时，在转义符前插入转义符。</li>\n<li>零比特填充：在发送端，扫描整个信息字段，只要发现有5个连续的1，则立即填入一个0，确保信息字段不会出现6个连续1.</li>\n</ul>\n<h3 id=\"CSMA-CD协议\"><a href=\"#CSMA-CD协议\" class=\"headerlink\" title=\"CSMA/CD协议\"></a>CSMA/CD协议</h3><p>CSMA/CD（Carrier Sense Multiple Access with Collision Detection） 表示载波监听多点接入/碰撞检测</p>\n<ul>\n<li>多点接入：说明这是总线型网络，许多主机以多点的方式连接到总线上</li>\n<li>载波监听：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。</li>\n<li>碰撞检测：在发送中，如果检测到信道已有其他主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</li>\n</ul>\n<blockquote>\n<p>总结：先听后发、边听边发、冲突停发、随机重发。<br>显然使用CSMA/CD协议，不可能同时进行发送和接收（但必须边发送边监听信道），因此使用CSMA/CD协议的以太网只能进行半双工通信。</p>\n</blockquote>\n<p>记端到端的传播时延为τ，最先发送的站点最多经过2τ就可以知道是否发生了碰撞，称2τ为<strong>争用期</strong>。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p>\n<p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用<strong>截断二进制指数退避算法</strong>来确定。从离散的整数集合{0，1，…，(2^k-1)}中随机取出一个数，记作r，然后取r倍的争用期作为重传等待时间。</p>\n<p>整数集合中的参数k按下面的公式计算：k = Min[重传次数, 10]</p>\n<p>当重传16次仍不能成功时，表明网络堵塞，则丢弃该帧，并向高层报告。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/19d423e9-74f7-4c2b-9b97-55890e0d5193.png\" alt=\"\"></p>\n<h3 id=\"MAC地址\"><a href=\"#MAC地址\" class=\"headerlink\" title=\"MAC地址\"></a>MAC地址</h3><p>MAC地址是链路层地址，长度为6字节（48位），用于唯一标识网络适配器（网卡）。</p>\n<p>一台主机拥有多少个网络适配器就有多少个MAC地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个MAC地址。</p>\n<h3 id=\"局域网\"><a href=\"#局域网\" class=\"headerlink\" title=\"局域网\"></a>局域网</h3><p>局域网是一种典型的广播信道。  </p>\n<h4 id=\"局域网的特点：\"><a href=\"#局域网的特点：\" class=\"headerlink\" title=\"局域网的特点：\"></a>局域网的特点：</h4><ul>\n<li>网络为一个单位所拥有，且地理范围和站点数目均有限。</li>\n<li>具有广播功能，局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li>\n<li>便于系统的扩展和逐渐演变，各设备的位置可灵活调整和改变。</li>\n<li>提高了系统的可靠性、可用性和生存性。</li>\n</ul>\n<h4 id=\"局域网的分类：\"><a href=\"#局域网的分类：\" class=\"headerlink\" title=\"局域网的分类：\"></a>局域网的分类：</h4><p>可按照网络拓扑进行分类：</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/807f4258-dba8-4c54-9c3c-a707c7ccffa2.jpg\" alt=\"\"></p>\n<h3 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h3><p>以太网是一种星型拓扑结构局域网。</p>\n<h4 id=\"以太网的两个标准\"><a href=\"#以太网的两个标准\" class=\"headerlink\" title=\"以太网的两个标准\"></a>以太网的两个标准</h4><ol>\n<li>DEC公司、Intel公司、Xerox公司联合提出的DIX Ethernet V2标准，数据率10Mbit/s，使用曼彻斯特编码。</li>\n<li>IEEE 802委员会提出的IEEE 802.3标准，数据率：10Mbit/s，使用差分曼彻斯特编码。</li>\n</ol>\n<p>IEEE 802委员会把局域网的数据链路层拆分成了<strong>逻辑链路控制LLC</strong>、<strong>媒体接入控制MAC</strong>两个子层。<br>因为TCP/IP协议经常使用的局域网协议是DIX Ethernet V2标准，因此802.3的LLC的作用已经消失了，之后厂商生产的适配器就仅装有MAC协议而没有LLC协议。</p>\n<h4 id=\"以太网帧格式：\"><a href=\"#以太网帧格式：\" class=\"headerlink\" title=\"以太网帧格式：\"></a>以太网帧格式：</h4><ul>\n<li>类型：标记上层使用的协议；</li>\n<li>数据：长度在46-1500之间，如果太小则需要填充；</li>\n<li>FCS：帧检验序列，使用的是CRC检验方法；</li>\n</ul>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/164944d3-bbd2-4bb2-924b-e62199c51b90.png\" alt=\"\"></p>\n<h3 id=\"交换机Switch\"><a href=\"#交换机Switch\" class=\"headerlink\" title=\"交换机Switch\"></a>交换机Switch</h3><p>交换机具有自学习能力，学习的是交换表的内容，交换表中存储这MAC地址到接口的映射。</p>\n<p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p>\n<p>下图中，交换机有4个接口，主机A向主机B发送数据帧时，交换机把主机A到接口1的映射写入交换表中。为了发送数据帧到B，先查交换表，此时没有主机B的表项，那么主机A就发送广播帧，主机C和主机D会丢弃该帧，主机B回应该帧向主机A发送数据包时，交换机查找交换表得到主机A映射的接口为1，就发送数据帧到接口1，同时交换机添加主机B到接口2的映射。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a4444545-0d68-4015-9a3d-19209dc436b3.png\" alt=\"\"></p>\n<h3 id=\"虚拟局域网VLAN\"><a href=\"#虚拟局域网VLAN\" class=\"headerlink\" title=\"虚拟局域网VLAN\"></a>虚拟局域网VLAN</h3><p>虚拟局域网只是给局域网用户提供的一种服务，而不是一种新型局域网。</p>\n<p>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</p>\n<p>例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。</p>\n<p>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e98e9d20-206b-4533-bacf-3448d0096f38.png\" alt=\"\"></p>\n"},{"title":"计算机网络-概述","date":"2020-03-06T06:17:07.742Z","comments":1,"_content":"\n\n### 计算机网络在信息时代的作用\n- 数字化、网络化、信息化，一个以网络为核心的信息时代\n    \n- 三大类网络：电信网路、有线电视网络、计算机网路，核心是计算机网络\n\n### 互联网概述\n- 网络和互联网\n    - 网络：由若干**结点**（node）和连接这些结点的**链路**（link）组成。\n    - 互联网：网络之间通过路由器互联起来，这就构成一个覆盖范围更大的计算机网路。这样的网络称为**互联网**\n    - 互联网是“网络的网络”\n    \n    ![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/network-of-networks.gif)\n\n- Internet是从单个网络**ARPANET**发展过来的\n\n- ARPANET是美国国防部在1969创建的第一个分组交换网\n\n- 1983年TCP/IP协议成为ARPANET上的标准协议\n\n### 互联网的组成\n- 资源子网、通信子网\n\n- 端系统之间的通信方式：客户-服务器方式（C/S方式）、对等方式（P2P方式）\n\n- 交换方式\n    - **电路交换**：整个报文的比特流连续地从源点直达终点，好像在一个管道中传送\n        - 若要连续传送大量的数据，且其传送时间远大于连接建立时间，则电路交换的传输速率较快。 \n        - 在通话的全部时间内，通话的两个用户始终占用端到端的通信\n    - **报文交换**：整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。\n    - **分组交换**：单个分组（整个报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。\n        - 报文交换和分组交换不需要预分配传输带宽，在传输突发数据时可提高整个网络的信道利用率。\n        - 由于分组的长度往往远小于整个报文的长度，因此分组交换比报文交换的时延小。\n\n### 计算机网络的类别\n- 按照网络的作用范围进行分类\n    - 广域网（WAN）\n    - 城域网（MAN）\n    - 局域网（LAN）\n    - 个人局域网（PAN）\n    - 无限个人局域网（WPAN）\n\n- 按照网络的使用者进行分类\n    - 公用网（Public Network）\n    - 专用网（Private Network）\n\n### 计算机网络的性能指标\n- 速率：数据的传送速率，也成数据率。单位：bit/s\n\n- 带宽：单位时间内网络中的某信道所能通过的“最高数据率”。单位：bit/s\n\n- 吞吐量：单位时间内通过某个网络的实际的数据量。有时吞吐量可用每秒传送的字节数或帧数来表示。\n\n- 时延：指数据从网络的一端传送到另一端所需的时间。\n    - **总时延**=发送时延+传播时延+处理时延+排队时延\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4b2ae78c-e254-44df-9e37-578e2f2bef52.jpg)\n        - 发送时延：数据帧长度（bit）/发送速率（bit/s）\n        - 传播时延：信道长度（m）/电磁波在信道上的传播速率（m/s）\n        - 处理时延：从收到的分组中提取数据部分、进行差错检验或查找合适路由等需要花费一定的时间\n        - 排队时延：当某一时刻收到的分组数量大于路由器的处理速度，分组在进入路由器输入队列后排队等待所消耗的时间\n\n- 时延带宽积=传播时延 X 带宽\n\n- 往返时间RTT=发送时间+接收时间\n    - 发送时间=接收时间=数据长度/发送速率。计算时需要统一单位\n    - 有效数据率=数据长度/（发送时间+RTT）\n\n- 利用率：包含信道利用率、网络利用率\n    - 信道利用率：指某信道由百分之几的时间是被利用的（有数据通过），完全空闲的信道的利用率为零\n    - 网络利用率：指全网络的信道利用率的加权平均值。\n        - 当网络的利用率达到其容量的1/2时，时延就要加倍。\n        - **信道或网络的利用率过高会产生非常大的时延**\n\n####  网络协议的三要素：语法、语义、同步\n    \n\n### 计算机网络体系结构\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0fa6c237-a909-4e2a-a771-2c5485cd8ce0.png)\n\n1. 五层协议\n    - **应用层**：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。\n    \n    - **传输层**：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。\n    \n    - **网络层**：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。\n    \n    - **数据链路层**：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。\n    \n    - **物理层**：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n\n2. OSI\n    - **表示层**：数据压缩、加密以及数据描述，这使得应用程序不必关心在各台主机中数据内部格式不同的问题。\n    \n    - **会话层**：建立及管理会话。\n    \n    - 五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。\n\n3. TCP/IP\n    - 它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。\n    \n    - TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。\n    \n    ![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/48d79be8-085b-4862-8a9d-18402eb93b31.png)\n\n4. 数据在各层之间的传递过程\n    - 在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。\n\n    - 路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。\n\n### 实体、协议、服务和服务访问点之间的区别和关系\n- 实体：任何可发送或接收信息的硬件或软件进程\n\n- 协议：控制两个对等实体（或多个实体）进行通信的规则的集合\n\n- 服务：在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下一层所提供的服务\n\n- 服务提供点：在同一系统中相邻两层的实体进行交互的地方，通常称之为**服务访问点SAP（Service Access Point）**\n\n#### 协议和服务的区别：\n- 协议的实现保证了能够向上一层提供服务。使用本层服务的实体只能看见服务而无法看见下面的协议。也就是说，下面的协议对上面的实体是透明的。\n- 其次，协议是“水平的”，即协议是控制对等实体之间通信的规则。但服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。\n- 那些能够被高一层实体“看得见”的功能才能称之为“服务”。","source":"_posts/概述-over.md","raw":"---\ntitle: 计算机网络-概述\ndate: {{ date }}\ntags: Internet\ncategories:\ncomments: true\n---\n\n\n### 计算机网络在信息时代的作用\n- 数字化、网络化、信息化，一个以网络为核心的信息时代\n    \n- 三大类网络：电信网路、有线电视网络、计算机网路，核心是计算机网络\n\n### 互联网概述\n- 网络和互联网\n    - 网络：由若干**结点**（node）和连接这些结点的**链路**（link）组成。\n    - 互联网：网络之间通过路由器互联起来，这就构成一个覆盖范围更大的计算机网路。这样的网络称为**互联网**\n    - 互联网是“网络的网络”\n    \n    ![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/network-of-networks.gif)\n\n- Internet是从单个网络**ARPANET**发展过来的\n\n- ARPANET是美国国防部在1969创建的第一个分组交换网\n\n- 1983年TCP/IP协议成为ARPANET上的标准协议\n\n### 互联网的组成\n- 资源子网、通信子网\n\n- 端系统之间的通信方式：客户-服务器方式（C/S方式）、对等方式（P2P方式）\n\n- 交换方式\n    - **电路交换**：整个报文的比特流连续地从源点直达终点，好像在一个管道中传送\n        - 若要连续传送大量的数据，且其传送时间远大于连接建立时间，则电路交换的传输速率较快。 \n        - 在通话的全部时间内，通话的两个用户始终占用端到端的通信\n    - **报文交换**：整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。\n    - **分组交换**：单个分组（整个报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。\n        - 报文交换和分组交换不需要预分配传输带宽，在传输突发数据时可提高整个网络的信道利用率。\n        - 由于分组的长度往往远小于整个报文的长度，因此分组交换比报文交换的时延小。\n\n### 计算机网络的类别\n- 按照网络的作用范围进行分类\n    - 广域网（WAN）\n    - 城域网（MAN）\n    - 局域网（LAN）\n    - 个人局域网（PAN）\n    - 无限个人局域网（WPAN）\n\n- 按照网络的使用者进行分类\n    - 公用网（Public Network）\n    - 专用网（Private Network）\n\n### 计算机网络的性能指标\n- 速率：数据的传送速率，也成数据率。单位：bit/s\n\n- 带宽：单位时间内网络中的某信道所能通过的“最高数据率”。单位：bit/s\n\n- 吞吐量：单位时间内通过某个网络的实际的数据量。有时吞吐量可用每秒传送的字节数或帧数来表示。\n\n- 时延：指数据从网络的一端传送到另一端所需的时间。\n    - **总时延**=发送时延+传播时延+处理时延+排队时延\n![](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4b2ae78c-e254-44df-9e37-578e2f2bef52.jpg)\n        - 发送时延：数据帧长度（bit）/发送速率（bit/s）\n        - 传播时延：信道长度（m）/电磁波在信道上的传播速率（m/s）\n        - 处理时延：从收到的分组中提取数据部分、进行差错检验或查找合适路由等需要花费一定的时间\n        - 排队时延：当某一时刻收到的分组数量大于路由器的处理速度，分组在进入路由器输入队列后排队等待所消耗的时间\n\n- 时延带宽积=传播时延 X 带宽\n\n- 往返时间RTT=发送时间+接收时间\n    - 发送时间=接收时间=数据长度/发送速率。计算时需要统一单位\n    - 有效数据率=数据长度/（发送时间+RTT）\n\n- 利用率：包含信道利用率、网络利用率\n    - 信道利用率：指某信道由百分之几的时间是被利用的（有数据通过），完全空闲的信道的利用率为零\n    - 网络利用率：指全网络的信道利用率的加权平均值。\n        - 当网络的利用率达到其容量的1/2时，时延就要加倍。\n        - **信道或网络的利用率过高会产生非常大的时延**\n\n####  网络协议的三要素：语法、语义、同步\n    \n\n### 计算机网络体系结构\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0fa6c237-a909-4e2a-a771-2c5485cd8ce0.png)\n\n1. 五层协议\n    - **应用层**：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。\n    \n    - **传输层**：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。\n    \n    - **网络层**：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。\n    \n    - **数据链路层**：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。\n    \n    - **物理层**：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n\n2. OSI\n    - **表示层**：数据压缩、加密以及数据描述，这使得应用程序不必关心在各台主机中数据内部格式不同的问题。\n    \n    - **会话层**：建立及管理会话。\n    \n    - 五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。\n\n3. TCP/IP\n    - 它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。\n    \n    - TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。\n    \n    ![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/48d79be8-085b-4862-8a9d-18402eb93b31.png)\n\n4. 数据在各层之间的传递过程\n    - 在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。\n\n    - 路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。\n\n### 实体、协议、服务和服务访问点之间的区别和关系\n- 实体：任何可发送或接收信息的硬件或软件进程\n\n- 协议：控制两个对等实体（或多个实体）进行通信的规则的集合\n\n- 服务：在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下一层所提供的服务\n\n- 服务提供点：在同一系统中相邻两层的实体进行交互的地方，通常称之为**服务访问点SAP（Service Access Point）**\n\n#### 协议和服务的区别：\n- 协议的实现保证了能够向上一层提供服务。使用本层服务的实体只能看见服务而无法看见下面的协议。也就是说，下面的协议对上面的实体是透明的。\n- 其次，协议是“水平的”，即协议是控制对等实体之间通信的规则。但服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。\n- 那些能够被高一层实体“看得见”的功能才能称之为“服务”。","slug":"概述-over","published":1,"updated":"2020-03-06T06:17:07.742Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xk000qk8597795d0lk","content":"<h3 id=\"计算机网络在信息时代的作用\"><a href=\"#计算机网络在信息时代的作用\" class=\"headerlink\" title=\"计算机网络在信息时代的作用\"></a>计算机网络在信息时代的作用</h3><ul>\n<li><p>数字化、网络化、信息化，一个以网络为核心的信息时代</p>\n</li>\n<li><p>三大类网络：电信网路、有线电视网络、计算机网路，核心是计算机网络</p>\n</li>\n</ul>\n<h3 id=\"互联网概述\"><a href=\"#互联网概述\" class=\"headerlink\" title=\"互联网概述\"></a>互联网概述</h3><ul>\n<li><p>网络和互联网</p>\n<ul>\n<li><p>网络：由若干<strong>结点</strong>（node）和连接这些结点的<strong>链路</strong>（link）组成。</p>\n</li>\n<li><p>互联网：网络之间通过路由器互联起来，这就构成一个覆盖范围更大的计算机网路。这样的网络称为<strong>互联网</strong></p>\n</li>\n<li><p>互联网是“网络的网络”</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/network-of-networks.gif\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p>Internet是从单个网络<strong>ARPANET</strong>发展过来的</p>\n</li>\n<li><p>ARPANET是美国国防部在1969创建的第一个分组交换网</p>\n</li>\n<li><p>1983年TCP/IP协议成为ARPANET上的标准协议</p>\n</li>\n</ul>\n<h3 id=\"互联网的组成\"><a href=\"#互联网的组成\" class=\"headerlink\" title=\"互联网的组成\"></a>互联网的组成</h3><ul>\n<li><p>资源子网、通信子网</p>\n</li>\n<li><p>端系统之间的通信方式：客户-服务器方式（C/S方式）、对等方式（P2P方式）</p>\n</li>\n<li><p>交换方式</p>\n<ul>\n<li><strong>电路交换</strong>：整个报文的比特流连续地从源点直达终点，好像在一个管道中传送<ul>\n<li>若要连续传送大量的数据，且其传送时间远大于连接建立时间，则电路交换的传输速率较快。 </li>\n<li>在通话的全部时间内，通话的两个用户始终占用端到端的通信</li>\n</ul>\n</li>\n<li><strong>报文交换</strong>：整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。</li>\n<li><strong>分组交换</strong>：单个分组（整个报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。<ul>\n<li>报文交换和分组交换不需要预分配传输带宽，在传输突发数据时可提高整个网络的信道利用率。</li>\n<li>由于分组的长度往往远小于整个报文的长度，因此分组交换比报文交换的时延小。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"计算机网络的类别\"><a href=\"#计算机网络的类别\" class=\"headerlink\" title=\"计算机网络的类别\"></a>计算机网络的类别</h3><ul>\n<li><p>按照网络的作用范围进行分类</p>\n<ul>\n<li>广域网（WAN）</li>\n<li>城域网（MAN）</li>\n<li>局域网（LAN）</li>\n<li>个人局域网（PAN）</li>\n<li>无限个人局域网（WPAN）</li>\n</ul>\n</li>\n<li><p>按照网络的使用者进行分类</p>\n<ul>\n<li>公用网（Public Network）</li>\n<li>专用网（Private Network）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"计算机网络的性能指标\"><a href=\"#计算机网络的性能指标\" class=\"headerlink\" title=\"计算机网络的性能指标\"></a>计算机网络的性能指标</h3><ul>\n<li><p>速率：数据的传送速率，也成数据率。单位：bit/s</p>\n</li>\n<li><p>带宽：单位时间内网络中的某信道所能通过的“最高数据率”。单位：bit/s</p>\n</li>\n<li><p>吞吐量：单位时间内通过某个网络的实际的数据量。有时吞吐量可用每秒传送的字节数或帧数来表示。</p>\n</li>\n<li><p>时延：指数据从网络的一端传送到另一端所需的时间。</p>\n<ul>\n<li><strong>总时延</strong>=发送时延+传播时延+处理时延+排队时延<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4b2ae78c-e254-44df-9e37-578e2f2bef52.jpg\" alt=\"\"><ul>\n<li>发送时延：数据帧长度（bit）/发送速率（bit/s）</li>\n<li>传播时延：信道长度（m）/电磁波在信道上的传播速率（m/s）</li>\n<li>处理时延：从收到的分组中提取数据部分、进行差错检验或查找合适路由等需要花费一定的时间</li>\n<li>排队时延：当某一时刻收到的分组数量大于路由器的处理速度，分组在进入路由器输入队列后排队等待所消耗的时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>时延带宽积=传播时延 X 带宽</p>\n</li>\n<li><p>往返时间RTT=发送时间+接收时间</p>\n<ul>\n<li>发送时间=接收时间=数据长度/发送速率。计算时需要统一单位</li>\n<li>有效数据率=数据长度/（发送时间+RTT）</li>\n</ul>\n</li>\n<li><p>利用率：包含信道利用率、网络利用率</p>\n<ul>\n<li>信道利用率：指某信道由百分之几的时间是被利用的（有数据通过），完全空闲的信道的利用率为零</li>\n<li>网络利用率：指全网络的信道利用率的加权平均值。<ul>\n<li>当网络的利用率达到其容量的1/2时，时延就要加倍。</li>\n<li><strong>信道或网络的利用率过高会产生非常大的时延</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"网络协议的三要素：语法、语义、同步\"><a href=\"#网络协议的三要素：语法、语义、同步\" class=\"headerlink\" title=\"网络协议的三要素：语法、语义、同步\"></a>网络协议的三要素：语法、语义、同步</h4><h3 id=\"计算机网络体系结构\"><a href=\"#计算机网络体系结构\" class=\"headerlink\" title=\"计算机网络体系结构\"></a>计算机网络体系结构</h3><p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0fa6c237-a909-4e2a-a771-2c5485cd8ce0.png\" alt=\"image\"></p>\n<ol>\n<li><p>五层协议</p>\n<ul>\n<li><p><strong>应用层</strong>：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。</p>\n</li>\n<li><p><strong>传输层</strong>：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。</p>\n</li>\n<li><p><strong>网络层</strong>：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。</p>\n</li>\n<li><p><strong>数据链路层</strong>：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</p>\n</li>\n<li><p><strong>物理层</strong>：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p>\n</li>\n</ul>\n</li>\n<li><p>OSI</p>\n<ul>\n<li><p><strong>表示层</strong>：数据压缩、加密以及数据描述，这使得应用程序不必关心在各台主机中数据内部格式不同的问题。</p>\n</li>\n<li><p><strong>会话层</strong>：建立及管理会话。</p>\n</li>\n<li><p>五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。</p>\n</li>\n</ul>\n</li>\n<li><p>TCP/IP</p>\n<ul>\n<li><p>它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p>\n</li>\n<li><p>TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/48d79be8-085b-4862-8a9d-18402eb93b31.png\" alt=\"image\"></p>\n</li>\n</ul>\n</li>\n<li><p>数据在各层之间的传递过程</p>\n<ul>\n<li><p>在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p>\n</li>\n<li><p>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"实体、协议、服务和服务访问点之间的区别和关系\"><a href=\"#实体、协议、服务和服务访问点之间的区别和关系\" class=\"headerlink\" title=\"实体、协议、服务和服务访问点之间的区别和关系\"></a>实体、协议、服务和服务访问点之间的区别和关系</h3><ul>\n<li><p>实体：任何可发送或接收信息的硬件或软件进程</p>\n</li>\n<li><p>协议：控制两个对等实体（或多个实体）进行通信的规则的集合</p>\n</li>\n<li><p>服务：在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下一层所提供的服务</p>\n</li>\n<li><p>服务提供点：在同一系统中相邻两层的实体进行交互的地方，通常称之为<strong>服务访问点SAP（Service Access Point）</strong></p>\n</li>\n</ul>\n<h4 id=\"协议和服务的区别：\"><a href=\"#协议和服务的区别：\" class=\"headerlink\" title=\"协议和服务的区别：\"></a>协议和服务的区别：</h4><ul>\n<li>协议的实现保证了能够向上一层提供服务。使用本层服务的实体只能看见服务而无法看见下面的协议。也就是说，下面的协议对上面的实体是透明的。</li>\n<li>其次，协议是“水平的”，即协议是控制对等实体之间通信的规则。但服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</li>\n<li>那些能够被高一层实体“看得见”的功能才能称之为“服务”。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计算机网络在信息时代的作用\"><a href=\"#计算机网络在信息时代的作用\" class=\"headerlink\" title=\"计算机网络在信息时代的作用\"></a>计算机网络在信息时代的作用</h3><ul>\n<li><p>数字化、网络化、信息化，一个以网络为核心的信息时代</p>\n</li>\n<li><p>三大类网络：电信网路、有线电视网络、计算机网路，核心是计算机网络</p>\n</li>\n</ul>\n<h3 id=\"互联网概述\"><a href=\"#互联网概述\" class=\"headerlink\" title=\"互联网概述\"></a>互联网概述</h3><ul>\n<li><p>网络和互联网</p>\n<ul>\n<li><p>网络：由若干<strong>结点</strong>（node）和连接这些结点的<strong>链路</strong>（link）组成。</p>\n</li>\n<li><p>互联网：网络之间通过路由器互联起来，这就构成一个覆盖范围更大的计算机网路。这样的网络称为<strong>互联网</strong></p>\n</li>\n<li><p>互联网是“网络的网络”</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/network-of-networks.gif\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p>Internet是从单个网络<strong>ARPANET</strong>发展过来的</p>\n</li>\n<li><p>ARPANET是美国国防部在1969创建的第一个分组交换网</p>\n</li>\n<li><p>1983年TCP/IP协议成为ARPANET上的标准协议</p>\n</li>\n</ul>\n<h3 id=\"互联网的组成\"><a href=\"#互联网的组成\" class=\"headerlink\" title=\"互联网的组成\"></a>互联网的组成</h3><ul>\n<li><p>资源子网、通信子网</p>\n</li>\n<li><p>端系统之间的通信方式：客户-服务器方式（C/S方式）、对等方式（P2P方式）</p>\n</li>\n<li><p>交换方式</p>\n<ul>\n<li><strong>电路交换</strong>：整个报文的比特流连续地从源点直达终点，好像在一个管道中传送<ul>\n<li>若要连续传送大量的数据，且其传送时间远大于连接建立时间，则电路交换的传输速率较快。 </li>\n<li>在通话的全部时间内，通话的两个用户始终占用端到端的通信</li>\n</ul>\n</li>\n<li><strong>报文交换</strong>：整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个结点。</li>\n<li><strong>分组交换</strong>：单个分组（整个报文的一部分）传送到相邻结点，存储下来后查找转发表，转发到下一个结点。<ul>\n<li>报文交换和分组交换不需要预分配传输带宽，在传输突发数据时可提高整个网络的信道利用率。</li>\n<li>由于分组的长度往往远小于整个报文的长度，因此分组交换比报文交换的时延小。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"计算机网络的类别\"><a href=\"#计算机网络的类别\" class=\"headerlink\" title=\"计算机网络的类别\"></a>计算机网络的类别</h3><ul>\n<li><p>按照网络的作用范围进行分类</p>\n<ul>\n<li>广域网（WAN）</li>\n<li>城域网（MAN）</li>\n<li>局域网（LAN）</li>\n<li>个人局域网（PAN）</li>\n<li>无限个人局域网（WPAN）</li>\n</ul>\n</li>\n<li><p>按照网络的使用者进行分类</p>\n<ul>\n<li>公用网（Public Network）</li>\n<li>专用网（Private Network）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"计算机网络的性能指标\"><a href=\"#计算机网络的性能指标\" class=\"headerlink\" title=\"计算机网络的性能指标\"></a>计算机网络的性能指标</h3><ul>\n<li><p>速率：数据的传送速率，也成数据率。单位：bit/s</p>\n</li>\n<li><p>带宽：单位时间内网络中的某信道所能通过的“最高数据率”。单位：bit/s</p>\n</li>\n<li><p>吞吐量：单位时间内通过某个网络的实际的数据量。有时吞吐量可用每秒传送的字节数或帧数来表示。</p>\n</li>\n<li><p>时延：指数据从网络的一端传送到另一端所需的时间。</p>\n<ul>\n<li><strong>总时延</strong>=发送时延+传播时延+处理时延+排队时延<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4b2ae78c-e254-44df-9e37-578e2f2bef52.jpg\" alt=\"\"><ul>\n<li>发送时延：数据帧长度（bit）/发送速率（bit/s）</li>\n<li>传播时延：信道长度（m）/电磁波在信道上的传播速率（m/s）</li>\n<li>处理时延：从收到的分组中提取数据部分、进行差错检验或查找合适路由等需要花费一定的时间</li>\n<li>排队时延：当某一时刻收到的分组数量大于路由器的处理速度，分组在进入路由器输入队列后排队等待所消耗的时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>时延带宽积=传播时延 X 带宽</p>\n</li>\n<li><p>往返时间RTT=发送时间+接收时间</p>\n<ul>\n<li>发送时间=接收时间=数据长度/发送速率。计算时需要统一单位</li>\n<li>有效数据率=数据长度/（发送时间+RTT）</li>\n</ul>\n</li>\n<li><p>利用率：包含信道利用率、网络利用率</p>\n<ul>\n<li>信道利用率：指某信道由百分之几的时间是被利用的（有数据通过），完全空闲的信道的利用率为零</li>\n<li>网络利用率：指全网络的信道利用率的加权平均值。<ul>\n<li>当网络的利用率达到其容量的1/2时，时延就要加倍。</li>\n<li><strong>信道或网络的利用率过高会产生非常大的时延</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"网络协议的三要素：语法、语义、同步\"><a href=\"#网络协议的三要素：语法、语义、同步\" class=\"headerlink\" title=\"网络协议的三要素：语法、语义、同步\"></a>网络协议的三要素：语法、语义、同步</h4><h3 id=\"计算机网络体系结构\"><a href=\"#计算机网络体系结构\" class=\"headerlink\" title=\"计算机网络体系结构\"></a>计算机网络体系结构</h3><p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0fa6c237-a909-4e2a-a771-2c5485cd8ce0.png\" alt=\"image\"></p>\n<ol>\n<li><p>五层协议</p>\n<ul>\n<li><p><strong>应用层</strong>：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等协议。数据单位为报文。</p>\n</li>\n<li><p><strong>传输层</strong>：为进程提供通用数据传输服务。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。</p>\n</li>\n<li><p><strong>网络层</strong>：为主机提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。</p>\n</li>\n<li><p><strong>数据链路层</strong>：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</p>\n</li>\n<li><p><strong>物理层</strong>：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p>\n</li>\n</ul>\n</li>\n<li><p>OSI</p>\n<ul>\n<li><p><strong>表示层</strong>：数据压缩、加密以及数据描述，这使得应用程序不必关心在各台主机中数据内部格式不同的问题。</p>\n</li>\n<li><p><strong>会话层</strong>：建立及管理会话。</p>\n</li>\n<li><p>五层协议没有表示层和会话层，而是将这些功能留给应用程序开发者处理。</p>\n</li>\n</ul>\n</li>\n<li><p>TCP/IP</p>\n<ul>\n<li><p>它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p>\n</li>\n<li><p>TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/48d79be8-085b-4862-8a9d-18402eb93b31.png\" alt=\"image\"></p>\n</li>\n</ul>\n</li>\n<li><p>数据在各层之间的传递过程</p>\n<ul>\n<li><p>在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p>\n</li>\n<li><p>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要传输层和应用层。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"实体、协议、服务和服务访问点之间的区别和关系\"><a href=\"#实体、协议、服务和服务访问点之间的区别和关系\" class=\"headerlink\" title=\"实体、协议、服务和服务访问点之间的区别和关系\"></a>实体、协议、服务和服务访问点之间的区别和关系</h3><ul>\n<li><p>实体：任何可发送或接收信息的硬件或软件进程</p>\n</li>\n<li><p>协议：控制两个对等实体（或多个实体）进行通信的规则的集合</p>\n</li>\n<li><p>服务：在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下一层所提供的服务</p>\n</li>\n<li><p>服务提供点：在同一系统中相邻两层的实体进行交互的地方，通常称之为<strong>服务访问点SAP（Service Access Point）</strong></p>\n</li>\n</ul>\n<h4 id=\"协议和服务的区别：\"><a href=\"#协议和服务的区别：\" class=\"headerlink\" title=\"协议和服务的区别：\"></a>协议和服务的区别：</h4><ul>\n<li>协议的实现保证了能够向上一层提供服务。使用本层服务的实体只能看见服务而无法看见下面的协议。也就是说，下面的协议对上面的实体是透明的。</li>\n<li>其次，协议是“水平的”，即协议是控制对等实体之间通信的规则。但服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</li>\n<li>那些能够被高一层实体“看得见”的功能才能称之为“服务”。</li>\n</ul>\n"},{"title":"计算机网络-物理层","date":"2020-03-06T06:16:54.614Z","comments":1,"_content":"\n\n### 物理层\n\n#### 物理层的基本概念\n\n##### 物理层的主要作用\n\n- 机器特性、电气特性、功能特性、过程特性\n\n#### 数据通信的基本知识\n\n##### 消息、数据、信号之间的关系\n\n- 通信的目的是传送**消息（message）**，**数据（data）**是运送消息的实体，**信号（signal）**是数据的电气或电磁的表现\n\n##### 信号的分类\n\n- 模拟信号（连续信号）\n\n- 数字信号（离散信号）\n 代表不同离散数值的基本波形就称为**码元**\n\n##### 信道\n\n- 一条通信线路往往包含一条发送信道和一条接收信道\n\n##### 通信方式\n\n根据信息在传输线上的传输方向，分为以下三种通信方式\n- 单工通信：单向传输\n- 半双工通信：双向交替传输\n- 全双工通信：双向同时传输\n\n##### 常用的编码方式\n\n- 不归零制:负电平代表0，正电平代表1。\n- 归零制：\n- 曼彻斯特编码：位周期中心的上跳变代表0，下跳变代表1\n- 差分曼彻斯特编码：位中心始终有跳变，位开始边界处有跳变代表0，没有代表1\n\n##### 带通调制\n\n- 基带信号：计算机输出的代表各种文字或图像文件的数字信号都属于基带信号\n\n基带信号往往包含由较多低频或直流成分，而许多信道并不能传输这种低频分量或直流分量，因此，需要对基带信号进行**调制**\n\n- 基带调制：**对基带信号的波形进行变换**，使其能够与信道特性相适应，变换后的信号仍是基带信号，称为编码  \n- 带通调制：对基带信号使用**载波**进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，称为带通信号。\n\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c34f4503-f62c-4043-9dc6-3e03288657df.jpg)\n\n###### 基本的带通调制方法\n\n- 调幅（AM）：即载波的振幅随基带数字信号而变化\n- 调频（FM）：即载波的频率随基带数字信号而变化\n- 调相（PM）：即载波的初始相位随基带数字信号而变化\n\n#### 传输媒体\n\n##### 分类\n\n- 导引型传输媒体（有线）\n    - 双绞线\n        1. 无屏蔽双绞线\n        2. 屏蔽双绞线\n    - 同轴电缆\n    - 光缆\n        - 单模光纤\n        - 多模光纤\n- 非导引型传输媒体（无线）\n    - 主要采用无线电微波通信，频率范围：300MHz～300GHz（波长1m～1mm），主要使用2～40GHz范围\n        - 微波通信分为：地面微波接力通信、卫星通信\n\n#### 信道复用技术\n\n##### 1.频分复用FDM（Frequency Division Multiplexing）\n\n频分复用的所有主机在相同的时间占用不同的频率带宽资源。\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4aa5e057-bc57-4719-ab57-c6fbc861c505.png)\n\n##### 2.时分复用TDM（Time DM）\n\n时分复用的所有主机在不同的时间占用相同的频率带宽资源\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/67582ade-d44a-46a6-8757-3c1296cc1ef9.png)\n使用频分使用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其他用户使用，因此这两种方式对信道的利用率都不高\n\n##### 3.统计时分复用STDM（Statistic TDM）\n\n是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6283be2a-814a-4a10-84bf-9592533fe6bc.png)\n\n##### 4.波分复用WDM（Wavelength DM）\n\n光的频分复用，由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。\n\n##### 5.码分复用CDM（Code DM）\n\n为每个用户分配m bit的码片，并且所有的码片正交，对于任意两个码片S和T有\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/308a02e9-3346-4251-8c41-bd5536dab491.png)\n\n为了讨论方便，取m=8，设码片S为00011011。在拥有该码片的用户发送比特1时就发送该码片，发送比特0时就发送该码片的反码11100100。\n\n在计算时将00011011记作（-1 -1 -1 +1 +1 -1 +1 +1），就可以得到\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6fda1dc7-5c74-49c1-bb79-237a77e43a43.png)\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e325a903-f0b1-4fbd-82bf-88913dc2f290.png)\n\n其中S' 为S 的反码。\n\n利用上面的式子可以知道，当接收端使用码片S对接收到的数据进行内积运算时，结果为0的时其他用户发送的数据，结果为1的时用户发送的比特1，结果为-1的是用户发送的比特0。\n\n码分复用需要发送的数据量为原先的m倍。\n\n#### 数字传输系统\n\n由于历史原因，多路复用的速率体系有两个互不兼容的国际标准，北美和日本的T1速率（1.544Mbit/s），欧洲的E1速率（2.048Mbit/s）\n\nITU-T制定的SDH中，STM-1的传输速率为155.52 Mbit/s\n\n#### 宽带接入技术\n\nADSL（Asymmetric Digital Subscriber Line）非对称数字用户线技术  \n是用数字技术对现有的模拟电话用户线进行改造，使其能够承载宽带数字业务。  \n虽然标准模拟电话信号的频带被限制在300～3400Hz范围内，但用户线本身实际可通过的信号频率却超过1MHz。   \nADSL技术把0～4kHz低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。   \nADSL的下行带宽远远大于上行带宽，“非对称”这个名词就是这样得出来的。","source":"_posts/物理层-over.md","raw":"---\ntitle: 计算机网络-物理层\ndate: {{ date }}\ntags: Internet\ncategories:\ncomments: true\n---\n\n\n### 物理层\n\n#### 物理层的基本概念\n\n##### 物理层的主要作用\n\n- 机器特性、电气特性、功能特性、过程特性\n\n#### 数据通信的基本知识\n\n##### 消息、数据、信号之间的关系\n\n- 通信的目的是传送**消息（message）**，**数据（data）**是运送消息的实体，**信号（signal）**是数据的电气或电磁的表现\n\n##### 信号的分类\n\n- 模拟信号（连续信号）\n\n- 数字信号（离散信号）\n 代表不同离散数值的基本波形就称为**码元**\n\n##### 信道\n\n- 一条通信线路往往包含一条发送信道和一条接收信道\n\n##### 通信方式\n\n根据信息在传输线上的传输方向，分为以下三种通信方式\n- 单工通信：单向传输\n- 半双工通信：双向交替传输\n- 全双工通信：双向同时传输\n\n##### 常用的编码方式\n\n- 不归零制:负电平代表0，正电平代表1。\n- 归零制：\n- 曼彻斯特编码：位周期中心的上跳变代表0，下跳变代表1\n- 差分曼彻斯特编码：位中心始终有跳变，位开始边界处有跳变代表0，没有代表1\n\n##### 带通调制\n\n- 基带信号：计算机输出的代表各种文字或图像文件的数字信号都属于基带信号\n\n基带信号往往包含由较多低频或直流成分，而许多信道并不能传输这种低频分量或直流分量，因此，需要对基带信号进行**调制**\n\n- 基带调制：**对基带信号的波形进行变换**，使其能够与信道特性相适应，变换后的信号仍是基带信号，称为编码  \n- 带通调制：对基带信号使用**载波**进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，称为带通信号。\n\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c34f4503-f62c-4043-9dc6-3e03288657df.jpg)\n\n###### 基本的带通调制方法\n\n- 调幅（AM）：即载波的振幅随基带数字信号而变化\n- 调频（FM）：即载波的频率随基带数字信号而变化\n- 调相（PM）：即载波的初始相位随基带数字信号而变化\n\n#### 传输媒体\n\n##### 分类\n\n- 导引型传输媒体（有线）\n    - 双绞线\n        1. 无屏蔽双绞线\n        2. 屏蔽双绞线\n    - 同轴电缆\n    - 光缆\n        - 单模光纤\n        - 多模光纤\n- 非导引型传输媒体（无线）\n    - 主要采用无线电微波通信，频率范围：300MHz～300GHz（波长1m～1mm），主要使用2～40GHz范围\n        - 微波通信分为：地面微波接力通信、卫星通信\n\n#### 信道复用技术\n\n##### 1.频分复用FDM（Frequency Division Multiplexing）\n\n频分复用的所有主机在相同的时间占用不同的频率带宽资源。\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4aa5e057-bc57-4719-ab57-c6fbc861c505.png)\n\n##### 2.时分复用TDM（Time DM）\n\n时分复用的所有主机在不同的时间占用相同的频率带宽资源\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/67582ade-d44a-46a6-8757-3c1296cc1ef9.png)\n使用频分使用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其他用户使用，因此这两种方式对信道的利用率都不高\n\n##### 3.统计时分复用STDM（Statistic TDM）\n\n是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6283be2a-814a-4a10-84bf-9592533fe6bc.png)\n\n##### 4.波分复用WDM（Wavelength DM）\n\n光的频分复用，由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。\n\n##### 5.码分复用CDM（Code DM）\n\n为每个用户分配m bit的码片，并且所有的码片正交，对于任意两个码片S和T有\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/308a02e9-3346-4251-8c41-bd5536dab491.png)\n\n为了讨论方便，取m=8，设码片S为00011011。在拥有该码片的用户发送比特1时就发送该码片，发送比特0时就发送该码片的反码11100100。\n\n在计算时将00011011记作（-1 -1 -1 +1 +1 -1 +1 +1），就可以得到\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6fda1dc7-5c74-49c1-bb79-237a77e43a43.png)\n\n![image](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e325a903-f0b1-4fbd-82bf-88913dc2f290.png)\n\n其中S' 为S 的反码。\n\n利用上面的式子可以知道，当接收端使用码片S对接收到的数据进行内积运算时，结果为0的时其他用户发送的数据，结果为1的时用户发送的比特1，结果为-1的是用户发送的比特0。\n\n码分复用需要发送的数据量为原先的m倍。\n\n#### 数字传输系统\n\n由于历史原因，多路复用的速率体系有两个互不兼容的国际标准，北美和日本的T1速率（1.544Mbit/s），欧洲的E1速率（2.048Mbit/s）\n\nITU-T制定的SDH中，STM-1的传输速率为155.52 Mbit/s\n\n#### 宽带接入技术\n\nADSL（Asymmetric Digital Subscriber Line）非对称数字用户线技术  \n是用数字技术对现有的模拟电话用户线进行改造，使其能够承载宽带数字业务。  \n虽然标准模拟电话信号的频带被限制在300～3400Hz范围内，但用户线本身实际可通过的信号频率却超过1MHz。   \nADSL技术把0～4kHz低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。   \nADSL的下行带宽远远大于上行带宽，“非对称”这个名词就是这样得出来的。","slug":"物理层-over","published":1,"updated":"2020-03-06T06:16:54.614Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xl000tk8597sa0a7ot","content":"<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><h4 id=\"物理层的基本概念\"><a href=\"#物理层的基本概念\" class=\"headerlink\" title=\"物理层的基本概念\"></a>物理层的基本概念</h4><h5 id=\"物理层的主要作用\"><a href=\"#物理层的主要作用\" class=\"headerlink\" title=\"物理层的主要作用\"></a>物理层的主要作用</h5><ul>\n<li>机器特性、电气特性、功能特性、过程特性</li>\n</ul>\n<h4 id=\"数据通信的基本知识\"><a href=\"#数据通信的基本知识\" class=\"headerlink\" title=\"数据通信的基本知识\"></a>数据通信的基本知识</h4><h5 id=\"消息、数据、信号之间的关系\"><a href=\"#消息、数据、信号之间的关系\" class=\"headerlink\" title=\"消息、数据、信号之间的关系\"></a>消息、数据、信号之间的关系</h5><ul>\n<li>通信的目的是传送<strong>消息（message）</strong>，<strong>数据（data）</strong>是运送消息的实体，<strong>信号（signal）</strong>是数据的电气或电磁的表现</li>\n</ul>\n<h5 id=\"信号的分类\"><a href=\"#信号的分类\" class=\"headerlink\" title=\"信号的分类\"></a>信号的分类</h5><ul>\n<li><p>模拟信号（连续信号）</p>\n</li>\n<li><p>数字信号（离散信号）<br>代表不同离散数值的基本波形就称为<strong>码元</strong></p>\n</li>\n</ul>\n<h5 id=\"信道\"><a href=\"#信道\" class=\"headerlink\" title=\"信道\"></a>信道</h5><ul>\n<li>一条通信线路往往包含一条发送信道和一条接收信道</li>\n</ul>\n<h5 id=\"通信方式\"><a href=\"#通信方式\" class=\"headerlink\" title=\"通信方式\"></a>通信方式</h5><p>根据信息在传输线上的传输方向，分为以下三种通信方式</p>\n<ul>\n<li>单工通信：单向传输</li>\n<li>半双工通信：双向交替传输</li>\n<li>全双工通信：双向同时传输</li>\n</ul>\n<h5 id=\"常用的编码方式\"><a href=\"#常用的编码方式\" class=\"headerlink\" title=\"常用的编码方式\"></a>常用的编码方式</h5><ul>\n<li>不归零制:负电平代表0，正电平代表1。</li>\n<li>归零制：</li>\n<li>曼彻斯特编码：位周期中心的上跳变代表0，下跳变代表1</li>\n<li>差分曼彻斯特编码：位中心始终有跳变，位开始边界处有跳变代表0，没有代表1</li>\n</ul>\n<h5 id=\"带通调制\"><a href=\"#带通调制\" class=\"headerlink\" title=\"带通调制\"></a>带通调制</h5><ul>\n<li>基带信号：计算机输出的代表各种文字或图像文件的数字信号都属于基带信号</li>\n</ul>\n<p>基带信号往往包含由较多低频或直流成分，而许多信道并不能传输这种低频分量或直流分量，因此，需要对基带信号进行<strong>调制</strong></p>\n<ul>\n<li>基带调制：<strong>对基带信号的波形进行变换</strong>，使其能够与信道特性相适应，变换后的信号仍是基带信号，称为编码  </li>\n<li>带通调制：对基带信号使用<strong>载波</strong>进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，称为带通信号。</li>\n</ul>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c34f4503-f62c-4043-9dc6-3e03288657df.jpg\" alt=\"image\"></p>\n<h6 id=\"基本的带通调制方法\"><a href=\"#基本的带通调制方法\" class=\"headerlink\" title=\"基本的带通调制方法\"></a>基本的带通调制方法</h6><ul>\n<li>调幅（AM）：即载波的振幅随基带数字信号而变化</li>\n<li>调频（FM）：即载波的频率随基带数字信号而变化</li>\n<li>调相（PM）：即载波的初始相位随基带数字信号而变化</li>\n</ul>\n<h4 id=\"传输媒体\"><a href=\"#传输媒体\" class=\"headerlink\" title=\"传输媒体\"></a>传输媒体</h4><h5 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h5><ul>\n<li>导引型传输媒体（有线）<ul>\n<li>双绞线<ol>\n<li>无屏蔽双绞线</li>\n<li>屏蔽双绞线</li>\n</ol>\n</li>\n<li>同轴电缆</li>\n<li>光缆<ul>\n<li>单模光纤</li>\n<li>多模光纤</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非导引型传输媒体（无线）<ul>\n<li>主要采用无线电微波通信，频率范围：300MHz～300GHz（波长1m～1mm），主要使用2～40GHz范围<ul>\n<li>微波通信分为：地面微波接力通信、卫星通信</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"信道复用技术\"><a href=\"#信道复用技术\" class=\"headerlink\" title=\"信道复用技术\"></a>信道复用技术</h4><h5 id=\"1-频分复用FDM（Frequency-Division-Multiplexing）\"><a href=\"#1-频分复用FDM（Frequency-Division-Multiplexing）\" class=\"headerlink\" title=\"1.频分复用FDM（Frequency Division Multiplexing）\"></a>1.频分复用FDM（Frequency Division Multiplexing）</h5><p>频分复用的所有主机在相同的时间占用不同的频率带宽资源。<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4aa5e057-bc57-4719-ab57-c6fbc861c505.png\" alt=\"image\"></p>\n<h5 id=\"2-时分复用TDM（Time-DM）\"><a href=\"#2-时分复用TDM（Time-DM）\" class=\"headerlink\" title=\"2.时分复用TDM（Time DM）\"></a>2.时分复用TDM（Time DM）</h5><p>时分复用的所有主机在不同的时间占用相同的频率带宽资源<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/67582ade-d44a-46a6-8757-3c1296cc1ef9.png\" alt=\"image\"><br>使用频分使用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其他用户使用，因此这两种方式对信道的利用率都不高</p>\n<h5 id=\"3-统计时分复用STDM（Statistic-TDM）\"><a href=\"#3-统计时分复用STDM（Statistic-TDM）\" class=\"headerlink\" title=\"3.统计时分复用STDM（Statistic TDM）\"></a>3.统计时分复用STDM（Statistic TDM）</h5><p>是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6283be2a-814a-4a10-84bf-9592533fe6bc.png\" alt=\"image\"></p>\n<h5 id=\"4-波分复用WDM（Wavelength-DM）\"><a href=\"#4-波分复用WDM（Wavelength-DM）\" class=\"headerlink\" title=\"4.波分复用WDM（Wavelength DM）\"></a>4.波分复用WDM（Wavelength DM）</h5><p>光的频分复用，由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</p>\n<h5 id=\"5-码分复用CDM（Code-DM）\"><a href=\"#5-码分复用CDM（Code-DM）\" class=\"headerlink\" title=\"5.码分复用CDM（Code DM）\"></a>5.码分复用CDM（Code DM）</h5><p>为每个用户分配m bit的码片，并且所有的码片正交，对于任意两个码片S和T有</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/308a02e9-3346-4251-8c41-bd5536dab491.png\" alt=\"image\"></p>\n<p>为了讨论方便，取m=8，设码片S为00011011。在拥有该码片的用户发送比特1时就发送该码片，发送比特0时就发送该码片的反码11100100。</p>\n<p>在计算时将00011011记作（-1 -1 -1 +1 +1 -1 +1 +1），就可以得到</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6fda1dc7-5c74-49c1-bb79-237a77e43a43.png\" alt=\"image\"></p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e325a903-f0b1-4fbd-82bf-88913dc2f290.png\" alt=\"image\"></p>\n<p>其中S’ 为S 的反码。</p>\n<p>利用上面的式子可以知道，当接收端使用码片S对接收到的数据进行内积运算时，结果为0的时其他用户发送的数据，结果为1的时用户发送的比特1，结果为-1的是用户发送的比特0。</p>\n<p>码分复用需要发送的数据量为原先的m倍。</p>\n<h4 id=\"数字传输系统\"><a href=\"#数字传输系统\" class=\"headerlink\" title=\"数字传输系统\"></a>数字传输系统</h4><p>由于历史原因，多路复用的速率体系有两个互不兼容的国际标准，北美和日本的T1速率（1.544Mbit/s），欧洲的E1速率（2.048Mbit/s）</p>\n<p>ITU-T制定的SDH中，STM-1的传输速率为155.52 Mbit/s</p>\n<h4 id=\"宽带接入技术\"><a href=\"#宽带接入技术\" class=\"headerlink\" title=\"宽带接入技术\"></a>宽带接入技术</h4><p>ADSL（Asymmetric Digital Subscriber Line）非对称数字用户线技术<br>是用数字技术对现有的模拟电话用户线进行改造，使其能够承载宽带数字业务。<br>虽然标准模拟电话信号的频带被限制在300～3400Hz范围内，但用户线本身实际可通过的信号频率却超过1MHz。<br>ADSL技术把0～4kHz低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。<br>ADSL的下行带宽远远大于上行带宽，“非对称”这个名词就是这样得出来的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h3><h4 id=\"物理层的基本概念\"><a href=\"#物理层的基本概念\" class=\"headerlink\" title=\"物理层的基本概念\"></a>物理层的基本概念</h4><h5 id=\"物理层的主要作用\"><a href=\"#物理层的主要作用\" class=\"headerlink\" title=\"物理层的主要作用\"></a>物理层的主要作用</h5><ul>\n<li>机器特性、电气特性、功能特性、过程特性</li>\n</ul>\n<h4 id=\"数据通信的基本知识\"><a href=\"#数据通信的基本知识\" class=\"headerlink\" title=\"数据通信的基本知识\"></a>数据通信的基本知识</h4><h5 id=\"消息、数据、信号之间的关系\"><a href=\"#消息、数据、信号之间的关系\" class=\"headerlink\" title=\"消息、数据、信号之间的关系\"></a>消息、数据、信号之间的关系</h5><ul>\n<li>通信的目的是传送<strong>消息（message）</strong>，<strong>数据（data）</strong>是运送消息的实体，<strong>信号（signal）</strong>是数据的电气或电磁的表现</li>\n</ul>\n<h5 id=\"信号的分类\"><a href=\"#信号的分类\" class=\"headerlink\" title=\"信号的分类\"></a>信号的分类</h5><ul>\n<li><p>模拟信号（连续信号）</p>\n</li>\n<li><p>数字信号（离散信号）<br>代表不同离散数值的基本波形就称为<strong>码元</strong></p>\n</li>\n</ul>\n<h5 id=\"信道\"><a href=\"#信道\" class=\"headerlink\" title=\"信道\"></a>信道</h5><ul>\n<li>一条通信线路往往包含一条发送信道和一条接收信道</li>\n</ul>\n<h5 id=\"通信方式\"><a href=\"#通信方式\" class=\"headerlink\" title=\"通信方式\"></a>通信方式</h5><p>根据信息在传输线上的传输方向，分为以下三种通信方式</p>\n<ul>\n<li>单工通信：单向传输</li>\n<li>半双工通信：双向交替传输</li>\n<li>全双工通信：双向同时传输</li>\n</ul>\n<h5 id=\"常用的编码方式\"><a href=\"#常用的编码方式\" class=\"headerlink\" title=\"常用的编码方式\"></a>常用的编码方式</h5><ul>\n<li>不归零制:负电平代表0，正电平代表1。</li>\n<li>归零制：</li>\n<li>曼彻斯特编码：位周期中心的上跳变代表0，下跳变代表1</li>\n<li>差分曼彻斯特编码：位中心始终有跳变，位开始边界处有跳变代表0，没有代表1</li>\n</ul>\n<h5 id=\"带通调制\"><a href=\"#带通调制\" class=\"headerlink\" title=\"带通调制\"></a>带通调制</h5><ul>\n<li>基带信号：计算机输出的代表各种文字或图像文件的数字信号都属于基带信号</li>\n</ul>\n<p>基带信号往往包含由较多低频或直流成分，而许多信道并不能传输这种低频分量或直流分量，因此，需要对基带信号进行<strong>调制</strong></p>\n<ul>\n<li>基带调制：<strong>对基带信号的波形进行变换</strong>，使其能够与信道特性相适应，变换后的信号仍是基带信号，称为编码  </li>\n<li>带通调制：对基带信号使用<strong>载波</strong>进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，称为带通信号。</li>\n</ul>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c34f4503-f62c-4043-9dc6-3e03288657df.jpg\" alt=\"image\"></p>\n<h6 id=\"基本的带通调制方法\"><a href=\"#基本的带通调制方法\" class=\"headerlink\" title=\"基本的带通调制方法\"></a>基本的带通调制方法</h6><ul>\n<li>调幅（AM）：即载波的振幅随基带数字信号而变化</li>\n<li>调频（FM）：即载波的频率随基带数字信号而变化</li>\n<li>调相（PM）：即载波的初始相位随基带数字信号而变化</li>\n</ul>\n<h4 id=\"传输媒体\"><a href=\"#传输媒体\" class=\"headerlink\" title=\"传输媒体\"></a>传输媒体</h4><h5 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h5><ul>\n<li>导引型传输媒体（有线）<ul>\n<li>双绞线<ol>\n<li>无屏蔽双绞线</li>\n<li>屏蔽双绞线</li>\n</ol>\n</li>\n<li>同轴电缆</li>\n<li>光缆<ul>\n<li>单模光纤</li>\n<li>多模光纤</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>非导引型传输媒体（无线）<ul>\n<li>主要采用无线电微波通信，频率范围：300MHz～300GHz（波长1m～1mm），主要使用2～40GHz范围<ul>\n<li>微波通信分为：地面微波接力通信、卫星通信</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"信道复用技术\"><a href=\"#信道复用技术\" class=\"headerlink\" title=\"信道复用技术\"></a>信道复用技术</h4><h5 id=\"1-频分复用FDM（Frequency-Division-Multiplexing）\"><a href=\"#1-频分复用FDM（Frequency-Division-Multiplexing）\" class=\"headerlink\" title=\"1.频分复用FDM（Frequency Division Multiplexing）\"></a>1.频分复用FDM（Frequency Division Multiplexing）</h5><p>频分复用的所有主机在相同的时间占用不同的频率带宽资源。<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4aa5e057-bc57-4719-ab57-c6fbc861c505.png\" alt=\"image\"></p>\n<h5 id=\"2-时分复用TDM（Time-DM）\"><a href=\"#2-时分复用TDM（Time-DM）\" class=\"headerlink\" title=\"2.时分复用TDM（Time DM）\"></a>2.时分复用TDM（Time DM）</h5><p>时分复用的所有主机在不同的时间占用相同的频率带宽资源<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/67582ade-d44a-46a6-8757-3c1296cc1ef9.png\" alt=\"image\"><br>使用频分使用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其他用户使用，因此这两种方式对信道的利用率都不高</p>\n<h5 id=\"3-统计时分复用STDM（Statistic-TDM）\"><a href=\"#3-统计时分复用STDM（Statistic-TDM）\" class=\"headerlink\" title=\"3.统计时分复用STDM（Statistic TDM）\"></a>3.统计时分复用STDM（Statistic TDM）</h5><p>是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。<br><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6283be2a-814a-4a10-84bf-9592533fe6bc.png\" alt=\"image\"></p>\n<h5 id=\"4-波分复用WDM（Wavelength-DM）\"><a href=\"#4-波分复用WDM（Wavelength-DM）\" class=\"headerlink\" title=\"4.波分复用WDM（Wavelength DM）\"></a>4.波分复用WDM（Wavelength DM）</h5><p>光的频分复用，由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</p>\n<h5 id=\"5-码分复用CDM（Code-DM）\"><a href=\"#5-码分复用CDM（Code-DM）\" class=\"headerlink\" title=\"5.码分复用CDM（Code DM）\"></a>5.码分复用CDM（Code DM）</h5><p>为每个用户分配m bit的码片，并且所有的码片正交，对于任意两个码片S和T有</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/308a02e9-3346-4251-8c41-bd5536dab491.png\" alt=\"image\"></p>\n<p>为了讨论方便，取m=8，设码片S为00011011。在拥有该码片的用户发送比特1时就发送该码片，发送比特0时就发送该码片的反码11100100。</p>\n<p>在计算时将00011011记作（-1 -1 -1 +1 +1 -1 +1 +1），就可以得到</p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6fda1dc7-5c74-49c1-bb79-237a77e43a43.png\" alt=\"image\"></p>\n<p><img data-src=\"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e325a903-f0b1-4fbd-82bf-88913dc2f290.png\" alt=\"image\"></p>\n<p>其中S’ 为S 的反码。</p>\n<p>利用上面的式子可以知道，当接收端使用码片S对接收到的数据进行内积运算时，结果为0的时其他用户发送的数据，结果为1的时用户发送的比特1，结果为-1的是用户发送的比特0。</p>\n<p>码分复用需要发送的数据量为原先的m倍。</p>\n<h4 id=\"数字传输系统\"><a href=\"#数字传输系统\" class=\"headerlink\" title=\"数字传输系统\"></a>数字传输系统</h4><p>由于历史原因，多路复用的速率体系有两个互不兼容的国际标准，北美和日本的T1速率（1.544Mbit/s），欧洲的E1速率（2.048Mbit/s）</p>\n<p>ITU-T制定的SDH中，STM-1的传输速率为155.52 Mbit/s</p>\n<h4 id=\"宽带接入技术\"><a href=\"#宽带接入技术\" class=\"headerlink\" title=\"宽带接入技术\"></a>宽带接入技术</h4><p>ADSL（Asymmetric Digital Subscriber Line）非对称数字用户线技术<br>是用数字技术对现有的模拟电话用户线进行改造，使其能够承载宽带数字业务。<br>虽然标准模拟电话信号的频带被限制在300～3400Hz范围内，但用户线本身实际可通过的信号频率却超过1MHz。<br>ADSL技术把0～4kHz低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。<br>ADSL的下行带宽远远大于上行带宽，“非对称”这个名词就是这样得出来的。</p>\n"},{"title":"计算机网络-网络层","date":"2020-03-06T06:16:57.125Z","comments":1,"_content":"\n\n### 概述\n\n因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。\n\n使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。\n\nIP （Internet Protocol）网际协议\n\n![image](https://ae01.alicdn.com/kf/HTB1Qhjjd2WG3KVjSZFP760aiXXae.png)\n\n与 IP 协议配套使用的还有三个协议：\n\n- 地址解析协议 ARP（Address Resolution Protocol）\n- 网际控制报文协议 ICMP（Internet Control Message Protocol）\n- 网际组管理协议 IGMP（Internet Group Management Protocol）\n\n#### 虚拟互联网络\n\n将网络互相连接起来要使用一些**中间设备**。根据中间设备所在的层次，分为：\n- 物理层：转发器\n- 数据链路层：网桥、交换机\n- 网络层：路由器\n- 网络层以上：网关\n\n### IP数据报格式\n\n![image](https://ae01.alicdn.com/kf/HTB1taLpd8Gw3KVjSZFwq6zQ2FXae.jpg)\n\n- **版本** : 有 4（IPv4）和 6（IPv6）两个值；\n— **首部长度** : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。\n- **区分服务** : 用来获得更好的服务，一般情况下不使用。\n- **总长度** : 包括首部长度和数据部分长度。\n- **生存时间** ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。\n- **协议** ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。\n- **首部检验和** ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。\n- **标识** : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。\n- **片偏移** : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。\n\n![image](https://ae01.alicdn.com/kf/HTB1SVrmd.uF3KVjSZK9762VtXXai.png)\n\n#### IP地址编址方式\n\nIP地址的编址方式经历来三个历史阶段：\n- 分类\n- 子网划分\n- 无分类编址CIDR\n\n#### 分类\n\n由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。\n\nIP地址 ::={<网络号>,<主机号>}\n\n![](https://ae01.alicdn.com/kf/HTB1lZHtdWWs3KVjSZFx761WUXXaw.png)\n\n>     \n    1. 同一个局域网中网络号必须相同  \n    2. 用交换机互连的网段仍是一个局域网    \n    3. 路由器用于连接两个不同的网段    \n    4. 当两个路由器直接相连时，在连线两端的接口处，可以分配也可以不分配IP地址。不分配的话叫做无编号网络或无名网络。\n> \n    路由表条目分类：  \n    1. 特定主机路由\n    2. 特定网络路由\n    3. 默认路由\n\n#### 子网划分\n\n通过在主机号字段中拿一部分作为子网号，把两级IP地址划分为三级IP地址。\n\nIP地址 ::={<网络号>,<子网号>,<主机号>}\n\n要使用子网，必须配置子网掩码。一个B类地址的默认子网掩码为255.255.0.0，如果B类地址的子网占两个比特，那么子网掩码为11111111 11111111 11000000 00000000，也就是255.255.192.0。\n\n注意，外部网络看不到子网的存在。\n\n#### 无分类编址CIDR\n\n无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。\n\nIP 地址 ::= {< 网络前缀号 >, < 主机号 >}\n\nCIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。\n\nCIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。\n\n一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。\n\n在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。\n\n### 地址解析协议ARP\n\n网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。\n\n![](https://ae01.alicdn.com/kf/HTB1f5jAdWWs3KVjSZFxq6yWUXXao.jpg)\n\nARP 实现由 IP 地址得到 MAC 地址。\n\n![](https://ae01.alicdn.com/kf/HTB1AWrtd75E3KVjSZFCq6zuzXXaO.jpg)\n\n每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。\n\n如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。\n\n![](https://ae01.alicdn.com/kf/HTB1z_Prd.GF3KVjSZFo762mpFXao.png)\n\n### 网际控制报文协议ICMP\n\nICMP 是问了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。\n\n![](https://ae01.alicdn.com/kf/HTB1swzCdYus3KVjSZKbq6xqkFXaZ.jpg)\n\nICMP 报文分为差错报告报文和询问报文。\n\n![](https://ae01.alicdn.com/kf/HTB1a7fzd8Gw3KVjSZFD760WEpXa0.png)\n\n1. Ping\n\nPing 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。\n\nPing 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。\n\n2. Traceroute\n\nTraceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。\n\nTraceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。\n\n- 源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；\n- 源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。\n- 不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。\n- 之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。\n \n\n### 虚拟专用网VPN\n\n由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。\n\n> \n    有三个专用地址块：\n    - 10.0.0.0 ~ 10.255.255.255\n    - 172.16.0.0 ~ 172.31.255.255\n    - 192.168.0.0 ~ 192.168.255.255\n\nVPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。\n\n下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。\n\n![](https://ae01.alicdn.com/kf/HTB1sZjtd.WF3KVjSZPhq6xclXXaI.jpg)\n\n### 网络地址转换NAT\n\n专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。\n\n在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。\n\n![](https://ae01.alicdn.com/kf/HTB1vkbYaMFY.1VjSZFq761dbXXaM.png)\n\n### 路由器的结构\n\n路由器从功能上可以划分为：路由选择和分组转发。\n\n分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。\n\n![](https://ae01.alicdn.com/kf/HTB1cR_sd3aH3KVjSZFjq6AFWpXaX.jpg)\n\n#### 路由器分组转发流程\n\n- 从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。\n- 若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；\n- 若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；\n- 若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；\n- 若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；\n- 报告转发分组出错。\n\n![](https://ae01.alicdn.com/kf/HTB1xEMGbfBj_uVjSZFpq6A0SXXag.jpg)\n\n### 路由选择协议\n\n路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。\n\n互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。\n\n可以把路由选择协议划分为两大类：\n\n- 自治系统内部的路由选择：RIP 和 OSPF\n- 自治系统间的路由选择：BGP\n\n#### 内部网关协议 RIP\n\nRIP 是一种**基于距离向量**的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。\n\nRIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。\n\n距离向量算法：\n\n- 对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；\n- 对修改后的 RIP 报文中的每一个项目，进行以下步骤：\n    - 若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；\n    - 否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。\n- 若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。\n\nRIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。\n\n#### 内部网关协议 OSPF\n\n开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。\n\n开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。\n\nOSPF 具有以下特点：\n\n- 向本自治系统中的所有路由器发送信息，这种方法是洪泛法。\n- 发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。\n- 只有当链路状态发生变化时，路由器才会发送信息。\n\n所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。\n\n#### 外部网关协议 BGP\n\nBGP（Border Gateway Protocol，边界网关协议）\n\nAS 之间的路由选择很困难，主要是由于：\n\n- 互联网规模很大；\n- 各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；\n- AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。\nBGP 只能寻找一条比较好的路由，而不是最佳路由。\n\n每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。\n\n![](https://ae01.alicdn.com/kf/HTB1glTAd8Kw3KVjSZFO761rDVXa0.png)\n","source":"_posts/网络层-over.md","raw":"---\ntitle: 计算机网络-网络层\ndate: {{ date }}\ntags: Internet\ncategories:\ncomments: true\n---\n\n\n### 概述\n\n因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。\n\n使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。\n\nIP （Internet Protocol）网际协议\n\n![image](https://ae01.alicdn.com/kf/HTB1Qhjjd2WG3KVjSZFP760aiXXae.png)\n\n与 IP 协议配套使用的还有三个协议：\n\n- 地址解析协议 ARP（Address Resolution Protocol）\n- 网际控制报文协议 ICMP（Internet Control Message Protocol）\n- 网际组管理协议 IGMP（Internet Group Management Protocol）\n\n#### 虚拟互联网络\n\n将网络互相连接起来要使用一些**中间设备**。根据中间设备所在的层次，分为：\n- 物理层：转发器\n- 数据链路层：网桥、交换机\n- 网络层：路由器\n- 网络层以上：网关\n\n### IP数据报格式\n\n![image](https://ae01.alicdn.com/kf/HTB1taLpd8Gw3KVjSZFwq6zQ2FXae.jpg)\n\n- **版本** : 有 4（IPv4）和 6（IPv6）两个值；\n— **首部长度** : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。\n- **区分服务** : 用来获得更好的服务，一般情况下不使用。\n- **总长度** : 包括首部长度和数据部分长度。\n- **生存时间** ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。\n- **协议** ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。\n- **首部检验和** ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。\n- **标识** : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。\n- **片偏移** : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。\n\n![image](https://ae01.alicdn.com/kf/HTB1SVrmd.uF3KVjSZK9762VtXXai.png)\n\n#### IP地址编址方式\n\nIP地址的编址方式经历来三个历史阶段：\n- 分类\n- 子网划分\n- 无分类编址CIDR\n\n#### 分类\n\n由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。\n\nIP地址 ::={<网络号>,<主机号>}\n\n![](https://ae01.alicdn.com/kf/HTB1lZHtdWWs3KVjSZFx761WUXXaw.png)\n\n>     \n    1. 同一个局域网中网络号必须相同  \n    2. 用交换机互连的网段仍是一个局域网    \n    3. 路由器用于连接两个不同的网段    \n    4. 当两个路由器直接相连时，在连线两端的接口处，可以分配也可以不分配IP地址。不分配的话叫做无编号网络或无名网络。\n> \n    路由表条目分类：  \n    1. 特定主机路由\n    2. 特定网络路由\n    3. 默认路由\n\n#### 子网划分\n\n通过在主机号字段中拿一部分作为子网号，把两级IP地址划分为三级IP地址。\n\nIP地址 ::={<网络号>,<子网号>,<主机号>}\n\n要使用子网，必须配置子网掩码。一个B类地址的默认子网掩码为255.255.0.0，如果B类地址的子网占两个比特，那么子网掩码为11111111 11111111 11000000 00000000，也就是255.255.192.0。\n\n注意，外部网络看不到子网的存在。\n\n#### 无分类编址CIDR\n\n无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。\n\nIP 地址 ::= {< 网络前缀号 >, < 主机号 >}\n\nCIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。\n\nCIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。\n\n一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。\n\n在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。\n\n### 地址解析协议ARP\n\n网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。\n\n![](https://ae01.alicdn.com/kf/HTB1f5jAdWWs3KVjSZFxq6yWUXXao.jpg)\n\nARP 实现由 IP 地址得到 MAC 地址。\n\n![](https://ae01.alicdn.com/kf/HTB1AWrtd75E3KVjSZFCq6zuzXXaO.jpg)\n\n每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。\n\n如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。\n\n![](https://ae01.alicdn.com/kf/HTB1z_Prd.GF3KVjSZFo762mpFXao.png)\n\n### 网际控制报文协议ICMP\n\nICMP 是问了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。\n\n![](https://ae01.alicdn.com/kf/HTB1swzCdYus3KVjSZKbq6xqkFXaZ.jpg)\n\nICMP 报文分为差错报告报文和询问报文。\n\n![](https://ae01.alicdn.com/kf/HTB1a7fzd8Gw3KVjSZFD760WEpXa0.png)\n\n1. Ping\n\nPing 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。\n\nPing 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。\n\n2. Traceroute\n\nTraceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。\n\nTraceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。\n\n- 源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；\n- 源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。\n- 不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。\n- 之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。\n \n\n### 虚拟专用网VPN\n\n由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。\n\n> \n    有三个专用地址块：\n    - 10.0.0.0 ~ 10.255.255.255\n    - 172.16.0.0 ~ 172.31.255.255\n    - 192.168.0.0 ~ 192.168.255.255\n\nVPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。\n\n下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。\n\n![](https://ae01.alicdn.com/kf/HTB1sZjtd.WF3KVjSZPhq6xclXXaI.jpg)\n\n### 网络地址转换NAT\n\n专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。\n\n在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。\n\n![](https://ae01.alicdn.com/kf/HTB1vkbYaMFY.1VjSZFq761dbXXaM.png)\n\n### 路由器的结构\n\n路由器从功能上可以划分为：路由选择和分组转发。\n\n分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。\n\n![](https://ae01.alicdn.com/kf/HTB1cR_sd3aH3KVjSZFjq6AFWpXaX.jpg)\n\n#### 路由器分组转发流程\n\n- 从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。\n- 若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；\n- 若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；\n- 若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；\n- 若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；\n- 报告转发分组出错。\n\n![](https://ae01.alicdn.com/kf/HTB1xEMGbfBj_uVjSZFpq6A0SXXag.jpg)\n\n### 路由选择协议\n\n路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。\n\n互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。\n\n可以把路由选择协议划分为两大类：\n\n- 自治系统内部的路由选择：RIP 和 OSPF\n- 自治系统间的路由选择：BGP\n\n#### 内部网关协议 RIP\n\nRIP 是一种**基于距离向量**的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。\n\nRIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。\n\n距离向量算法：\n\n- 对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；\n- 对修改后的 RIP 报文中的每一个项目，进行以下步骤：\n    - 若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；\n    - 否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。\n- 若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。\n\nRIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。\n\n#### 内部网关协议 OSPF\n\n开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。\n\n开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。\n\nOSPF 具有以下特点：\n\n- 向本自治系统中的所有路由器发送信息，这种方法是洪泛法。\n- 发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。\n- 只有当链路状态发生变化时，路由器才会发送信息。\n\n所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。\n\n#### 外部网关协议 BGP\n\nBGP（Border Gateway Protocol，边界网关协议）\n\nAS 之间的路由选择很困难，主要是由于：\n\n- 互联网规模很大；\n- 各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；\n- AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。\nBGP 只能寻找一条比较好的路由，而不是最佳路由。\n\n每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。\n\n![](https://ae01.alicdn.com/kf/HTB1glTAd8Kw3KVjSZFO761rDVXa0.png)\n","slug":"网络层-over","published":1,"updated":"2020-03-06T06:16:57.125Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xm000vk8595s1rfqzt","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。</p>\n<p>使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。</p>\n<p>IP （Internet Protocol）网际协议</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1Qhjjd2WG3KVjSZFP760aiXXae.png\" alt=\"image\"></p>\n<p>与 IP 协议配套使用的还有三个协议：</p>\n<ul>\n<li>地址解析协议 ARP（Address Resolution Protocol）</li>\n<li>网际控制报文协议 ICMP（Internet Control Message Protocol）</li>\n<li>网际组管理协议 IGMP（Internet Group Management Protocol）</li>\n</ul>\n<h4 id=\"虚拟互联网络\"><a href=\"#虚拟互联网络\" class=\"headerlink\" title=\"虚拟互联网络\"></a>虚拟互联网络</h4><p>将网络互相连接起来要使用一些<strong>中间设备</strong>。根据中间设备所在的层次，分为：</p>\n<ul>\n<li>物理层：转发器</li>\n<li>数据链路层：网桥、交换机</li>\n<li>网络层：路由器</li>\n<li>网络层以上：网关</li>\n</ul>\n<h3 id=\"IP数据报格式\"><a href=\"#IP数据报格式\" class=\"headerlink\" title=\"IP数据报格式\"></a>IP数据报格式</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB1taLpd8Gw3KVjSZFwq6zQ2FXae.jpg\" alt=\"image\"></p>\n<ul>\n<li><strong>版本</strong> : 有 4（IPv4）和 6（IPv6）两个值；<br>— <strong>首部长度</strong> : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</li>\n<li><strong>区分服务</strong> : 用来获得更好的服务，一般情况下不使用。</li>\n<li><strong>总长度</strong> : 包括首部长度和数据部分长度。</li>\n<li><strong>生存时间</strong> ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</li>\n<li><strong>协议</strong> ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</li>\n<li><strong>首部检验和</strong> ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</li>\n<li><strong>标识</strong> : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</li>\n<li><strong>片偏移</strong> : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1SVrmd.uF3KVjSZK9762VtXXai.png\" alt=\"image\"></p>\n<h4 id=\"IP地址编址方式\"><a href=\"#IP地址编址方式\" class=\"headerlink\" title=\"IP地址编址方式\"></a>IP地址编址方式</h4><p>IP地址的编址方式经历来三个历史阶段：</p>\n<ul>\n<li>分类</li>\n<li>子网划分</li>\n<li>无分类编址CIDR</li>\n</ul>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p>\n<p>IP地址 ::={&lt;网络号&gt;,&lt;主机号&gt;}</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1lZHtdWWs3KVjSZFx761WUXXaw.png\" alt=\"\"></p>\n<blockquote>\n<pre><code>1. 同一个局域网中网络号必须相同  \n2. 用交换机互连的网段仍是一个局域网    \n3. 路由器用于连接两个不同的网段    \n4. 当两个路由器直接相连时，在连线两端的接口处，可以分配也可以不分配IP地址。不分配的话叫做无编号网络或无名网络。</code></pre></blockquote>\n<pre><code>路由表条目分类：  \n1. 特定主机路由\n2. 特定网络路由\n3. 默认路由</code></pre><h4 id=\"子网划分\"><a href=\"#子网划分\" class=\"headerlink\" title=\"子网划分\"></a>子网划分</h4><p>通过在主机号字段中拿一部分作为子网号，把两级IP地址划分为三级IP地址。</p>\n<p>IP地址 ::={&lt;网络号&gt;,&lt;子网号&gt;,&lt;主机号&gt;}</p>\n<p>要使用子网，必须配置子网掩码。一个B类地址的默认子网掩码为255.255.0.0，如果B类地址的子网占两个比特，那么子网掩码为11111111 11111111 11000000 00000000，也就是255.255.192.0。</p>\n<p>注意，外部网络看不到子网的存在。</p>\n<h4 id=\"无分类编址CIDR\"><a href=\"#无分类编址CIDR\" class=\"headerlink\" title=\"无分类编址CIDR\"></a>无分类编址CIDR</h4><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p>\n<p>IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p>\n<p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p>\n<p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p>\n<p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。</p>\n<p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p>\n<h3 id=\"地址解析协议ARP\"><a href=\"#地址解析协议ARP\" class=\"headerlink\" title=\"地址解析协议ARP\"></a>地址解析协议ARP</h3><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1f5jAdWWs3KVjSZFxq6yWUXXao.jpg\" alt=\"\"></p>\n<p>ARP 实现由 IP 地址得到 MAC 地址。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1AWrtd75E3KVjSZFCq6zuzXXaO.jpg\" alt=\"\"></p>\n<p>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</p>\n<p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1z_Prd.GF3KVjSZFo762mpFXao.png\" alt=\"\"></p>\n<h3 id=\"网际控制报文协议ICMP\"><a href=\"#网际控制报文协议ICMP\" class=\"headerlink\" title=\"网际控制报文协议ICMP\"></a>网际控制报文协议ICMP</h3><p>ICMP 是问了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1swzCdYus3KVjSZKbq6xqkFXaZ.jpg\" alt=\"\"></p>\n<p>ICMP 报文分为差错报告报文和询问报文。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1a7fzd8Gw3KVjSZFD760WEpXa0.png\" alt=\"\"></p>\n<ol>\n<li>Ping</li>\n</ol>\n<p>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</p>\n<p>Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p>\n<ol start=\"2\">\n<li>Traceroute</li>\n</ol>\n<p>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</p>\n<p>Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。</p>\n<ul>\n<li>源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；</li>\n<li>源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。</li>\n<li>不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。</li>\n<li>之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</li>\n</ul>\n<h3 id=\"虚拟专用网VPN\"><a href=\"#虚拟专用网VPN\" class=\"headerlink\" title=\"虚拟专用网VPN\"></a>虚拟专用网VPN</h3><p>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。</p>\n<blockquote>\n</blockquote>\n<pre><code>有三个专用地址块：\n- 10.0.0.0 ~ 10.255.255.255\n- 172.16.0.0 ~ 172.31.255.255\n- 192.168.0.0 ~ 192.168.255.255</code></pre><p>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。</p>\n<p>下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1sZjtd.WF3KVjSZPhq6xclXXaI.jpg\" alt=\"\"></p>\n<h3 id=\"网络地址转换NAT\"><a href=\"#网络地址转换NAT\" class=\"headerlink\" title=\"网络地址转换NAT\"></a>网络地址转换NAT</h3><p>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</p>\n<p>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1vkbYaMFY.1VjSZFq761dbXXaM.png\" alt=\"\"></p>\n<h3 id=\"路由器的结构\"><a href=\"#路由器的结构\" class=\"headerlink\" title=\"路由器的结构\"></a>路由器的结构</h3><p>路由器从功能上可以划分为：路由选择和分组转发。</p>\n<p>分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1cR_sd3aH3KVjSZFjq6AFWpXaX.jpg\" alt=\"\"></p>\n<h4 id=\"路由器分组转发流程\"><a href=\"#路由器分组转发流程\" class=\"headerlink\" title=\"路由器分组转发流程\"></a>路由器分组转发流程</h4><ul>\n<li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li>\n<li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li>\n<li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li>\n<li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li>\n<li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li>\n<li>报告转发分组出错。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1xEMGbfBj_uVjSZFpq6A0SXXag.jpg\" alt=\"\"></p>\n<h3 id=\"路由选择协议\"><a href=\"#路由选择协议\" class=\"headerlink\" title=\"路由选择协议\"></a>路由选择协议</h3><p>路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p>\n<p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p>\n<p>可以把路由选择协议划分为两大类：</p>\n<ul>\n<li>自治系统内部的路由选择：RIP 和 OSPF</li>\n<li>自治系统间的路由选择：BGP</li>\n</ul>\n<h4 id=\"内部网关协议-RIP\"><a href=\"#内部网关协议-RIP\" class=\"headerlink\" title=\"内部网关协议 RIP\"></a>内部网关协议 RIP</h4><p>RIP 是一种<strong>基于距离向量</strong>的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p>\n<p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p>\n<p>距离向量算法：</p>\n<ul>\n<li>对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；</li>\n<li>对修改后的 RIP 报文中的每一个项目，进行以下步骤：<ul>\n<li>若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；</li>\n<li>否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。</li>\n</ul>\n</li>\n<li>若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。</li>\n</ul>\n<p>RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p>\n<h4 id=\"内部网关协议-OSPF\"><a href=\"#内部网关协议-OSPF\" class=\"headerlink\" title=\"内部网关协议 OSPF\"></a>内部网关协议 OSPF</h4><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p>\n<p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p>\n<p>OSPF 具有以下特点：</p>\n<ul>\n<li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li>\n<li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li>\n<li>只有当链路状态发生变化时，路由器才会发送信息。</li>\n</ul>\n<p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p>\n<h4 id=\"外部网关协议-BGP\"><a href=\"#外部网关协议-BGP\" class=\"headerlink\" title=\"外部网关协议 BGP\"></a>外部网关协议 BGP</h4><p>BGP（Border Gateway Protocol，边界网关协议）</p>\n<p>AS 之间的路由选择很困难，主要是由于：</p>\n<ul>\n<li>互联网规模很大；</li>\n<li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li>\n<li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。<br>BGP 只能寻找一条比较好的路由，而不是最佳路由。</li>\n</ul>\n<p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1glTAd8Kw3KVjSZFO761rDVXa0.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。</p>\n<p>使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。</p>\n<p>IP （Internet Protocol）网际协议</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1Qhjjd2WG3KVjSZFP760aiXXae.png\" alt=\"image\"></p>\n<p>与 IP 协议配套使用的还有三个协议：</p>\n<ul>\n<li>地址解析协议 ARP（Address Resolution Protocol）</li>\n<li>网际控制报文协议 ICMP（Internet Control Message Protocol）</li>\n<li>网际组管理协议 IGMP（Internet Group Management Protocol）</li>\n</ul>\n<h4 id=\"虚拟互联网络\"><a href=\"#虚拟互联网络\" class=\"headerlink\" title=\"虚拟互联网络\"></a>虚拟互联网络</h4><p>将网络互相连接起来要使用一些<strong>中间设备</strong>。根据中间设备所在的层次，分为：</p>\n<ul>\n<li>物理层：转发器</li>\n<li>数据链路层：网桥、交换机</li>\n<li>网络层：路由器</li>\n<li>网络层以上：网关</li>\n</ul>\n<h3 id=\"IP数据报格式\"><a href=\"#IP数据报格式\" class=\"headerlink\" title=\"IP数据报格式\"></a>IP数据报格式</h3><p><img data-src=\"https://ae01.alicdn.com/kf/HTB1taLpd8Gw3KVjSZFwq6zQ2FXae.jpg\" alt=\"image\"></p>\n<ul>\n<li><strong>版本</strong> : 有 4（IPv4）和 6（IPv6）两个值；<br>— <strong>首部长度</strong> : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</li>\n<li><strong>区分服务</strong> : 用来获得更好的服务，一般情况下不使用。</li>\n<li><strong>总长度</strong> : 包括首部长度和数据部分长度。</li>\n<li><strong>生存时间</strong> ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</li>\n<li><strong>协议</strong> ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</li>\n<li><strong>首部检验和</strong> ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</li>\n<li><strong>标识</strong> : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</li>\n<li><strong>片偏移</strong> : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1SVrmd.uF3KVjSZK9762VtXXai.png\" alt=\"image\"></p>\n<h4 id=\"IP地址编址方式\"><a href=\"#IP地址编址方式\" class=\"headerlink\" title=\"IP地址编址方式\"></a>IP地址编址方式</h4><p>IP地址的编址方式经历来三个历史阶段：</p>\n<ul>\n<li>分类</li>\n<li>子网划分</li>\n<li>无分类编址CIDR</li>\n</ul>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p>\n<p>IP地址 ::={&lt;网络号&gt;,&lt;主机号&gt;}</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1lZHtdWWs3KVjSZFx761WUXXaw.png\" alt=\"\"></p>\n<blockquote>\n<pre><code>1. 同一个局域网中网络号必须相同  \n2. 用交换机互连的网段仍是一个局域网    \n3. 路由器用于连接两个不同的网段    \n4. 当两个路由器直接相连时，在连线两端的接口处，可以分配也可以不分配IP地址。不分配的话叫做无编号网络或无名网络。</code></pre></blockquote>\n<pre><code>路由表条目分类：  \n1. 特定主机路由\n2. 特定网络路由\n3. 默认路由</code></pre><h4 id=\"子网划分\"><a href=\"#子网划分\" class=\"headerlink\" title=\"子网划分\"></a>子网划分</h4><p>通过在主机号字段中拿一部分作为子网号，把两级IP地址划分为三级IP地址。</p>\n<p>IP地址 ::={&lt;网络号&gt;,&lt;子网号&gt;,&lt;主机号&gt;}</p>\n<p>要使用子网，必须配置子网掩码。一个B类地址的默认子网掩码为255.255.0.0，如果B类地址的子网占两个比特，那么子网掩码为11111111 11111111 11000000 00000000，也就是255.255.192.0。</p>\n<p>注意，外部网络看不到子网的存在。</p>\n<h4 id=\"无分类编址CIDR\"><a href=\"#无分类编址CIDR\" class=\"headerlink\" title=\"无分类编址CIDR\"></a>无分类编址CIDR</h4><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p>\n<p>IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p>\n<p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p>\n<p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p>\n<p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。</p>\n<p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p>\n<h3 id=\"地址解析协议ARP\"><a href=\"#地址解析协议ARP\" class=\"headerlink\" title=\"地址解析协议ARP\"></a>地址解析协议ARP</h3><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1f5jAdWWs3KVjSZFxq6yWUXXao.jpg\" alt=\"\"></p>\n<p>ARP 实现由 IP 地址得到 MAC 地址。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1AWrtd75E3KVjSZFCq6zuzXXaO.jpg\" alt=\"\"></p>\n<p>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</p>\n<p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1z_Prd.GF3KVjSZFo762mpFXao.png\" alt=\"\"></p>\n<h3 id=\"网际控制报文协议ICMP\"><a href=\"#网际控制报文协议ICMP\" class=\"headerlink\" title=\"网际控制报文协议ICMP\"></a>网际控制报文协议ICMP</h3><p>ICMP 是问了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1swzCdYus3KVjSZKbq6xqkFXaZ.jpg\" alt=\"\"></p>\n<p>ICMP 报文分为差错报告报文和询问报文。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1a7fzd8Gw3KVjSZFD760WEpXa0.png\" alt=\"\"></p>\n<ol>\n<li>Ping</li>\n</ol>\n<p>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</p>\n<p>Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p>\n<ol start=\"2\">\n<li>Traceroute</li>\n</ol>\n<p>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</p>\n<p>Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。</p>\n<ul>\n<li>源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；</li>\n<li>源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。</li>\n<li>不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。</li>\n<li>之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</li>\n</ul>\n<h3 id=\"虚拟专用网VPN\"><a href=\"#虚拟专用网VPN\" class=\"headerlink\" title=\"虚拟专用网VPN\"></a>虚拟专用网VPN</h3><p>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。</p>\n<blockquote>\n</blockquote>\n<pre><code>有三个专用地址块：\n- 10.0.0.0 ~ 10.255.255.255\n- 172.16.0.0 ~ 172.31.255.255\n- 192.168.0.0 ~ 192.168.255.255</code></pre><p>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。</p>\n<p>下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1sZjtd.WF3KVjSZPhq6xclXXaI.jpg\" alt=\"\"></p>\n<h3 id=\"网络地址转换NAT\"><a href=\"#网络地址转换NAT\" class=\"headerlink\" title=\"网络地址转换NAT\"></a>网络地址转换NAT</h3><p>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</p>\n<p>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1vkbYaMFY.1VjSZFq761dbXXaM.png\" alt=\"\"></p>\n<h3 id=\"路由器的结构\"><a href=\"#路由器的结构\" class=\"headerlink\" title=\"路由器的结构\"></a>路由器的结构</h3><p>路由器从功能上可以划分为：路由选择和分组转发。</p>\n<p>分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1cR_sd3aH3KVjSZFjq6AFWpXaX.jpg\" alt=\"\"></p>\n<h4 id=\"路由器分组转发流程\"><a href=\"#路由器分组转发流程\" class=\"headerlink\" title=\"路由器分组转发流程\"></a>路由器分组转发流程</h4><ul>\n<li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li>\n<li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li>\n<li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li>\n<li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li>\n<li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li>\n<li>报告转发分组出错。</li>\n</ul>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1xEMGbfBj_uVjSZFpq6A0SXXag.jpg\" alt=\"\"></p>\n<h3 id=\"路由选择协议\"><a href=\"#路由选择协议\" class=\"headerlink\" title=\"路由选择协议\"></a>路由选择协议</h3><p>路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p>\n<p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p>\n<p>可以把路由选择协议划分为两大类：</p>\n<ul>\n<li>自治系统内部的路由选择：RIP 和 OSPF</li>\n<li>自治系统间的路由选择：BGP</li>\n</ul>\n<h4 id=\"内部网关协议-RIP\"><a href=\"#内部网关协议-RIP\" class=\"headerlink\" title=\"内部网关协议 RIP\"></a>内部网关协议 RIP</h4><p>RIP 是一种<strong>基于距离向量</strong>的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p>\n<p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p>\n<p>距离向量算法：</p>\n<ul>\n<li>对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；</li>\n<li>对修改后的 RIP 报文中的每一个项目，进行以下步骤：<ul>\n<li>若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；</li>\n<li>否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。</li>\n</ul>\n</li>\n<li>若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。</li>\n</ul>\n<p>RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p>\n<h4 id=\"内部网关协议-OSPF\"><a href=\"#内部网关协议-OSPF\" class=\"headerlink\" title=\"内部网关协议 OSPF\"></a>内部网关协议 OSPF</h4><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p>\n<p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p>\n<p>OSPF 具有以下特点：</p>\n<ul>\n<li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li>\n<li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li>\n<li>只有当链路状态发生变化时，路由器才会发送信息。</li>\n</ul>\n<p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p>\n<h4 id=\"外部网关协议-BGP\"><a href=\"#外部网关协议-BGP\" class=\"headerlink\" title=\"外部网关协议 BGP\"></a>外部网关协议 BGP</h4><p>BGP（Border Gateway Protocol，边界网关协议）</p>\n<p>AS 之间的路由选择很困难，主要是由于：</p>\n<ul>\n<li>互联网规模很大；</li>\n<li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li>\n<li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。<br>BGP 只能寻找一条比较好的路由，而不是最佳路由。</li>\n</ul>\n<p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p>\n<p><img data-src=\"https://ae01.alicdn.com/kf/HTB1glTAd8Kw3KVjSZFO761rDVXa0.png\" alt=\"\"></p>\n"},{"title":"正则表达式","date":"2020-03-06T06:16:31.206Z","comments":1,"_content":"\n\n#### 概述\n\n#### re模块操作\n1. re模块的使用过程\n```\n# 导入re模块\nimport re\n\n# 使用match方法进行匹配操作\n# re.match(正则表达式，要匹配的字符串)\nresult = re.match(r\"[Hh]ello\", \"hello world\")\n\n# 如果上一步匹配到数据的话，可以使用group方法来提取数据\nresult.group()\n\nresult = re.match(r\"[Hh]ello\", \"hello world\").group()   # 匹配后直接提取数据\n```\n2. re模块示例\n```\n#coding=utf-8\n\nimport re\nresult = re.match(\"itcast\", \"itcast.cn\")\nresult.group()\n```\n#### 匹配单个字符\n字符|功能|示例\n---|---|---\n.  | 匹配任意1个字符(**除了\\n**)\n[] | 匹配[]中列举的字符 | [1-8] 匹配1到8；[16] 匹配1或6；[1-36-8] 匹配1到3 6到8\n\\d | 匹配一位数字，即0-9\n\\D | 匹配非数字，即不是数字\n\\s | 匹配空白，即空格，tab键\n\\S | 匹配非空白\n\\w | 匹配单词字符，即a-z、A-Z、0-9、_、各类语言字符。。。\n\\W | 匹配非单词字符\n\n#### 匹配多个字符\n字符|功能\n---|---\n*  | 匹配前一个字符出现0次或无限次，即可有可无\n+  | 匹配前一个字符出现1次或无限次，即至少1次\n?  | 匹配前一个字符出现0次或1次，即要么没有，要么有1次\n{m}| 匹配前一个字符出现m次\n{m, n}| 匹配前一个字符出现从m到n次\n\n```\n# 匹配\\d 1到3次\nre.match(r\"速度与激情\\d{1，3}\", \"速度与激情3\").group()\n\n# 匹配连续十一位数字\nre.match(r\"\\d{11}\", \"12345678901\").group()\n\n# 匹配手机号\nre.match(r\"\\d{3,4}-?\\d{7,8}\",\"0310-3328839\").group()\n\n# 匹配'\\n'\nre.match(r\".*\", html_content, re.S).group()\n```\n\n#### 匹配开头结尾\n\n字符|功能\n---|---\n^   |   匹配字符串开头\n$   |   匹配字符串结尾\n\n#### 匹配分组\n字符|功能\n---|---\n|           |   匹配左右任意一个表达式\n(ab)        |   将括号中字符作为一个分组\n\\num        |   引用分组num匹配到的字符串\n(?P<name>)  |   分组起别名\n(?P=name)   |   引用别名为name分组匹配到的字符串\n```\nre.match(r\"([a-zA-Z0-9_]{4,20})@(163|126)\\.com$\",\"day@163.com\").group(1)\n--> 'day'\nre.match(r\"([a-zA-Z0-9_]{4,20})@(163|126)\\.com$\",\"day@163.com\").group(2)\n--> '163'\n```\n\n**示例**\n```\nre.match(r\"<(\\w*)>.*</\\1>\",\"<h1>hahaha</h1>\").group()\n\nre.match(r\"<(\\w*)><(\\w*)>.*</\\2></\\1>\",\"<body><h1>hahaha</h1><body>\").group()\n\nre.match(r\"<(?P<p1>\\w*)>.*</?P=p1>\",\"<h1>hahaha</h1>\").group()\n\n```\n\n#### re模块的高级用法\n**search**\n1. search不从头开始匹配，只要匹配到相应值就结束\n2. match默认从头开始匹配\n```\nimport re\n\nret = re.search(r\"\\d+\",\"阅读次数为9999\")\nret.group()\n--> '9999'\n```\n**findall**\nfindall从头开始匹配，提取所有符合要求的字符串\n需求：统计出Python、C、C++相应文章阅读的次数\n```\nimport re\n\nret = re.findall(r\"\\d+\",\"python = 9999, c = 7890, c++ = 12345\")\nprint(ret)\n-->['9999', '7890', '12345']\n```\n\n**sub**\n将匹配到的数据进行**替换**\n需求：将匹配到的阅读次数加1\n```\nimport re\n\ndef add(temp):\n    strNum = temp.group()\n    num = int(strNum) + 1\n    return str(num)\n\nret = re.sub(r\"\\d+\", add, 'python = 997 c++ = 900')\nprint(ret)\n--> 'python = 998 c++ = 901'\n```\n\n**split**\n根据匹配进行切割字符串，并返回一个列表\n需求：切割字符串“info:xiaoZhang 33 shandong”\n```\nimport re\n\nret = re.split(r\":| \", \"info:xiaoZhang 33 shandong\")\nprint(ret)\n--> ['info', 'xiaoZhang', '33', 'shandong']\n```\n\n#### 贪婪和非贪婪\n\n#### r的作用","source":"_posts/01-正则表达式.md","raw":"---\ntitle: 正则表达式\ndate: {{ date }}\ntags: regex\ncategories:\ncomments: true\n---\n\n\n#### 概述\n\n#### re模块操作\n1. re模块的使用过程\n```\n# 导入re模块\nimport re\n\n# 使用match方法进行匹配操作\n# re.match(正则表达式，要匹配的字符串)\nresult = re.match(r\"[Hh]ello\", \"hello world\")\n\n# 如果上一步匹配到数据的话，可以使用group方法来提取数据\nresult.group()\n\nresult = re.match(r\"[Hh]ello\", \"hello world\").group()   # 匹配后直接提取数据\n```\n2. re模块示例\n```\n#coding=utf-8\n\nimport re\nresult = re.match(\"itcast\", \"itcast.cn\")\nresult.group()\n```\n#### 匹配单个字符\n字符|功能|示例\n---|---|---\n.  | 匹配任意1个字符(**除了\\n**)\n[] | 匹配[]中列举的字符 | [1-8] 匹配1到8；[16] 匹配1或6；[1-36-8] 匹配1到3 6到8\n\\d | 匹配一位数字，即0-9\n\\D | 匹配非数字，即不是数字\n\\s | 匹配空白，即空格，tab键\n\\S | 匹配非空白\n\\w | 匹配单词字符，即a-z、A-Z、0-9、_、各类语言字符。。。\n\\W | 匹配非单词字符\n\n#### 匹配多个字符\n字符|功能\n---|---\n*  | 匹配前一个字符出现0次或无限次，即可有可无\n+  | 匹配前一个字符出现1次或无限次，即至少1次\n?  | 匹配前一个字符出现0次或1次，即要么没有，要么有1次\n{m}| 匹配前一个字符出现m次\n{m, n}| 匹配前一个字符出现从m到n次\n\n```\n# 匹配\\d 1到3次\nre.match(r\"速度与激情\\d{1，3}\", \"速度与激情3\").group()\n\n# 匹配连续十一位数字\nre.match(r\"\\d{11}\", \"12345678901\").group()\n\n# 匹配手机号\nre.match(r\"\\d{3,4}-?\\d{7,8}\",\"0310-3328839\").group()\n\n# 匹配'\\n'\nre.match(r\".*\", html_content, re.S).group()\n```\n\n#### 匹配开头结尾\n\n字符|功能\n---|---\n^   |   匹配字符串开头\n$   |   匹配字符串结尾\n\n#### 匹配分组\n字符|功能\n---|---\n|           |   匹配左右任意一个表达式\n(ab)        |   将括号中字符作为一个分组\n\\num        |   引用分组num匹配到的字符串\n(?P<name>)  |   分组起别名\n(?P=name)   |   引用别名为name分组匹配到的字符串\n```\nre.match(r\"([a-zA-Z0-9_]{4,20})@(163|126)\\.com$\",\"day@163.com\").group(1)\n--> 'day'\nre.match(r\"([a-zA-Z0-9_]{4,20})@(163|126)\\.com$\",\"day@163.com\").group(2)\n--> '163'\n```\n\n**示例**\n```\nre.match(r\"<(\\w*)>.*</\\1>\",\"<h1>hahaha</h1>\").group()\n\nre.match(r\"<(\\w*)><(\\w*)>.*</\\2></\\1>\",\"<body><h1>hahaha</h1><body>\").group()\n\nre.match(r\"<(?P<p1>\\w*)>.*</?P=p1>\",\"<h1>hahaha</h1>\").group()\n\n```\n\n#### re模块的高级用法\n**search**\n1. search不从头开始匹配，只要匹配到相应值就结束\n2. match默认从头开始匹配\n```\nimport re\n\nret = re.search(r\"\\d+\",\"阅读次数为9999\")\nret.group()\n--> '9999'\n```\n**findall**\nfindall从头开始匹配，提取所有符合要求的字符串\n需求：统计出Python、C、C++相应文章阅读的次数\n```\nimport re\n\nret = re.findall(r\"\\d+\",\"python = 9999, c = 7890, c++ = 12345\")\nprint(ret)\n-->['9999', '7890', '12345']\n```\n\n**sub**\n将匹配到的数据进行**替换**\n需求：将匹配到的阅读次数加1\n```\nimport re\n\ndef add(temp):\n    strNum = temp.group()\n    num = int(strNum) + 1\n    return str(num)\n\nret = re.sub(r\"\\d+\", add, 'python = 997 c++ = 900')\nprint(ret)\n--> 'python = 998 c++ = 901'\n```\n\n**split**\n根据匹配进行切割字符串，并返回一个列表\n需求：切割字符串“info:xiaoZhang 33 shandong”\n```\nimport re\n\nret = re.split(r\":| \", \"info:xiaoZhang 33 shandong\")\nprint(ret)\n--> ['info', 'xiaoZhang', '33', 'shandong']\n```\n\n#### 贪婪和非贪婪\n\n#### r的作用","slug":"01-正则表达式","published":1,"updated":"2020-03-06T06:16:31.206Z","layout":"post","photos":[],"link":"","_id":"ck7fsi0xn000yk859431c5k8i","content":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><h4 id=\"re模块操作\"><a href=\"#re模块操作\" class=\"headerlink\" title=\"re模块操作\"></a>re模块操作</h4><ol>\n<li>re模块的使用过程<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入re模块</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用match方法进行匹配操作</span><br><span class=\"line\"># re.match(正则表达式，要匹配的字符串)</span><br><span class=\"line\">result &#x3D; re.match(r&quot;[Hh]ello&quot;, &quot;hello world&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果上一步匹配到数据的话，可以使用group方法来提取数据</span><br><span class=\"line\">result.group()</span><br><span class=\"line\"></span><br><span class=\"line\">result &#x3D; re.match(r&quot;[Hh]ello&quot;, &quot;hello world&quot;).group()   # 匹配后直接提取数据</span><br></pre></td></tr></table></figure></li>\n<li>re模块示例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding&#x3D;utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">import re</span><br><span class=\"line\">result &#x3D; re.match(&quot;itcast&quot;, &quot;itcast.cn&quot;)</span><br><span class=\"line\">result.group()</span><br></pre></td></tr></table></figure>\n<h4 id=\"匹配单个字符\"><a href=\"#匹配单个字符\" class=\"headerlink\" title=\"匹配单个字符\"></a>匹配单个字符</h4>字符|功能|示例</li>\n</ol>\n<p>—|—|—<br>.  | 匹配任意1个字符(<strong>除了\\n</strong>)<br>[] | 匹配[]中列举的字符 | [1-8] 匹配1到8；[16] 匹配1或6；[1-36-8] 匹配1到3 6到8<br>\\d | 匹配一位数字，即0-9<br>\\D | 匹配非数字，即不是数字<br>\\s | 匹配空白，即空格，tab键<br>\\S | 匹配非空白<br>\\w | 匹配单词字符，即a-z、A-Z、0-9、_、各类语言字符。。。<br>\\W | 匹配非单词字符</p>\n<h4 id=\"匹配多个字符\"><a href=\"#匹配多个字符\" class=\"headerlink\" title=\"匹配多个字符\"></a>匹配多个字符</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配前一个字符出现0次或无限次，即可有可无</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前一个字符出现1次或无限次，即至少1次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前一个字符出现0次或1次，即要么没有，要么有1次</td>\n</tr>\n<tr>\n<td>{m}</td>\n<td>匹配前一个字符出现m次</td>\n</tr>\n<tr>\n<td>{m, n}</td>\n<td>匹配前一个字符出现从m到n次</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 匹配\\d 1到3次</span><br><span class=\"line\">re.match(r&quot;速度与激情\\d&#123;1，3&#125;&quot;, &quot;速度与激情3&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\"># 匹配连续十一位数字</span><br><span class=\"line\">re.match(r&quot;\\d&#123;11&#125;&quot;, &quot;12345678901&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\"># 匹配手机号</span><br><span class=\"line\">re.match(r&quot;\\d&#123;3,4&#125;-?\\d&#123;7,8&#125;&quot;,&quot;0310-3328839&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\"># 匹配&#39;\\n&#39;</span><br><span class=\"line\">re.match(r&quot;.*&quot;, html_content, re.S).group()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配开头结尾\"><a href=\"#匹配开头结尾\" class=\"headerlink\" title=\"匹配开头结尾\"></a>匹配开头结尾</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>匹配字符串开头</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配字符串结尾</td>\n</tr>\n</tbody></table>\n<h4 id=\"匹配分组\"><a href=\"#匹配分组\" class=\"headerlink\" title=\"匹配分组\"></a>匹配分组</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(ab)</td>\n<td>将括号中字符作为一个分组</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>引用分组num匹配到的字符串</td>\n</tr>\n<tr>\n<td>(?P<name>)</td>\n<td>分组起别名</td>\n</tr>\n<tr>\n<td>(?P=name)</td>\n<td>引用别名为name分组匹配到的字符串</td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.match(r&quot;([a-zA-Z0-9_]&#123;4,20&#125;)@(163|126)\\.com$&quot;,&quot;day@163.com&quot;).group(1)</span><br><span class=\"line\">--&gt; &#39;day&#39;</span><br><span class=\"line\">re.match(r&quot;([a-zA-Z0-9_]&#123;4,20&#125;)@(163|126)\\.com$&quot;,&quot;day@163.com&quot;).group(2)</span><br><span class=\"line\">--&gt; &#39;163&#39;</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.match(r&quot;&lt;(\\w*)&gt;.*&lt;&#x2F;\\1&gt;&quot;,&quot;&lt;h1&gt;hahaha&lt;&#x2F;h1&gt;&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\">re.match(r&quot;&lt;(\\w*)&gt;&lt;(\\w*)&gt;.*&lt;&#x2F;\\2&gt;&lt;&#x2F;\\1&gt;&quot;,&quot;&lt;body&gt;&lt;h1&gt;hahaha&lt;&#x2F;h1&gt;&lt;body&gt;&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\">re.match(r&quot;&lt;(?P&lt;p1&gt;\\w*)&gt;.*&lt;&#x2F;?P&#x3D;p1&gt;&quot;,&quot;&lt;h1&gt;hahaha&lt;&#x2F;h1&gt;&quot;).group()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"re模块的高级用法\"><a href=\"#re模块的高级用法\" class=\"headerlink\" title=\"re模块的高级用法\"></a>re模块的高级用法</h4><p><strong>search</strong></p>\n<ol>\n<li>search不从头开始匹配，只要匹配到相应值就结束</li>\n<li>match默认从头开始匹配<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; re.search(r&quot;\\d+&quot;,&quot;阅读次数为9999&quot;)</span><br><span class=\"line\">ret.group()</span><br><span class=\"line\">--&gt; &#39;9999&#39;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>findall</strong><br>findall从头开始匹配，提取所有符合要求的字符串<br>需求：统计出Python、C、C++相应文章阅读的次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; re.findall(r&quot;\\d+&quot;,&quot;python &#x3D; 9999, c &#x3D; 7890, c++ &#x3D; 12345&quot;)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">--&gt;[&#39;9999&#39;, &#39;7890&#39;, &#39;12345&#39;]</span><br></pre></td></tr></table></figure>\n\n<p><strong>sub</strong><br>将匹配到的数据进行<strong>替换</strong><br>需求：将匹配到的阅读次数加1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">def add(temp):</span><br><span class=\"line\">    strNum &#x3D; temp.group()</span><br><span class=\"line\">    num &#x3D; int(strNum) + 1</span><br><span class=\"line\">    return str(num)</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; re.sub(r&quot;\\d+&quot;, add, &#39;python &#x3D; 997 c++ &#x3D; 900&#39;)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">--&gt; &#39;python &#x3D; 998 c++ &#x3D; 901&#39;</span><br></pre></td></tr></table></figure>\n\n<p><strong>split</strong><br>根据匹配进行切割字符串，并返回一个列表<br>需求：切割字符串“info:xiaoZhang 33 shandong”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; re.split(r&quot;:| &quot;, &quot;info:xiaoZhang 33 shandong&quot;)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">--&gt; [&#39;info&#39;, &#39;xiaoZhang&#39;, &#39;33&#39;, &#39;shandong&#39;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"贪婪和非贪婪\"><a href=\"#贪婪和非贪婪\" class=\"headerlink\" title=\"贪婪和非贪婪\"></a>贪婪和非贪婪</h4><h4 id=\"r的作用\"><a href=\"#r的作用\" class=\"headerlink\" title=\"r的作用\"></a>r的作用</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><h4 id=\"re模块操作\"><a href=\"#re模块操作\" class=\"headerlink\" title=\"re模块操作\"></a>re模块操作</h4><ol>\n<li>re模块的使用过程<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入re模块</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用match方法进行匹配操作</span><br><span class=\"line\"># re.match(正则表达式，要匹配的字符串)</span><br><span class=\"line\">result &#x3D; re.match(r&quot;[Hh]ello&quot;, &quot;hello world&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果上一步匹配到数据的话，可以使用group方法来提取数据</span><br><span class=\"line\">result.group()</span><br><span class=\"line\"></span><br><span class=\"line\">result &#x3D; re.match(r&quot;[Hh]ello&quot;, &quot;hello world&quot;).group()   # 匹配后直接提取数据</span><br></pre></td></tr></table></figure></li>\n<li>re模块示例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding&#x3D;utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">import re</span><br><span class=\"line\">result &#x3D; re.match(&quot;itcast&quot;, &quot;itcast.cn&quot;)</span><br><span class=\"line\">result.group()</span><br></pre></td></tr></table></figure>\n<h4 id=\"匹配单个字符\"><a href=\"#匹配单个字符\" class=\"headerlink\" title=\"匹配单个字符\"></a>匹配单个字符</h4>字符|功能|示例</li>\n</ol>\n<p>—|—|—<br>.  | 匹配任意1个字符(<strong>除了\\n</strong>)<br>[] | 匹配[]中列举的字符 | [1-8] 匹配1到8；[16] 匹配1或6；[1-36-8] 匹配1到3 6到8<br>\\d | 匹配一位数字，即0-9<br>\\D | 匹配非数字，即不是数字<br>\\s | 匹配空白，即空格，tab键<br>\\S | 匹配非空白<br>\\w | 匹配单词字符，即a-z、A-Z、0-9、_、各类语言字符。。。<br>\\W | 匹配非单词字符</p>\n<h4 id=\"匹配多个字符\"><a href=\"#匹配多个字符\" class=\"headerlink\" title=\"匹配多个字符\"></a>匹配多个字符</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>匹配前一个字符出现0次或无限次，即可有可无</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前一个字符出现1次或无限次，即至少1次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前一个字符出现0次或1次，即要么没有，要么有1次</td>\n</tr>\n<tr>\n<td>{m}</td>\n<td>匹配前一个字符出现m次</td>\n</tr>\n<tr>\n<td>{m, n}</td>\n<td>匹配前一个字符出现从m到n次</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 匹配\\d 1到3次</span><br><span class=\"line\">re.match(r&quot;速度与激情\\d&#123;1，3&#125;&quot;, &quot;速度与激情3&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\"># 匹配连续十一位数字</span><br><span class=\"line\">re.match(r&quot;\\d&#123;11&#125;&quot;, &quot;12345678901&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\"># 匹配手机号</span><br><span class=\"line\">re.match(r&quot;\\d&#123;3,4&#125;-?\\d&#123;7,8&#125;&quot;,&quot;0310-3328839&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\"># 匹配&#39;\\n&#39;</span><br><span class=\"line\">re.match(r&quot;.*&quot;, html_content, re.S).group()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"匹配开头结尾\"><a href=\"#匹配开头结尾\" class=\"headerlink\" title=\"匹配开头结尾\"></a>匹配开头结尾</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>匹配字符串开头</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配字符串结尾</td>\n</tr>\n</tbody></table>\n<h4 id=\"匹配分组\"><a href=\"#匹配分组\" class=\"headerlink\" title=\"匹配分组\"></a>匹配分组</h4><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>(ab)</td>\n<td>将括号中字符作为一个分组</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>引用分组num匹配到的字符串</td>\n</tr>\n<tr>\n<td>(?P<name>)</td>\n<td>分组起别名</td>\n</tr>\n<tr>\n<td>(?P=name)</td>\n<td>引用别名为name分组匹配到的字符串</td>\n</tr>\n<tr>\n<td><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.match(r&quot;([a-zA-Z0-9_]&#123;4,20&#125;)@(163|126)\\.com$&quot;,&quot;day@163.com&quot;).group(1)</span><br><span class=\"line\">--&gt; &#39;day&#39;</span><br><span class=\"line\">re.match(r&quot;([a-zA-Z0-9_]&#123;4,20&#125;)@(163|126)\\.com$&quot;,&quot;day@163.com&quot;).group(2)</span><br><span class=\"line\">--&gt; &#39;163&#39;</span><br></pre></td></tr></table></figure></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re.match(r&quot;&lt;(\\w*)&gt;.*&lt;&#x2F;\\1&gt;&quot;,&quot;&lt;h1&gt;hahaha&lt;&#x2F;h1&gt;&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\">re.match(r&quot;&lt;(\\w*)&gt;&lt;(\\w*)&gt;.*&lt;&#x2F;\\2&gt;&lt;&#x2F;\\1&gt;&quot;,&quot;&lt;body&gt;&lt;h1&gt;hahaha&lt;&#x2F;h1&gt;&lt;body&gt;&quot;).group()</span><br><span class=\"line\"></span><br><span class=\"line\">re.match(r&quot;&lt;(?P&lt;p1&gt;\\w*)&gt;.*&lt;&#x2F;?P&#x3D;p1&gt;&quot;,&quot;&lt;h1&gt;hahaha&lt;&#x2F;h1&gt;&quot;).group()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"re模块的高级用法\"><a href=\"#re模块的高级用法\" class=\"headerlink\" title=\"re模块的高级用法\"></a>re模块的高级用法</h4><p><strong>search</strong></p>\n<ol>\n<li>search不从头开始匹配，只要匹配到相应值就结束</li>\n<li>match默认从头开始匹配<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; re.search(r&quot;\\d+&quot;,&quot;阅读次数为9999&quot;)</span><br><span class=\"line\">ret.group()</span><br><span class=\"line\">--&gt; &#39;9999&#39;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>findall</strong><br>findall从头开始匹配，提取所有符合要求的字符串<br>需求：统计出Python、C、C++相应文章阅读的次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; re.findall(r&quot;\\d+&quot;,&quot;python &#x3D; 9999, c &#x3D; 7890, c++ &#x3D; 12345&quot;)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">--&gt;[&#39;9999&#39;, &#39;7890&#39;, &#39;12345&#39;]</span><br></pre></td></tr></table></figure>\n\n<p><strong>sub</strong><br>将匹配到的数据进行<strong>替换</strong><br>需求：将匹配到的阅读次数加1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">def add(temp):</span><br><span class=\"line\">    strNum &#x3D; temp.group()</span><br><span class=\"line\">    num &#x3D; int(strNum) + 1</span><br><span class=\"line\">    return str(num)</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; re.sub(r&quot;\\d+&quot;, add, &#39;python &#x3D; 997 c++ &#x3D; 900&#39;)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">--&gt; &#39;python &#x3D; 998 c++ &#x3D; 901&#39;</span><br></pre></td></tr></table></figure>\n\n<p><strong>split</strong><br>根据匹配进行切割字符串，并返回一个列表<br>需求：切割字符串“info:xiaoZhang 33 shandong”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">ret &#x3D; re.split(r&quot;:| &quot;, &quot;info:xiaoZhang 33 shandong&quot;)</span><br><span class=\"line\">print(ret)</span><br><span class=\"line\">--&gt; [&#39;info&#39;, &#39;xiaoZhang&#39;, &#39;33&#39;, &#39;shandong&#39;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"贪婪和非贪婪\"><a href=\"#贪婪和非贪婪\" class=\"headerlink\" title=\"贪婪和非贪婪\"></a>贪婪和非贪婪</h4><h4 id=\"r的作用\"><a href=\"#r的作用\" class=\"headerlink\" title=\"r的作用\"></a>r的作用</h4>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck7fsi0ww0007k859cpv27sv9","tag_id":"ck7fsi0wq0004k8599gdc713o","_id":"ck7fsi0x8000ak85959jv3ui1"},{"post_id":"ck7fsi0we0000k859fozm2khs","tag_id":"ck7fsi0wq0004k8599gdc713o","_id":"ck7fsi0xa000ck859761oenqk"},{"post_id":"ck7fsi0wx0008k8596nqwguip","tag_id":"ck7fsi0wq0004k8599gdc713o","_id":"ck7fsi0xc000fk859b87l25il"},{"post_id":"ck7fsi0wn0002k8592ofz8v69","tag_id":"ck7fsi0wq0004k8599gdc713o","_id":"ck7fsi0xd000hk859gizter8m"},{"post_id":"ck7fsi0wt0005k85914x0hx4g","tag_id":"ck7fsi0wq0004k8599gdc713o","_id":"ck7fsi0xf000kk8596hhg0002"},{"post_id":"ck7fsi0x8000bk8591ioh6mpx","tag_id":"ck7fsi0xf000jk8599yceadqc","_id":"ck7fsi0xj000pk85980ku2jq5"},{"post_id":"ck7fsi0xi000ok85991ok1018","tag_id":"ck7fsi0xi000nk8596192gs4c","_id":"ck7fsi0xl000sk8595x8i3zim"},{"post_id":"ck7fsi0xc000gk85935epe905","tag_id":"ck7fsi0xi000nk8596192gs4c","_id":"ck7fsi0xm000uk8593lanaza0"},{"post_id":"ck7fsi0xk000qk8597795d0lk","tag_id":"ck7fsi0xi000nk8596192gs4c","_id":"ck7fsi0xn000wk859ds8bg251"},{"post_id":"ck7fsi0xl000tk8597sa0a7ot","tag_id":"ck7fsi0xi000nk8596192gs4c","_id":"ck7fsi0xp000zk85942mwan33"},{"post_id":"ck7fsi0xg000lk859bqfi2jy4","tag_id":"ck7fsi0xk000rk8590u09c9ny","_id":"ck7fsi0xp0010k859hk0f8bx7"},{"post_id":"ck7fsi0xm000vk8595s1rfqzt","tag_id":"ck7fsi0xi000nk8596192gs4c","_id":"ck7fsi0xq0012k859e6p67wjp"},{"post_id":"ck7fsi0xh000mk859a0mz9bhb","tag_id":"ck7fsi0xi000nk8596192gs4c","_id":"ck7fsi0xq0013k8591ywuf5hi"},{"post_id":"ck7fsi0xn000yk859431c5k8i","tag_id":"ck7fsi0xp0011k8596600f373","_id":"ck7fsi0xq0014k8597jyk85fg"}],"Tag":[{"name":"python","_id":"ck7fsi0wq0004k8599gdc713o"},{"name":"gitee","_id":"ck7fsi0xf000jk8599yceadqc"},{"name":"Internet","_id":"ck7fsi0xi000nk8596192gs4c"},{"name":"hackintosh","_id":"ck7fsi0xk000rk8590u09c9ny"},{"name":"regex","_id":"ck7fsi0xp0011k8596600f373"}]}}